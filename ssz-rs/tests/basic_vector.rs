mod test_utils;

use ssz_rs::prelude::*;
use test_utils::{
    deserialize, hash_tree_root, read_ssz_snappy_from_test_data, root_from_hex, serialize,
};

#[test]
fn test_basic_vector_vec_uint256_16_max() {
    let mut value = Vector::<U256, 16>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_16_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("006eed26f731a68917853879507d9fa9f4044f7af999f9df535fac29715db555");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_5_random() {
    let mut value = Vector::<u64, 5>::try_from(Vec::<u64>::from_iter([
        5828194763697002133,
        3153164540286514337,
        17780602567657386724,
        14508245260957717736,
        17433120455160158885,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_5_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("11f1f940a8342239bd6a9f7eb4f08eff81e1d4467df7399a6d8729c59aabb984");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_512_zero() {
    let mut value = Vector::<U256, 512>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_512_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_513_zero() {
    let mut value = Vector::<u16, 513>::try_from(Vec::<u16>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_513_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("d88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_4_zero() {
    let mut value =
        Vector::<bool, 4>::try_from(Vec::<bool>::from_iter([false, false, false, false])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_4_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_5_zero() {
    let mut value = Vector::<u64, 5>::try_from(Vec::<u64>::from_iter([0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_5_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_1_random() {
    let mut value = Vector::<u8, 1>::try_from(Vec::<u8>::from_iter([225])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_1_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("e100000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_513_random() {
    let mut value = Vector::<u32, 513>::try_from(Vec::<u32>::from_iter([
        1506286316, 3340455671, 2249197219, 1137228810, 3708188369, 1032790960, 2037375995,
        2165993127, 4279139643, 2878934835, 2234060784, 3341241397, 2832291162, 1862974295,
        2889755957, 716023347, 1781425995, 2766618165, 430694095, 1734393401, 3038286926,
        3255298884, 582239825, 4282855218, 4037619729, 4120262294, 3201356237, 2129479017,
        2298271168, 653701574, 4073339317, 753403713, 666458174, 601739694, 991606557, 498411397,
        913566211, 2843839713, 1248176716, 3173178403, 543145845, 1325723472, 1189806715,
        2611216111, 2540953507, 1759274002, 4096358814, 450494791, 2381579651, 665652591,
        1557892724, 4168366933, 2466073243, 3798260386, 1561520741, 3664263969, 1638137859,
        2167415852, 385021871, 1910306539, 1268079858, 438813197, 3745724194, 4085199927,
        2952778760, 2474423108, 3642524002, 1873853403, 4121767960, 480950318, 1831383191,
        66237295, 2959509997, 3246280272, 1333288321, 1206621475, 3346990117, 2638657967,
        2024365252, 840741523, 3914944712, 205708374, 1450434398, 2445220963, 3831582069,
        3465469049, 1018383524, 1117522544, 723038903, 1620185571, 1064668939, 576109385,
        2828800672, 2252340617, 2748600585, 3985166077, 2112758930, 2520322950, 1921186383,
        2034758722, 1857181222, 465190395, 3176726281, 3540283126, 1769857205, 358472846,
        518077754, 565062142, 2382811964, 1649966621, 2267265845, 3818128603, 2294250758,
        3613687380, 2592975730, 3287202364, 931524721, 3095974833, 1957121000, 2137051497,
        2686354159, 858594131, 2718934110, 971575805, 1367980273, 3276477567, 939318706,
        1423831258, 3750632431, 4103488232, 2463611651, 1774045082, 1068942028, 3900895791,
        3357521548, 1997636802, 1408745787, 1198080120, 4195633777, 3307995274, 802811736,
        29479226, 1742888435, 551237958, 1168518096, 3386124569, 3128826162, 2977548974,
        1588907015, 707192585, 2733838829, 1414430182, 2535485231, 2196633121, 2463541328,
        812262923, 484565396, 1622322609, 3101255187, 3134374185, 16503051, 285493324, 432140521,
        1355563783, 38249683, 4178611981, 1484297329, 3718934377, 4150643229, 3403499489,
        731879685, 3517169620, 2854266221, 3506230662, 1930958121, 4123949451, 900225876,
        3091874489, 2698105599, 2508004367, 2238398363, 1427390625, 2903189632, 3000028363,
        571012530, 63175638, 59853690, 1713147023, 3146249007, 3526181153, 1372883894, 1504561928,
        2457118510, 1626985271, 987978391, 143836281, 3789995858, 3252070375, 4132634261,
        3221782718, 349567165, 3416784449, 1727443970, 2430130758, 3594949372, 972991002,
        3092618197, 1901637435, 3667090212, 114128050, 804086554, 1093298018, 3933497340,
        3389536209, 1367076373, 1495662617, 3033503538, 598961572, 2925618706, 3016222921,
        3591371655, 3748132815, 2009211793, 3668211961, 4147806015, 1388741344, 1490496015,
        3683837807, 2901683192, 1810619706, 1495518881, 2776414283, 4109520767, 2840215364,
        2518978058, 3160417324, 3775105752, 489152240, 1978176050, 1198088809, 3537016245,
        3876031109, 4040591353, 2864117648, 154646669, 1034221632, 3322212787, 3952301773,
        3710723473, 2891835090, 419231810, 2089280376, 1985119198, 1402546590, 2728523506,
        418516640, 4173335852, 1997416910, 1711781512, 3229441913, 458702555, 3437685422,
        2012224269, 8576837, 1289578171, 46388586, 953564783, 4227283809, 1039808904, 73072792,
        1074493689, 1364122679, 2145323461, 930933353, 2409668532, 1634491673, 707031241,
        3155394720, 1303817262, 3555872033, 3128202286, 568159496, 552258584, 3973549089,
        1060464717, 3140249670, 2430674601, 3363698437, 1577485436, 2983698493, 1858777960,
        3960906150, 519861347, 1767214457, 3384748076, 4009704865, 3607502512, 2288460027,
        949763013, 4048574249, 135230061, 800488137, 4033357964, 2227166319, 3424631590,
        3425238545, 1702015330, 3447556229, 2170689549, 497644257, 4185223235, 2839954560,
        1342812737, 1486113821, 231486973, 2681013696, 1838238458, 1071749240, 889525611,
        2099459701, 2183271852, 3621795461, 651464427, 1165461003, 2584995600, 4236741445,
        3566914702, 617066705, 306945100, 221558467, 205877939, 498620318, 1220636744, 2084900749,
        3341960165, 2017827827, 3139327527, 2593883084, 552652114, 2177915392, 3598924413,
        4005395602, 3396456091, 2549752221, 827357923, 2383403384, 1355306673, 2066102692,
        2454374990, 2185051248, 330410530, 944069661, 1799157665, 1378364549, 1167099369,
        1240179795, 1716793447, 1845918660, 1653459010, 737301750, 171556112, 1142613921,
        4002411749, 2710100149, 3293072449, 3355947151, 3318954054, 3909933896, 2318026715,
        3098628905, 82164764, 2112510872, 1622160195, 3601322957, 1309662235, 116350522,
        2944765264, 1798670043, 1355087853, 2114961922, 1475273625, 3747013596, 1153638626,
        947205157, 2674464284, 1524507392, 4285752117, 2201619328, 2352035814, 3287902853,
        651378914, 3181046705, 2660894372, 3541173450, 1581635980, 885116129, 165540048,
        1738547452, 2375458597, 216095626, 1686223374, 3466801601, 3536178351, 142933408,
        3134380789, 2700580797, 3580743180, 182034499, 2993168171, 3520956124, 3187702160,
        2099180929, 4277314162, 43671642, 1972002241, 2530400265, 2989038791, 4033451152,
        3166020882, 2830883087, 1848825694, 408689932, 3384769654, 781083988, 636248491,
        1967482400, 1172573031, 1439895523, 2488044060, 4065107509, 3715028207, 2812954358,
        4108359554, 3591793532, 1068128478, 1605736168, 2062217997, 2722331125, 2614301416,
        2516767397, 907111898, 1792625177, 3141205496, 4178269297, 3115197996, 2338391639,
        2451731357, 2634998417, 3648889870, 3373935617, 1145153742, 734057970, 937333535,
        3268493535, 2027372762, 1877116097, 1019941937, 1013534127, 2588864974, 4206609071,
        3484011851, 386496563, 2259806811, 2081546382, 1177459515, 1173797248, 2823727885,
        3065122614, 1446822518, 4081343003, 3981935143, 2258722366, 3182066297, 1990687767,
        2347506465, 1072240320, 2050296960, 1956416018, 2005655829, 100462876, 51128402, 732387540,
        123604188, 431055316, 1312308164, 1317552596, 735778923, 938916610, 459366303, 4104152733,
        2726288486, 2401227334, 2713354785, 2556762219, 1826807441, 1522326161, 3897258428,
        3478082366, 451761890, 1225089752, 1262376617, 3824933588, 2227252992, 4015579077,
        320045527, 579310834, 1762256425, 3585893227, 2476950437, 1559797180, 1197444470,
        3233215794, 682626811,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_513_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("73d6601e80c118fe2d467dcc72a40e9a121608b87b5d1333a6a95fcbc93af038");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_4_random() {
    let mut value = Vector::<u32, 4>::try_from(Vec::<u32>::from_iter([
        2599571881, 2754953818, 2448479820, 3973051506,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_4_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("a951f29a5a4235a44cd6f09172f4cfec00000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_31_max() {
    let mut value = Vector::<bool, 31>::try_from(Vec::<bool>::from_iter([
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_31_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0101010101010101010101010101010101010101010101010101010101010100");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_5_zero() {
    let mut value = Vector::<u8, 5>::try_from(Vec::<u8>::from_iter([0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_5_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_2_random() {
    let mut value = Vector::<u16, 2>::try_from(Vec::<u16>::from_iter([12188, 36886])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_2_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("9c2f169000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_8_zero() {
    let mut value = Vector::<bool, 8>::try_from(Vec::<bool>::from_iter([
        false, false, false, false, false, false, false, false,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_8_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_16_max() {
    let mut value = Vector::<u128, 16>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_16_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("be1b7015ed50d7490a51f1b11dff804a4440775cc808b9cfd26157805c1f8e86");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_8_random() {
    let mut value = Vector::<u32, 8>::try_from(Vec::<u32>::from_iter([
        2255247108, 883929842, 2722841916, 3289001244, 3428769191, 4039771928, 1073577161,
        1629830620,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_8_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("04576c86f2b2af343c454ba21c2d0ac4a7dd5ecc1807caf0c97cfd3fdc3d2561");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_31_max() {
    let mut value = Vector::<u64, 31>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_31_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("6323465d736a7126b4e2a25da8d76670d49d6bb0cdf9ffc77d0b007a9e86d77c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_31_random() {
    let mut value = Vector::<U256, 31>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            193, 221, 0, 27, 7, 14, 132, 79, 246, 169, 102, 206, 52, 7, 70, 134, 104, 201, 85, 248,
            190, 117, 18, 78, 173, 106, 20, 121, 246, 174, 52, 111,
        ]),
        U256::from_bytes_le([
            77, 163, 1, 33, 241, 64, 145, 38, 118, 203, 187, 74, 226, 61, 193, 122, 84, 213, 199,
            190, 152, 30, 25, 148, 113, 35, 91, 41, 95, 81, 65, 193,
        ]),
        U256::from_bytes_le([
            62, 63, 30, 44, 176, 253, 109, 5, 94, 138, 230, 183, 64, 142, 121, 138, 118, 55, 68,
            199, 73, 150, 26, 179, 202, 238, 228, 119, 182, 66, 142, 181,
        ]),
        U256::from_bytes_le([
            126, 5, 183, 228, 32, 15, 73, 40, 131, 27, 123, 43, 103, 141, 219, 98, 62, 205, 85, 38,
            104, 240, 98, 11, 232, 253, 65, 78, 73, 138, 72, 25,
        ]),
        U256::from_bytes_le([
            109, 90, 131, 232, 44, 29, 218, 226, 157, 93, 247, 239, 96, 164, 131, 142, 114, 175,
            234, 237, 206, 45, 213, 110, 90, 157, 89, 110, 8, 61, 153, 232,
        ]),
        U256::from_bytes_le([
            20, 86, 100, 251, 170, 152, 231, 58, 130, 224, 226, 238, 69, 37, 195, 44, 207, 126, 51,
            118, 72, 155, 72, 1, 65, 166, 34, 12, 43, 0, 87, 113,
        ]),
        U256::from_bytes_le([
            161, 42, 241, 82, 66, 189, 83, 79, 78, 234, 170, 149, 181, 121, 234, 196, 29, 248, 148,
            222, 212, 164, 209, 130, 250, 177, 19, 182, 234, 132, 47, 194,
        ]),
        U256::from_bytes_le([
            202, 42, 41, 233, 119, 86, 102, 102, 21, 21, 180, 115, 212, 144, 13, 94, 126, 141, 53,
            132, 26, 127, 107, 83, 224, 31, 169, 25, 197, 243, 128, 37,
        ]),
        U256::from_bytes_le([
            219, 143, 23, 64, 86, 102, 131, 106, 133, 54, 96, 39, 17, 34, 130, 187, 59, 110, 101,
            241, 235, 57, 135, 43, 172, 96, 98, 86, 204, 140, 216, 49,
        ]),
        U256::from_bytes_le([
            149, 148, 138, 79, 51, 240, 14, 235, 219, 120, 11, 3, 229, 125, 62, 49, 130, 55, 61,
            61, 214, 114, 185, 228, 11, 104, 125, 90, 160, 205, 85, 15,
        ]),
        U256::from_bytes_le([
            3, 163, 91, 202, 215, 130, 178, 128, 87, 21, 242, 136, 83, 227, 10, 12, 138, 164, 203,
            43, 131, 20, 219, 62, 142, 20, 96, 107, 241, 115, 238, 107,
        ]),
        U256::from_bytes_le([
            53, 174, 177, 239, 64, 162, 213, 178, 223, 90, 208, 212, 87, 27, 145, 72, 82, 143, 158,
            106, 255, 72, 57, 101, 106, 123, 125, 133, 237, 247, 91, 96,
        ]),
        U256::from_bytes_le([
            186, 105, 38, 141, 57, 120, 240, 7, 49, 159, 250, 166, 5, 95, 67, 237, 120, 160, 85,
            239, 237, 243, 219, 91, 99, 173, 147, 44, 119, 182, 115, 70,
        ]),
        U256::from_bytes_le([
            153, 206, 8, 153, 108, 157, 130, 58, 46, 220, 171, 135, 10, 157, 243, 130, 18, 215,
            226, 154, 53, 65, 183, 35, 115, 18, 196, 219, 93, 0, 72, 66,
        ]),
        U256::from_bytes_le([
            43, 199, 155, 15, 79, 246, 48, 49, 5, 247, 16, 136, 127, 170, 54, 129, 144, 125, 61,
            98, 93, 239, 189, 0, 82, 65, 114, 30, 158, 68, 182, 40,
        ]),
        U256::from_bytes_le([
            60, 244, 129, 113, 176, 159, 9, 207, 54, 202, 45, 173, 210, 82, 121, 67, 223, 78, 35,
            158, 158, 120, 165, 97, 17, 172, 60, 239, 86, 143, 204, 91,
        ]),
        U256::from_bytes_le([
            86, 229, 158, 131, 226, 117, 240, 50, 5, 92, 109, 24, 69, 82, 68, 225, 157, 124, 206,
            164, 10, 248, 79, 243, 148, 42, 134, 121, 72, 53, 10, 130,
        ]),
        U256::from_bytes_le([
            67, 243, 95, 138, 28, 254, 88, 132, 100, 152, 126, 234, 243, 61, 251, 124, 188, 18,
            228, 138, 89, 170, 214, 111, 201, 85, 209, 208, 133, 49, 251, 246,
        ]),
        U256::from_bytes_le([
            158, 36, 44, 110, 93, 209, 197, 243, 226, 98, 109, 47, 67, 183, 211, 94, 140, 58, 102,
            195, 86, 151, 133, 201, 128, 97, 45, 117, 122, 250, 13, 9,
        ]),
        U256::from_bytes_le([
            164, 207, 184, 58, 249, 186, 175, 34, 118, 14, 178, 78, 252, 169, 243, 33, 140, 146,
            122, 94, 167, 10, 193, 16, 39, 4, 148, 253, 129, 252, 156, 146,
        ]),
        U256::from_bytes_le([
            241, 254, 164, 59, 80, 246, 221, 27, 23, 102, 106, 191, 174, 98, 212, 207, 45, 162,
            216, 255, 120, 207, 10, 131, 170, 156, 113, 3, 121, 217, 44, 30,
        ]),
        U256::from_bytes_le([
            37, 240, 161, 54, 122, 236, 178, 182, 209, 63, 135, 64, 171, 97, 170, 160, 85, 236,
            253, 159, 120, 72, 181, 101, 43, 114, 122, 93, 253, 189, 235, 13,
        ]),
        U256::from_bytes_le([
            37, 108, 195, 144, 156, 146, 136, 166, 183, 232, 83, 78, 177, 231, 95, 77, 82, 201,
            121, 28, 29, 17, 116, 59, 207, 162, 140, 160, 222, 238, 228, 115,
        ]),
        U256::from_bytes_le([
            104, 172, 43, 39, 207, 174, 177, 164, 213, 34, 173, 28, 186, 37, 202, 76, 25, 123, 213,
            148, 215, 139, 98, 214, 16, 32, 65, 2, 187, 51, 243, 242,
        ]),
        U256::from_bytes_le([
            144, 231, 33, 5, 53, 156, 65, 127, 83, 108, 232, 47, 63, 138, 240, 56, 0, 57, 143, 87,
            202, 122, 135, 105, 254, 195, 98, 135, 250, 22, 49, 130,
        ]),
        U256::from_bytes_le([
            149, 216, 205, 189, 144, 203, 149, 127, 90, 202, 114, 35, 55, 84, 198, 72, 202, 207,
            31, 159, 19, 228, 231, 181, 117, 93, 97, 57, 133, 243, 99, 97,
        ]),
        U256::from_bytes_le([
            160, 125, 245, 184, 129, 140, 184, 233, 68, 184, 156, 12, 142, 202, 77, 215, 163, 168,
            67, 216, 209, 201, 180, 252, 209, 169, 204, 21, 63, 62, 120, 36,
        ]),
        U256::from_bytes_le([
            146, 159, 182, 144, 237, 183, 9, 230, 55, 237, 136, 103, 166, 223, 199, 105, 180, 124,
            173, 16, 157, 45, 65, 190, 223, 204, 202, 163, 222, 68, 13, 105,
        ]),
        U256::from_bytes_le([
            205, 244, 175, 220, 65, 243, 125, 146, 29, 127, 3, 135, 181, 37, 184, 238, 253, 236,
            208, 56, 113, 55, 57, 224, 31, 32, 142, 252, 246, 23, 173, 153,
        ]),
        U256::from_bytes_le([
            127, 206, 138, 216, 23, 163, 78, 200, 208, 77, 20, 105, 182, 34, 196, 10, 171, 130, 9,
            120, 214, 180, 155, 66, 102, 30, 243, 90, 177, 244, 76, 110,
        ]),
        U256::from_bytes_le([
            29, 128, 241, 233, 25, 243, 148, 120, 122, 143, 67, 17, 176, 24, 21, 215, 64, 97, 4,
            154, 145, 60, 248, 254, 205, 97, 37, 111, 87, 79, 95, 2,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_31_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("a1bd4eec44b1f37b07b53f29daf2a3569be0d6ebe727e18539071206950a6813");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_8_zero() {
    let mut value =
        Vector::<u64, 8>::try_from(Vec::<u64>::from_iter([0, 0, 0, 0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_8_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_512_random() {
    let mut value = Vector::<u128, 512>::try_from(Vec::<u128>::from_iter([
        26828682623905485853721589978864387876,
        45362230084934828632880963081896644001,
        247417070223805448009596661148965288679,
        233435946323840404519105253470141693058,
        48270642472271104900526093037459031455,
        66520735216030151239714891092404644513,
        280229322034323384052699099308850986999,
        104876539345324116234633977126562892583,
        62053737243447943335328889845976890418,
        115150778003737644570314412548569196662,
        60837422455905539464283970835244348165,
        14971885816624552460364123313225338840,
        141373400188887949233573643440572148370,
        315558180146170550304219748075496589529,
        192832702686931265848701899386472550861,
        195242849447416542650282397408705348609,
        3159768586696475726130243760652423921,
        280976955595646743990035910166905396696,
        48145462755830632991328135842155799273,
        45727448734246753632897580957866192001,
        93669871191691645101398613537831796721,
        270468935803632630299259822557389975996,
        257657171915062120800715583958851021431,
        143502338199025987170760915516024962297,
        88823700945885749471690202908135711777,
        167825619953100335773847023551371760978,
        272799632490583618214951897233958389039,
        6931466504102931468089280598062436854,
        227129099815982693311697808605804113078,
        190991213830636389607630234180646015166,
        94665077017450433967996163233943161681,
        104442287321252800048144287126459909528,
        111984121489495207128924202958762389095,
        139936482167984053056821989819471703902,
        131014629105291684826343804913844541820,
        268845842132595174381319542315698095682,
        75171104698645730147320610733935680293,
        188919654263237738565471418725236547096,
        139443032094518694251119896661150856155,
        212224791068740157240962495709925633688,
        9091349307978242295696087198261198263,
        265949610406892960806549475648778472820,
        128688494213035166265090231634914484918,
        86325517523858968239206432741700378460,
        120488629521339414087399576992543820142,
        160980827996625757844534938871461470081,
        229339366166722750521595145406513327654,
        212826567380487477304132519266599165957,
        33736938902897032991258004023704944283,
        20647404232152582890937735112905147718,
        174307488059321481411980956314482861076,
        182870809375317713676269812154114833178,
        255449134442859232032589560643987424832,
        3327587593608969403510790552521641937,
        228796895331761997368557137952015337570,
        173401717654658566678803501845418681717,
        145753538631582908337891904360242873450,
        145305369872021551533678361294921112893,
        152106492142581925633393348104773498495,
        63943612201891140132934132705217376031,
        214770829884066489984049547332748555844,
        126888149938969670311744256029745393100,
        324274218652420208639262215234859114368,
        133387804507532082482457195979509083188,
        264611146042400724818108845708964759574,
        253255137134331345360724671359646005906,
        166782268041576968080783983279630939216,
        37671118578186383302992609922437945540,
        26587946399585902795651262209794549829,
        1961015457335467326068331039447629730,
        4254806961814882220301747290823991194,
        308104308089334295256101677566106196014,
        37063999245103616540268353759942155944,
        121645946377364452585933094191285853163,
        161048285595292245350352672889475762153,
        149401701940324201485709324373178479430,
        49563740728014241891163608884934352144,
        52076044639587971806885048829369115370,
        179799047418413373396876208996285334917,
        313125910898948945211513308922346368079,
        263141004886510288130833149448493186616,
        24880666764035537120498111814784594276,
        244033168847918516781799517763099473870,
        237024090893956911018900071669857460871,
        144414853971541131493745017938110197424,
        138555684748153658828846086010749058888,
        211251904477912335560628591102117418737,
        82686339646308109441011550627009851182,
        115235954114539334218234743722763506129,
        115662543830337771968916670738292603123,
        221798345799192609353172159941201325673,
        6926774184072691057114868533879021792,
        5694889605277154023565158457936814846,
        313407497526835022984279381655402121329,
        110670343731416261564284105580725764775,
        231058153426857522432841605590609590553,
        211750572375839290698246689628795663485,
        241108737427680497688687042042742173388,
        109006874758568559475981409144284413404,
        54824947249519626083205617311781774730,
        243812916385798476195815914646717328982,
        138479748283393420051566081257076792575,
        181274593275688533385558121792921793358,
        120393940466427010549728873724179690685,
        27826038560624417555889885327531192218,
        315151785115462667257568009126915207145,
        130459266571058569382810067795220051273,
        132842523353905011189860168419707993331,
        59839863451282141688258798089471137845,
        20254473285766703925238914314828709637,
        128906284012149069933631760594047723246,
        52776809595619548343910694136652844370,
        174775382933029702659507092255717449558,
        263563310660352369819909167550510614639,
        196887944917458596878213424376328530831,
        181949958696615205021162150854739810576,
        139587060331950664917632305614956378137,
        338671275421650534963128961469857868852,
        155317607710825692904522109098461079872,
        244383870580703563645529793873451040421,
        4620483933550170477662418031630030901,
        129259224877724566609550551236545851018,
        193614492146938639585558624443519370309,
        89779080348704136635266056121056944156,
        131421374722716737991381318356729527893,
        5569905341158623602093984174547390696,
        131737060014189489073973545545612076996,
        186040344300393193173042839506082731336,
        293702550686490761096590982318687603092,
        255144148912433128858199336137670011412,
        279002492317304198700457976299295509707,
        57694275257783106017263757336776385941,
        228836987706021643623265168420253214681,
        42557917887325748267185972516161571835,
        255035143664299721501904330274347798678,
        162907946353635788513496820825582915919,
        58334702634968558506315001057646102921,
        299036125955333458292972890398077938255,
        214012726690216787376002795018524874570,
        339737723127425306868240826833242497172,
        148116693839884547082122917245082917348,
        118638609480959777931391956115228170455,
        70049388967103419081381816976354288000,
        321350324499718496431405059597835822590,
        114415642043268251851454480482755199360,
        1771507360800623444536881174620182640,
        68433725610798147462546774857024436801,
        183610678235804501703289364934986757412,
        260430944951921695403626817609447293819,
        336070431382170503117465878424687028555,
        8747516752576054583546419627561305026,
        25414433237838806716771118185960391007,
        27991088366098801247640145266267327201,
        134667778910758562775756385670814047243,
        265958469220066170468363330412494359510,
        138087385530530368232910013015333369277,
        223273960303740663939427143568329872912,
        226698647960847710245351874868329380956,
        279836402123216043196375970208514359256,
        230777420763799932386567780376931338865,
        334328668889044032120908092187833298741,
        186110377133843222524976103853713897304,
        226068929200034794184067359833216591518,
        307395742308631238533223609823979676171,
        270244849749936426372205429996168472371,
        146201415018946415671005458144085772825,
        300969570425449657166669989808819437053,
        251687458323136382835572752983811895475,
        270641028168126422955317776514936397717,
        31589530127920356246091130515057059912,
        96924903584643007146889582889689426292,
        142058468804648550003297997471382771447,
        314944764230038250337076326399340323492,
        325215830334179713564866109827218937852,
        257976636578206567133918811533061479139,
        302232878420023792860098643459870305395,
        83780703798992577006307497913800507870,
        193667087313367062853574512735191895236,
        83375452479451163654548752761333189610,
        240926892296838555168958237021169924370,
        153840378120810127829468048413787133280,
        38455886484474574011136589447140227210,
        201966933799926032743496530591844175331,
        238405084128553623279464089421679182417,
        79134533565052825159182943905651010052,
        264145050755083038029594179837472432365,
        91204757487212663074517391084708491680,
        209338328671053373501952225237078699913,
        85645078991084883688692433042680752461,
        95967147795241281028765727991582305765,
        228533749106777146421074580579914184491,
        202609898816392978177542853982359433234,
        307079969400346886854396012420455752886,
        187115219247772061078815641076583952926,
        230542258694458959424309629843952593443,
        74332352609913642726938042964026415187,
        91950340584438980832357416887833680089,
        253250286149221379972855075116839085475,
        239545960080661793860192052157224049713,
        49281749599220939578996569501739186730,
        131462906977393070031818453242459278831,
        10352029838493135617831431143066364453,
        73408192521407472644231035045711596171,
        238814024694400682014086109861209537814,
        66091987442644246193015750957086469186,
        3571372971639372633906021729177171072,
        257612594443266212716830202977027399515,
        59108130182326579149785149831221554060,
        263222220647700078307598770683042988272,
        296049924529240964856164005857428701404,
        170505451907555693102729907642458469224,
        252632951948103577467595278565842113750,
        177005895812640429855381235800107879505,
        138812781368593448188989240528490030533,
        149292869496287283142283272196583892041,
        84966947109149623834597473467125816457,
        288887586898068294394453812468451513930,
        240040038405508477905283529586773402148,
        102121494120219547386089770231897656625,
        330714536345281145534225729404377743996,
        243995924349346577739099524261021947889,
        149529993043722712074310726931836143035,
        192765893363431805682795584905544406601,
        183623040969929642749671509006927222577,
        1525573958767026733011437846643064721,
        117166243094341434382415149775517138592,
        108317570567260381957444348850119405270,
        265379866248840244626059950683337371207,
        101439885818932106981238519576732452668,
        305382987333931579010722377513357707194,
        84791721843245170977779990586106702161,
        128052673033601092863556807497569482457,
        323970116080423360183549353020887602436,
        253178912470512253870284195517502478752,
        327567745154006156499920950325920180337,
        37760851567799716139384884658885468439,
        197908320985583295127982407294586864884,
        266878838735372680888432013040757164334,
        291997814267333372848639447156161385057,
        32902465489644465428263202477386654904,
        217514975031485349366770843144750039143,
        25358794551349852181185633204236665904,
        144493068001809023664174224940279293807,
        68737418717551687825594089813310379675,
        125563467002138064186914113073399634900,
        301626209029641111181838107746121876227,
        158714849747972444160427417222466396443,
        261960090756636115163930939299212093837,
        140473205448781477891558791776962906661,
        25764354349558874643452816729640822044,
        35500985603009141874391332252797386051,
        6130328008084854946605320998530612759,
        65911070872777301652371695333277770339,
        143516661043274387337708968079545747547,
        124005107572155327766102681813910351928,
        196183448116618734064409945819933602671,
        321626010754814019303036264377672436622,
        319639293174762780809428341890530809802,
        154177077952058557430129994690663194407,
        165708535551522843240540301769761990097,
        96966528245352734724517475056797912060,
        156766160185796521254105805157044602779,
        271108427613111056655306024994207714846,
        225021475359652760326916597886440027593,
        322508676403834215230209072184479897499,
        233442986658152879187128957949166861242,
        6632834701150293496290041701739530981,
        72945848993703027206006761488573354637,
        220461161602619345766199740580194213620,
        321159411836169763341556412084804452724,
        24281678107281275484453505329916095811,
        310715275211136077011602269956503178835,
        122870329840458638343326342813018512849,
        13571213452018854499205866398304767123,
        148475575601522570889887470308323059757,
        14097843040597683413022399766129370370,
        102718660192813748149092193456897093775,
        180595841654842928922244486633136512132,
        248799457970517318601937546177129628787,
        40071711920819430360439175851771764513,
        286098925161670631272152784250670063950,
        275112462745497950888328731927654249280,
        290068609383266100194140781747032289394,
        311800436580168149493310310018323904341,
        121930434417233109389609434228680930394,
        281574554972024339666376866877676101235,
        123913120007588541889307903573623882055,
        312449833180571905372504215436640736182,
        22188561845116767730666605340693357532,
        164193566270753732025115010005180770782,
        251779278959456111385598086548036893553,
        280800426346172004653189471251054540010,
        8137305751057639085595495387508082547,
        299828193200954978090780694201908041132,
        187449300058176320897627622976389774343,
        165045999537015536826432678512103155089,
        185272648877873407238079404862543415740,
        236629802363933727652259521466782431141,
        56421288793209262409776732605900025515,
        255594772545778155554374275992038804001,
        250205017877782987180750545031246560121,
        226453750341230180774270564668437562013,
        260605398977675584579104599069120938332,
        125392505686394559417474564859844391928,
        338126281238683346773071987037005616355,
        9328199974415020283249005756268859616,
        123888392668312447000706355778647022661,
        194534313234333519574696076358020947605,
        24710236171156162216791551051268125885,
        43889898743651888600383188627001828128,
        315171527686540475787642890314118427925,
        218934644233940047126532282627557470797,
        187267494209116719977177242359658047810,
        215155205553097774614912396356049386399,
        262216576587441792961966274101255468822,
        36947220824673522414895973516164900275,
        91352968010301160956189613987386961455,
        1526661060248372386435309853408760488,
        186934124806556109144387341641340698260,
        102993952313774016120695692337485795570,
        40191516347711559912799933205739453067,
        41933311847854580194072896089635772105,
        21074769366332168591578346387005281737,
        170015113800577287589263816807892593237,
        47954622667409004582475167820858545355,
        325128049242869022730457807944576025513,
        52035175976200952538030566941816563422,
        174773736600302959346529091536828305513,
        19077212147149455341049980696100735695,
        63561467101782995257570039359218316519,
        134093540376544292764942557421750495624,
        320470991095881762342995518775846760139,
        328062414867529105865935704950197203935,
        68301821704292774520291453416491555782,
        35698180309399041547275994328087686952,
        311506793047480286698363570197389233292,
        338338483704047092847801535610928800050,
        143089363725240677791339433167163006443,
        113117065754723735857236371396621769453,
        125723372422605648473689790078935043613,
        238585366233633898944999090543726164960,
        293729916644654494936525370213054939790,
        39203111410532752545664786484193257819,
        261074744186283445977447754562284066682,
        228456114877028492222942892368951348630,
        100705936697510034149383339598887754784,
        157862771086018727343101233574818765588,
        241756853913614730875530607089370627311,
        207262214398201745430201875248761757390,
        156924485159565599272342952589118003045,
        320217455551763982424562198204550851761,
        89452067989312678490323653528680249042,
        180468611890948688055144842101229574751,
        29479279040695614991884843023002065654,
        167390388006269209103321642837626866291,
        254695777026440907432827254516985460666,
        187177115285826221625518187624347223498,
        332045191917050698504536824830205536486,
        184274114083220384310326268792313645244,
        222188697420284057483248561705709517959,
        140578027748998958737945635934128791218,
        183426950464464315290429788391842367231,
        111580503306619631358723576137159769662,
        335643580354127791599598488673755616408,
        260550164151322930524025480381622714601,
        47806658196182748622039001992492472621,
        20186803003182304816930824185716380089,
        62789484860111330656212111726584018842,
        107790431342605135216397076296068254585,
        292666443780633938401389104296644058920,
        220927652750266244331716492446792155310,
        208207206962244036457286379395453915098,
        195778068808291695326824062103410574608,
        340199904400557338450121909774247743622,
        262203568635302105035059948551841157952,
        128618692521700291137948818227813602478,
        243320224668649517668896658074761744878,
        211839684670054287498093905237816611368,
        82166970181933501266675073625897185085,
        75527854628078629016159252745417719369,
        121625610575743604085725221967197075838,
        277566753294527800171039609953342932992,
        187885813802059778562365677650116634903,
        191403315444987604731401217615078871220,
        80771018852102354583745334438004508008,
        8090637672941034548940752857122628479,
        110366221490089495255284677830009286982,
        63618169708923541949447163759926312008,
        307144232996073349511717449907861114512,
        248429007854739810382765734389293390726,
        224051169962642915134940269976875457421,
        45714491655938342434923362988014407300,
        190857047529084524562287563005430811593,
        283638693262798174564765314872874674283,
        38407247642906473477727792470701443077,
        288284565241831009635841261605804718097,
        116084538477280280912337928640057265511,
        295035064216000126501771210308445522416,
        103868253733672629632572148676305565401,
        79394408729164793992671408821149275830,
        123134385157755731989243417161723099235,
        188881727447990422839981908635445577559,
        193868004887328193349426609920850166554,
        125238851893067113132856477032811664176,
        97369616960898104773918789755365303504,
        218094202641917307686764857364552190126,
        187918447907273256957535142762141476048,
        26744800024999667902593869796079915,
        202457515425581276393652252803803258913,
        10502186513105902379021182003235975705,
        306414978640606260132231755414309026498,
        39384078943492160303809693785691690098,
        102182047653449651977246724958534740056,
        70597095573607902789979276144010337930,
        64001332434250742288670266923105022001,
        70011737959055169032971544227970567663,
        319349255074886856584599293341032912060,
        149075373674604848941455636935004195811,
        256105825798040314551146856384833212238,
        196047512591257221793189534487653610348,
        14586100463770328028792698254552639562,
        20264627864068714219101178892284543310,
        296236384632716297475274574664397705576,
        17817075365980510597165642780066647726,
        60095503887948394084172605096256990139,
        219614996212180887705533341339975621402,
        278759465578491474931999047518601395137,
        273986483832797023146147542014511808346,
        288302115222814056176277861962995498752,
        260317948964171328735169833240356961350,
        57527101794221862418486478881556018579,
        312574992008304887866535433558095267138,
        264873690423767834690720810460474769057,
        141410049559959758539756333755434880046,
        55445373322090056204258811732721921319,
        264752094417217241150260989642163343840,
        210482006155453806494692010139247919004,
        308114253102078761931037333124652558573,
        208454081233086025185950166069270689769,
        27634749417831287570256666832657292229,
        87663153995377643264086488074712097711,
        162702898363795052239907855129805116369,
        8730207649155596367329256285843665966,
        183542228004854796910561714717190216163,
        97408678713210875971668486882923173437,
        88487627920109498466455357792626221135,
        106598589823900890714508022862184984179,
        328767280304183303668354318669805555569,
        28229702100636414159506739455728947244,
        245986906066714145373440235943207350967,
        65659226250518690026725234094260789476,
        146232767761021233502917908577719090591,
        46393977670067832672575994838481101713,
        105750567811286582153708697610889683076,
        51323137905191351083291908125276310470,
        295749807725626247971905931509330662394,
        214131379585880913039114908540270856163,
        215893444130137504253045249794739488207,
        301471673729806061374498803901723786058,
        229057718158170479549273668919519075752,
        138080778461226751313261585062135878201,
        141026359934210462356233256181613757034,
        68933837692685322317706218817210809476,
        25393406359558256430225320707719342819,
        275356532140429148441012678305732049494,
        53956275977923019137388743871615957759,
        163061957672615896574859873254114456866,
        272399972844833674586376883926838721925,
        85673668450825091245306967783783822160,
        24828506698899796694273636324332494745,
        309508192186894448859185621412520682191,
        282670190454130410452927134823404796104,
        67342611178596508938122051708689330984,
        62176716943068424547544218228433941423,
        188584503027719286274573937553652461422,
        268263438126094948857293758640533903305,
        214325647874741346829538781176702742742,
        37360184964600511060756595110969992036,
        108625034075624820947408016345188036286,
        65525164047779797052391340365153626199,
        94871307247042586715068198789316439507,
        94780138674303327085126689432194366608,
        194572446345783945529943353062637156364,
        253700939822265131591620516306016345671,
        117732382580966670103929531631634746601,
        199304445053249453569933947603592550419,
        177463547005652117653650259961789847937,
        303619750568901187676335298651373431399,
        172929310331248581342800058159323312451,
        181294802785284653810839530993375923313,
        283590565789356541498093717820841532276,
        257056520852802158030615007915971536986,
        234745968812608244106232238249574055915,
        31929172996341263720673865366105258765,
        318142021164067218741683279724887696160,
        193217284183218800872453414477910642532,
        38015259050277092864377624271795294891,
        80952665656346897324426890198445307085,
        11680346385960638763848089196633275298,
        9513088880086236426231810951583830880,
        205103283984377178181195116465041832729,
        226509686283217197945442878084969145736,
        50924452316343130246682489878599503228,
        242962718177031429342675033754379775187,
        2803714896324820509453569171158616640,
        194392809421372535213057759184984077758,
        242879370917311287658016505785983131511,
        143679272127425713848911322228852709049,
        121575049863118828740048589625100857957,
        8715635290235044735142199835438054170,
        117597421515019045174966032141113687217,
        166032223549541867891948250634350487251,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_512_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("a70c5dc4851c46df26580a4d719f454113421b5b078b1af7b8f6435f8d61b304");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_3_random() {
    let mut value = Vector::<u8, 3>::try_from(Vec::<u8>::from_iter([46, 17, 42])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_3_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("2e112a0000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_4_zero() {
    let mut value = Vector::<u8, 4>::try_from(Vec::<u8>::from_iter([0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_4_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_2_random() {
    let mut value = Vector::<U256, 2>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            205, 105, 106, 166, 152, 194, 84, 202, 219, 225, 56, 160, 68, 10, 149, 101, 132, 138,
            122, 138, 194, 11, 156, 151, 229, 118, 123, 132, 155, 190, 223, 147,
        ]),
        U256::from_bytes_le([
            7, 186, 191, 192, 7, 230, 151, 207, 220, 105, 184, 31, 117, 110, 158, 244, 167, 86,
            173, 232, 133, 233, 107, 240, 221, 64, 139, 35, 8, 9, 65, 144,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_2_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("e765c4ca305f07d9e25e1c4c879528e9994b9fb5e4230bfda8c4b7805b1905c7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_31_random() {
    let mut value = Vector::<u8, 31>::try_from(Vec::<u8>::from_iter([
        170, 73, 242, 193, 85, 27, 39, 254, 83, 38, 110, 73, 13, 177, 56, 72, 156, 232, 20, 213,
        141, 20, 90, 139, 79, 153, 79, 237, 21, 197, 178,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_31_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("aa49f2c1551b27fe53266e490db138489ce814d58d145a8b4f994fed15c5b200");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_8_max() {
    let mut value = Vector::<U256, 8>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_8_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("be1b7015ed50d7490a51f1b11dff804a4440775cc808b9cfd26157805c1f8e86");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_16_random() {
    let mut value = Vector::<u16, 16>::try_from(Vec::<u16>::from_iter([
        14966, 37668, 46928, 65487, 22250, 24796, 7043, 49742, 46495, 44245, 5372, 46169, 36046,
        60670, 29615, 59474,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_16_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("763a249350b7cfffea56dc60831b4ec29fb5d5acfc1459b4ce8cfeecaf7352e8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_1_zero() {
    let mut value = Vector::<u32, 1>::try_from(Vec::<u32>::from_iter([0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_1_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_8_random() {
    let mut value = Vector::<u128, 8>::try_from(Vec::<u128>::from_iter([
        50419731819167183509591636238702702250,
        243160052554941226771061620517961416402,
        132077915854571525015052582449039997777,
        61460288984888672921797294507799676928,
        33856030730033169859812168683582159294,
        252573635149269036055565766513369444631,
        279794156752397104374168485305690172734,
        134813396102573383821633959344133057265,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_8_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("5b77a9c4d86ba3e9079f98093f5e6da648e81f10f89f46c1fcab2a4c779c0363");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_4_zero() {
    let mut value = Vector::<u64, 4>::try_from(Vec::<u64>::from_iter([0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_4_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_31_max() {
    let mut value = Vector::<u8, 31>::try_from(Vec::<u8>::from_iter([
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_31_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_4_random() {
    let mut value = Vector::<u128, 4>::try_from(Vec::<u128>::from_iter([
        131085251763681703650210983225134279210,
        204149994827974013891189432256283029251,
        138314451233364434501509339736780133583,
        87190916912719743438450099653641299249,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_4_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("e7b9070421c5a3414fa58f06ad8bdf6f4a8e8464fe1dc5b1214aab2db1662e06");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_5_zero() {
    let mut value =
        Vector::<bool, 5>::try_from(Vec::<bool>::from_iter([false, false, false, false, false]))
            .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_5_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_512_zero() {
    let mut value = Vector::<u16, 512>::try_from(Vec::<u16>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_512_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_31_zero() {
    let mut value = Vector::<u8, 31>::try_from(Vec::<u8>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_31_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_8_zero() {
    let mut value =
        Vector::<u8, 8>::try_from(Vec::<u8>::from_iter([0, 0, 0, 0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_8_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_1_zero() {
    let mut value = Vector::<u16, 1>::try_from(Vec::<u16>::from_iter([0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_1_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_513_zero() {
    let mut value = Vector::<U256, 513>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_513_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_3_max() {
    let mut value =
        Vector::<u16, 3>::try_from(Vec::<u16>::from_iter([65535, 65535, 65535])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_3_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffff0000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_512_zero() {
    let mut value = Vector::<bool, 512>::try_from(Vec::<bool>::from_iter([
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_512_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_512_zero() {
    let mut value = Vector::<u128, 512>::try_from(Vec::<u128>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_512_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_8_max() {
    let mut value = Vector::<u64, 8>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_8_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("8667e718294e9e0df1d30600ba3eeb201f764aad2dad72748643e4a285e1d1f7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_2_max() {
    let mut value =
        Vector::<u32, 2>::try_from(Vec::<u32>::from_iter([4294967295, 4294967295])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_2_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffff000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_4_random() {
    let mut value =
        Vector::<u16, 4>::try_from(Vec::<u16>::from_iter([15417, 28067, 51352, 59311])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_4_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("393ca36d98c8afe7000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_2_random() {
    let mut value =
        Vector::<u32, 2>::try_from(Vec::<u32>::from_iter([2286406229, 3289673013])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_2_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("55ca4788356d14c4000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_513_random() {
    let mut value = Vector::<u16, 513>::try_from(Vec::<u16>::from_iter([
        27185, 40496, 45588, 22785, 5755, 5950, 14234, 16151, 23366, 48189, 28838, 47431, 22937,
        44687, 9960, 18008, 43796, 16472, 40344, 6307, 60750, 42176, 48076, 3047, 34291, 53364,
        5934, 35808, 39627, 16700, 61818, 17790, 2074, 12801, 14876, 34651, 31986, 54424, 35627,
        13246, 27491, 2754, 17156, 3650, 56913, 28167, 40485, 5286, 26716, 54344, 20105, 10227,
        12201, 17682, 4930, 50210, 52882, 56220, 56083, 32674, 54172, 58006, 17356, 19067, 27616,
        33887, 37780, 12415, 3852, 5482, 6320, 20044, 51795, 34591, 8396, 35071, 39025, 33720,
        27350, 1214, 12489, 28905, 10545, 7894, 58460, 50487, 7556, 5510, 43456, 9897, 21919,
        43418, 15610, 51627, 22828, 26017, 41734, 27862, 2329, 13688, 53343, 26009, 43570, 5267,
        1550, 22485, 16557, 64823, 64098, 49563, 7109, 31682, 48433, 47419, 33456, 15614, 58115,
        37566, 11748, 56178, 31947, 55839, 23907, 39863, 45318, 62202, 53558, 32368, 15687, 53444,
        47210, 42931, 37640, 53500, 9048, 51678, 37398, 5322, 43230, 21833, 36405, 35061, 29262,
        9277, 12384, 59158, 31163, 4746, 57569, 1723, 58523, 6263, 14535, 59878, 52424, 31661,
        6214, 23799, 19965, 64506, 13195, 39399, 34387, 23723, 49447, 46439, 36212, 62454, 58077,
        49181, 17517, 57269, 57490, 9498, 980, 61407, 4360, 41477, 20314, 15300, 22147, 40103,
        54993, 61031, 41339, 32587, 12514, 54805, 51111, 33512, 41665, 59236, 7998, 31477, 45546,
        63362, 6925, 42377, 20507, 6202, 19455, 16556, 23535, 29143, 7737, 51549, 58357, 61793,
        58806, 2026, 13961, 6066, 19732, 46806, 23699, 19514, 8377, 64814, 47852, 56334, 22031,
        14309, 55332, 28372, 13423, 28189, 4416, 40742, 55008, 22937, 40917, 47057, 23312, 6084,
        50385, 33592, 27753, 25055, 47606, 50144, 49001, 16740, 34502, 8301, 21864, 29823, 42703,
        59858, 3591, 46786, 31144, 58289, 45473, 25231, 34072, 62297, 23287, 54205, 24656, 17481,
        60407, 16069, 41459, 23673, 47102, 10189, 53774, 2466, 24103, 40128, 6503, 59475, 54342,
        26961, 8919, 26201, 5446, 55610, 19872, 1418, 57935, 65235, 63090, 12315, 8968, 51805,
        42662, 59153, 39158, 46192, 65217, 3304, 62992, 4936, 10694, 47294, 14922, 10373, 49555,
        52677, 56876, 43038, 47088, 52506, 53601, 60897, 49707, 21052, 58120, 11098, 12866, 15398,
        5442, 37598, 25597, 44803, 23359, 62624, 38117, 36739, 21148, 48895, 32395, 10357, 64402,
        12077, 39546, 20435, 32185, 50268, 37625, 11605, 37027, 44710, 32293, 64708, 49747, 7621,
        29736, 4507, 14697, 20130, 17173, 14817, 60481, 49719, 44836, 13313, 36862, 33794, 46741,
        36669, 41584, 44211, 35232, 59687, 51526, 37997, 54193, 17520, 56053, 39102, 61771, 49769,
        18370, 61989, 25683, 56035, 26878, 27505, 41063, 1141, 3229, 47503, 61963, 34624, 36914,
        48463, 60248, 64422, 32255, 14207, 22118, 30112, 61730, 19016, 17969, 4022, 52923, 36107,
        56603, 36238, 12010, 36707, 29754, 12654, 3873, 25427, 28554, 12347, 17269, 55449, 54337,
        28007, 48659, 45648, 53594, 58826, 6468, 56179, 221, 22362, 45908, 38017, 4298, 3453,
        41039, 12557, 21685, 2289, 6762, 58315, 33753, 44846, 9774, 57922, 10115, 35370, 16928,
        21313, 20458, 54321, 14421, 9423, 19692, 35952, 11796, 6252, 65089, 61471, 59269, 17700,
        44039, 8858, 662, 39168, 17303, 52820, 49010, 39886, 56264, 32618, 9688, 32617, 9689, 2814,
        21516, 30617, 30594, 33147, 12190, 19780, 26425, 63835, 38413, 25273, 12600, 8022, 42766,
        50061, 5733, 18650, 47269, 8553, 36611, 21506, 39512, 58347, 47847, 61805, 44970, 33468,
        48499, 64833, 45876, 3604, 39105, 13538, 26802, 61195, 24696, 61996, 16997, 11456, 46813,
        32837, 7224, 39459, 24848, 46856, 25573, 5246, 64735, 17847, 51773, 60812, 37973, 30569,
        64742, 51362, 63841, 3543, 52659,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_513_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("188c519f6d8f57d2cc1232b7ad085ed707cec9537fb3912ffa095423dc614dea");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_8_random() {
    let mut value = Vector::<u16, 8>::try_from(Vec::<u16>::from_iter([
        48757, 12920, 33149, 59406, 48754, 39786, 12312, 58318,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_8_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("75be78327d810ee872be6a9b1830cee300000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_16_zero() {
    let mut value = Vector::<u8, 16>::try_from(Vec::<u8>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_16_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_3_zero() {
    let mut value = Vector::<u8, 3>::try_from(Vec::<u8>::from_iter([0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_3_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_3_max() {
    let mut value =
        Vector::<u32, 3>::try_from(Vec::<u32>::from_iter([4294967295, 4294967295, 4294967295]))
            .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_3_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffff0000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_1_zero() {
    let mut value = Vector::<u128, 1>::try_from(Vec::<u128>::from_iter([0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_1_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_2_max() {
    let mut value = Vector::<u16, 2>::try_from(Vec::<u16>::from_iter([65535, 65535])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_2_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffff00000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_1_max() {
    let mut value = Vector::<u32, 1>::try_from(Vec::<u32>::from_iter([4294967295])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_1_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffff00000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_513_zero() {
    let mut value = Vector::<u32, 513>::try_from(Vec::<u32>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_513_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("87eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_1_zero() {
    let mut value = Vector::<U256, 1>::try_from(Vec::<U256>::from_iter([U256::from_bytes_le([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
    ])]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_1_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_16_random() {
    let mut value = Vector::<u128, 16>::try_from(Vec::<u128>::from_iter([
        116865446011030976513736559583719158568,
        108209157078503776199170871747996541938,
        87702234582352091614673494037436374999,
        221828058742841668693726214230899376370,
        279540889116606239598116694762153141470,
        187631146300711777716677008331378506013,
        121512487529790280944859056892923591317,
        339016522251302040963550589746380144376,
        185461572441833072109297853349623060391,
        300649262967034080487309929999441874990,
        294925353640914561010535622080866823202,
        2315156355476259093055440479649376987,
        142046101570705160243789098805171808953,
        280271393250584818608153587082340849287,
        18181767184539268539905647783521070538,
        290973072975603641839643580523364338186,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_16_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("817667c88413a5134f4f42a1d0eb8e128cb658f3b2c3956360d32ca62f287f3f");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_2_zero() {
    let mut value = Vector::<bool, 2>::try_from(Vec::<bool>::from_iter([false, false])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_2_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_8_max() {
    let mut value = Vector::<u128, 8>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_8_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("375d6c7b280a1e30f968db1d948da0f977bf9139b0d5516761ac874700208aba");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_3_zero() {
    let mut value = Vector::<u64, 3>::try_from(Vec::<u64>::from_iter([0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_3_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_3_random() {
    let mut value = Vector::<u64, 3>::try_from(Vec::<u64>::from_iter([
        6167802979638570618,
        1670982671822494120,
        2649190588485934153,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_3_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("7aeef3ad21709855a819d003e3853017491c03e1cdd0c3240000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_1_max() {
    let mut value = Vector::<u16, 1>::try_from(Vec::<u16>::from_iter([65535])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_1_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffff000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_8_max() {
    let mut value = Vector::<bool, 8>::try_from(Vec::<bool>::from_iter([
        true, true, true, true, true, true, true, true,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_8_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0101010101010101000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_5_max() {
    let mut value =
        Vector::<u16, 5>::try_from(Vec::<u16>::from_iter([65535, 65535, 65535, 65535, 65535]))
            .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_5_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffff00000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_16_max() {
    let mut value = Vector::<u32, 16>::try_from(Vec::<u32>::from_iter([
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_16_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("8667e718294e9e0df1d30600ba3eeb201f764aad2dad72748643e4a285e1d1f7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_4_max() {
    let mut value = Vector::<u32, 4>::try_from(Vec::<u32>::from_iter([
        4294967295, 4294967295, 4294967295, 4294967295,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_4_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffff00000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_2_zero() {
    let mut value = Vector::<u64, 2>::try_from(Vec::<u64>::from_iter([0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_2_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_512_random() {
    let mut value = Vector::<u8, 512>::try_from(Vec::<u8>::from_iter([
        253, 174, 239, 243, 23, 241, 87, 225, 224, 151, 140, 63, 95, 213, 223, 61, 52, 248, 192,
        130, 98, 176, 55, 80, 137, 79, 165, 228, 36, 40, 202, 109, 24, 146, 19, 112, 44, 162, 156,
        235, 33, 131, 37, 218, 103, 51, 203, 99, 235, 120, 184, 105, 215, 89, 104, 154, 30, 180,
        78, 255, 241, 170, 71, 67, 24, 84, 74, 35, 166, 87, 0, 31, 44, 75, 111, 20, 221, 200, 166,
        106, 195, 143, 155, 216, 163, 77, 47, 133, 142, 210, 204, 141, 58, 192, 140, 109, 152, 203,
        26, 178, 225, 119, 251, 84, 194, 157, 1, 37, 245, 202, 152, 219, 245, 95, 205, 244, 80,
        144, 189, 177, 105, 86, 234, 242, 14, 239, 53, 13, 187, 243, 33, 71, 169, 178, 148, 152,
        169, 150, 99, 142, 37, 104, 173, 171, 164, 234, 136, 43, 61, 125, 131, 190, 70, 14, 202,
        19, 22, 106, 79, 160, 181, 222, 35, 156, 133, 248, 112, 178, 42, 9, 169, 117, 83, 244, 255,
        71, 34, 74, 124, 84, 201, 167, 66, 228, 20, 190, 35, 188, 209, 22, 36, 160, 116, 101, 177,
        194, 252, 26, 15, 229, 41, 150, 218, 174, 75, 248, 123, 15, 182, 190, 212, 89, 38, 9, 108,
        100, 72, 67, 130, 25, 239, 185, 190, 147, 203, 208, 188, 119, 146, 4, 160, 136, 61, 18,
        111, 189, 94, 164, 149, 185, 139, 90, 233, 86, 1, 209, 122, 98, 227, 139, 89, 181, 209,
        248, 246, 245, 227, 190, 52, 205, 65, 54, 240, 249, 49, 67, 131, 122, 36, 171, 200, 150,
        181, 207, 96, 242, 238, 163, 226, 55, 237, 43, 38, 101, 90, 171, 88, 193, 139, 102, 135,
        15, 80, 161, 51, 23, 28, 133, 217, 165, 174, 157, 222, 85, 192, 202, 4, 148, 145, 162, 127,
        79, 99, 231, 227, 213, 172, 137, 222, 200, 132, 252, 161, 126, 146, 80, 83, 210, 80, 17,
        119, 181, 105, 220, 227, 12, 207, 35, 32, 36, 125, 195, 248, 194, 121, 154, 167, 231, 32,
        155, 13, 92, 73, 75, 192, 219, 90, 70, 154, 48, 250, 171, 68, 136, 220, 241, 142, 161, 85,
        33, 224, 117, 226, 127, 34, 136, 79, 140, 74, 201, 111, 102, 74, 108, 175, 211, 0, 177, 97,
        114, 8, 9, 185, 225, 121, 5, 212, 216, 254, 215, 169, 127, 248, 156, 240, 8, 10, 149, 63,
        231, 125, 202, 214, 107, 21, 220, 200, 57, 211, 91, 89, 37, 188, 87, 117, 32, 194, 16, 65,
        137, 14, 176, 30, 140, 9, 23, 210, 246, 15, 147, 93, 118, 250, 31, 150, 124, 228, 234, 89,
        134, 82, 213, 159, 4, 149, 166, 105, 94, 16, 157, 255, 9, 217, 83, 222, 173, 146, 48, 40,
        214, 171, 19, 209, 226, 93, 207, 54, 169, 97, 51, 202, 45, 162, 64, 37, 169, 246, 134, 39,
        32, 230, 5, 180, 18, 110, 55, 228, 91, 21, 136, 204, 158, 16, 172, 175, 108, 44, 124, 50,
        153, 8, 34,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_512_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f4eb96b6673f096fe9ac07abad28b1ae70eeaf6704326b183ed57a02e22933e4");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_31_random() {
    let mut value = Vector::<u32, 31>::try_from(Vec::<u32>::from_iter([
        508235682, 2308341395, 1525766118, 4136650562, 3621852454, 1567937308, 3269584467,
        1320546218, 2077416840, 739946730, 1282600407, 3203298029, 942979653, 497143087, 933745505,
        3794525861, 2714083317, 1289423485, 3524519556, 3497991789, 3711737680, 3061871525,
        2306867877, 4238440987, 945702953, 3720141995, 3191674143, 2674649049, 543916394,
        2875606851, 3068061043,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_31_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("efa45b70c8a45a482800655c239ed2e8d91d1325666fd1755da23b6fea1405ee");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_3_zero() {
    let mut value =
        Vector::<bool, 3>::try_from(Vec::<bool>::from_iter([false, false, false])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_3_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_512_random() {
    let mut value = Vector::<u64, 512>::try_from(Vec::<u64>::from_iter([
        17241722399186003656,
        4508348299491693172,
        6390266777275510888,
        7713446915618301827,
        3550195828120217512,
        5302692434353415902,
        15673077652530784987,
        14832124852888348945,
        1753911173413660973,
        1075815492117229518,
        11241194954592044759,
        1281488023918797583,
        599453714058194419,
        3735940553373052238,
        9886605999730343926,
        13894876080851666743,
        13766153765073927061,
        13296635374888364831,
        6339360142116274942,
        7079501668842920010,
        1372060629282321776,
        10179341093532542329,
        1086554926191249476,
        51310827223246976,
        15101027843973281037,
        17264578345840941884,
        2895091660111282452,
        11259336413260264993,
        4468757979379698791,
        4035715919530899261,
        1025181016203009511,
        4752313924109113596,
        3100904083213969471,
        13356428012977393122,
        13337157767310759285,
        6011642549773058850,
        2679491627697271076,
        5774685149971234157,
        2664236705892336475,
        9484694635352631218,
        8438500221004822688,
        12226477678261729015,
        13972420747356812790,
        17778471074937523903,
        5538186573400162679,
        15307566472736657798,
        16874304098913023531,
        10496412146825823418,
        13345309971802243453,
        1979576016101362527,
        8341772102581541009,
        14795818846096597535,
        12063527766864817109,
        933932265033871243,
        15495519375337801800,
        11004710052413938247,
        11376911068644489062,
        11274078372000306369,
        16024899649062489895,
        12527901368166666644,
        9167851986810971607,
        7639250520330553670,
        12175943369748294703,
        11433296979460156398,
        3289776498715737894,
        1975424119365053845,
        14132559792450940331,
        14175906319092989077,
        6568938907366052985,
        2884247324734735147,
        2783865510701722067,
        11614104864990869776,
        15118413830640886550,
        7303142987856320849,
        7350383677278671339,
        17161093046890865875,
        13881597113642395285,
        17216341447778575131,
        15420211816188792653,
        5931271727769086795,
        1396380889137055954,
        7995627627154630275,
        15046964727593040364,
        4118119230448789621,
        15056492579684120378,
        149696359103794600,
        6436401256916666699,
        14485664388021798587,
        6672484247361041213,
        9369412990468149472,
        7387583474326038300,
        7717994733169550446,
        9657668808183836845,
        10881287544527265224,
        7740144991257366388,
        16603284103914164383,
        16909852972644451977,
        16190034088261681620,
        975044726690203640,
        14921330866560914651,
        14204365217829969646,
        9321249052168994969,
        2855218731091338846,
        5158761002360057888,
        16323423960645790248,
        7080249016278350233,
        8163639944976994831,
        17246584292805788030,
        14912918418824322447,
        17879238257254559006,
        1687439776959916951,
        11897214710284854188,
        5467428801567803790,
        99939598953289243,
        6254316951401486413,
        3298325683893392646,
        17416546930489226544,
        554984695726970825,
        16591273569279856590,
        3646260786662757445,
        1143846323617756527,
        14409176393006675924,
        7239332693029023530,
        17868549094480882513,
        12840141672683914763,
        4534589331587855663,
        2502683457403019267,
        10800894965932499723,
        10354517057987210350,
        9865920798843503314,
        9251910129262137493,
        17882979680984287028,
        14107283363256701260,
        11692608695634569721,
        10404876596311847319,
        15653715697997658202,
        737432608457339476,
        4069276128116235638,
        8927027426406681578,
        17926639373548099222,
        7103551943313900801,
        15649961668578718108,
        12934290109134082792,
        6863348590517809611,
        12968390131768490626,
        1813459423434256197,
        12668413937093358467,
        18164297446852058700,
        2361054352696138093,
        1931608926296492116,
        7156709574881923459,
        17414374383363939762,
        16925444688267625456,
        9817277035217745369,
        17419060459670714038,
        12548530771652298825,
        6679019902374202760,
        1456389206725541843,
        11025118668108218210,
        14381508088579879882,
        6672488383267110341,
        2069008514071114127,
        375615829666888739,
        17475793861017636857,
        9764959397083686100,
        2162908909818681181,
        686763681868282441,
        14954144079718712321,
        14023152835952446281,
        10956840285030854795,
        968529128027547872,
        16829138398656711526,
        3774482904287025835,
        11015064706022367165,
        16034423873709308150,
        6691021874340720961,
        12761653061143385413,
        6659399105571997969,
        3902872516376264569,
        1125151405377440558,
        17273330492149640622,
        5799030435078732763,
        2198324642423143817,
        6528472560914593134,
        8451870605828010870,
        2382190313510954831,
        14730209600129330038,
        2448602058301590244,
        14566501270120547011,
        8731226846157349505,
        3279979957310511818,
        354206126376205686,
        13060104378643099,
        1621375492784137385,
        16156576380725138571,
        18230451966841522836,
        4826352740080314192,
        1385642393553235938,
        7702346681028068046,
        3597340335513122046,
        6920454437688751391,
        13212641535644769927,
        13474321152608180520,
        7122465017198914852,
        2076529986563788945,
        18185243652560053090,
        7247909942712927990,
        17373481430258691575,
        578260744966406347,
        9604568488809600873,
        7632328430249421415,
        13289660263410606318,
        5099372283166947112,
        4593996339337045664,
        17329648525261830085,
        3190782261622312396,
        2317071425599680242,
        7839477342383709997,
        8830064471720011612,
        4935917348189041693,
        7522538888948218485,
        161979932831419853,
        16605791947526161933,
        6463361861324507966,
        11227535428784196574,
        10708235948126784567,
        4857188858792470471,
        3157426922187774434,
        7354764536444748080,
        3979744032003108424,
        774859249809097223,
        10372920160473634757,
        16148538034702494412,
        2746169823755237631,
        8980950585885599888,
        9709513013684378042,
        12820761045193447371,
        7028688630663578368,
        2473765168274632097,
        7273118918852980263,
        16516712058817110821,
        11553173586727302804,
        3798037895425309735,
        13992046615457199640,
        11593443416242926054,
        10297285135538651727,
        4866184542985161209,
        5953625941386431602,
        3345497314112634183,
        8692704381884788155,
        14726779239607691362,
        8840938638741323896,
        13052642178125456935,
        14281744265389672379,
        3883817754981417505,
        9068025905541002631,
        8669504042795297506,
        12449821616841197193,
        4358765626989477747,
        16185339260913121928,
        834698172944353232,
        17560780797103206462,
        7379088181189580616,
        6252577659364551190,
        10379497994576507399,
        4863537630105322954,
        3622080541464128084,
        10278693032601993774,
        646216505689449031,
        13154727716280167247,
        11022966720835280344,
        1333489268512260275,
        18416204524378066806,
        6021358009616251340,
        5630802006144228962,
        6715341222990751325,
        12774374200825138789,
        12478372084698311441,
        12535156747957729405,
        5568221094604683128,
        3832184545619069473,
        4829721335720239211,
        8675483737039685518,
        18096220140071845889,
        7758924104409419884,
        6987409562154010085,
        3982701214569520462,
        15988008153987428106,
        17587242640044375138,
        16997122468007091171,
        6026215816746994292,
        626302505356232489,
        10720773851086879225,
        8305236194016240889,
        3932713913640377117,
        15625103590455174694,
        4580669710577487901,
        6866237510051473022,
        12212213730682288456,
        5062868727576835576,
        170359117255568983,
        7865884378855248982,
        10534773481478953675,
        7155487624278265633,
        14322180520475197393,
        10152560118405481876,
        12859010522967556226,
        11580159338152390386,
        10120064097538469230,
        10252023360644551151,
        10535138147795043367,
        930800106376199373,
        1834152388430370434,
        15494849906342347764,
        11048427263420736996,
        17123619240272148459,
        2435176304313737242,
        2712294746328953176,
        620886735287380312,
        16165773538072642751,
        2566257083841881550,
        16966310957240506672,
        5269284092913405441,
        13850945224454864398,
        11756810020960481125,
        16633183927649591555,
        17904509870569615842,
        17841513380636906897,
        11158352805905199905,
        11623989538410805355,
        17099577066103607969,
        1772399243014015990,
        10998257534549811529,
        2143822019277250880,
        7922903718853209313,
        6314476190438146449,
        4761921651499062130,
        15890283794832641365,
        15139824976495038536,
        16607998068638793448,
        8341363592175266184,
        14808349981901859745,
        11158007797666491729,
        17408069133989053727,
        5837648777950419528,
        14576625808490734979,
        15216293341699376739,
        13756024116819966193,
        5028816035998365766,
        6492677005645834691,
        3951252210874442859,
        119058755059473364,
        13744925311900968661,
        3982786882072158769,
        3122752589341001230,
        10504208486203158071,
        6652408325547086747,
        5967474466344967961,
        12539121297600626407,
        1831163339347427376,
        7868114814755902815,
        7729102434867955318,
        10792601863845520542,
        15327711596842879013,
        14730808801359957011,
        13121948649095597837,
        10291034340260237520,
        13562186750934916778,
        11893124589482900772,
        4216614846885738542,
        5380991314915788387,
        7588567317617226717,
        11763275040999342292,
        14721824372618256217,
        3814744527349517609,
        6669444972815830915,
        4453311070294464051,
        17150678754265386723,
        3180479219182529655,
        13753406126426600702,
        18039519803161735191,
        16978087054732732497,
        4753587762321157187,
        16349090300908904091,
        1719914446282977460,
        10497110735814996482,
        7729768539088985149,
        4890671606572480113,
        12893970054684446229,
        896141493801635325,
        4064723958976488956,
        1084645415411900279,
        5769119770770455245,
        16575323795449897482,
        14885646597978204918,
        2420851202774840493,
        15271173362913424904,
        18047310131733227355,
        17384678802650177216,
        5464172276830829655,
        14818089207220879262,
        231881840306745236,
        9319876150797849115,
        10353447138996405490,
        7770214348921122165,
        7553287734467352768,
        4040307014012336414,
        11980970108428985587,
        8063764240108738475,
        14749321943128113691,
        10264000127073918304,
        537540237453590564,
        10243753712644813004,
        10956195294627753220,
        15141991952122893673,
        2849514475226491629,
        614081310301071834,
        11964704847203999018,
        8078388910864765979,
        14454341332910612932,
        6052796197188009711,
        14386023744813843551,
        13257904575195033026,
        11501125974282942918,
        6783395893226430540,
        9832175631847610406,
        6577082661209438489,
        283012575285651246,
        5517723887933788175,
        10439741863153267001,
        8687763311968593313,
        8205782270208761212,
        7025841073662323682,
        10387229734518108058,
        142617070939414579,
        13803827233078255887,
        11777533550195138143,
        7183961127473715685,
        853017645937610837,
        3598424427347891859,
        49634819974482811,
        2038404877488800279,
        13483271778583008643,
        15157533314308187849,
        2918541179210384126,
        13794139156355354544,
        151841964911089355,
        13570552526060823977,
        10158219054306749755,
        1060253014266168405,
        1112115383996279390,
        12520016191611191326,
        8781870202542488753,
        4975835405302382437,
        5705904694736107550,
        3758725711421399923,
        1925159567569233306,
        499896115393088959,
        11899025888433791825,
        15682408163367139445,
        6563481322991136312,
        9129687374050668767,
        2378242382723489419,
        11419698217704485491,
        18303363177605120951,
        119097852652391841,
        207784874726242248,
        14216165769960901462,
        8604181500446787430,
        16926535962794786424,
        8783378487370317368,
        852504826686441867,
        17553104900546318147,
        9030694207409821712,
        13352020686711684464,
        3791043664537127126,
        4301579124652776915,
        9305794633316854866,
        1004979148389846188,
        12610028657407783693,
        1942677164820237066,
        12000529508553989685,
        8814874170978082399,
        12359219626082016813,
        9645287674288360205,
        7128934259613174656,
        13295583807902059405,
        544030423271756204,
        2501598784155156254,
        13384179086790650846,
        5758795200590176989,
        8907312125745157390,
        5736422272745975136,
        16346141694478899689,
        17089056999711466723,
        15362835914937497208,
        5882116093858791798,
        8165449238502268942,
        17958972839213318217,
        9265641795985317271,
        9170235597135942008,
        1826393314748018190,
        13996528346981171162,
        12099397881246726994,
        17935337810234220217,
        6426419383251358429,
        5476057065032524981,
        16076021385039656340,
        2510196106676515353,
        2704501097220025208,
        16058110628056241513,
        6507984389564325741,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_512_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0dac791ef3e531baa9195787060367a1ea72df21153ceff38d53d67bdbf14cdb");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_16_max() {
    let mut value = Vector::<u16, 16>::try_from(Vec::<u16>::from_iter([
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_16_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_1_random() {
    let mut value =
        Vector::<u64, 1>::try_from(Vec::<u64>::from_iter([8914067055681793591])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_1_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("37eeec25c220b57b000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_512_zero() {
    let mut value = Vector::<u32, 512>::try_from(Vec::<u32>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_512_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("d88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_5_max() {
    let mut value = Vector::<u32, 5>::try_from(Vec::<u32>::from_iter([
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_5_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffffffffffff000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_4_max() {
    let mut value =
        Vector::<u16, 4>::try_from(Vec::<u16>::from_iter([65535, 65535, 65535, 65535])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_4_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffff000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_2_random() {
    let mut value = Vector::<u128, 2>::try_from(Vec::<u128>::from_iter([
        293619838168840684930947284175392625045,
        264388153583386100657556026933098957077,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_2_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("9551683c41029561557e6e42b51fe5dc15c90da19169c5900b46e5a5624ee7c6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_4_random() {
    let mut value = Vector::<U256, 4>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            71, 106, 105, 163, 151, 75, 86, 137, 3, 140, 57, 168, 63, 49, 156, 118, 90, 171, 234,
            173, 47, 5, 84, 194, 65, 72, 161, 55, 197, 219, 55, 187,
        ]),
        U256::from_bytes_le([
            227, 195, 98, 142, 240, 64, 184, 45, 236, 219, 3, 44, 129, 239, 176, 243, 156, 167, 64,
            123, 43, 223, 126, 54, 226, 167, 224, 90, 66, 50, 146, 199,
        ]),
        U256::from_bytes_le([
            238, 211, 34, 186, 31, 76, 80, 81, 26, 125, 146, 107, 131, 167, 187, 18, 12, 81, 114,
            111, 72, 171, 248, 188, 8, 125, 60, 95, 202, 181, 10, 235,
        ]),
        U256::from_bytes_le([
            33, 12, 13, 114, 86, 47, 37, 217, 185, 14, 170, 41, 57, 200, 237, 119, 210, 221, 195,
            98, 101, 196, 217, 67, 23, 117, 28, 155, 29, 55, 126, 120,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_4_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("fa6875722e5f598b45c4b742d1156f397f73e5aeb1a6bb33eed523bdba40693d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_513_max() {
    let mut value = Vector::<u8, 513>::try_from(Vec::<u8>::from_iter([
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_513_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("711318b44d37a71b616d0747647acbe4b8cd24d42a19c6a3ed7b8743adc33bd4");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_8_random() {
    let mut value = Vector::<U256, 8>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            101, 98, 195, 77, 141, 84, 10, 65, 199, 185, 225, 176, 137, 102, 31, 27, 37, 157, 156,
            98, 26, 68, 252, 14, 97, 110, 55, 40, 121, 83, 119, 1,
        ]),
        U256::from_bytes_le([
            138, 126, 202, 137, 117, 108, 110, 221, 173, 146, 90, 230, 231, 224, 22, 70, 176, 98,
            96, 245, 203, 194, 31, 217, 233, 125, 156, 173, 130, 96, 202, 74,
        ]),
        U256::from_bytes_le([
            139, 177, 198, 146, 199, 238, 1, 209, 191, 221, 130, 37, 236, 151, 48, 0, 103, 182,
            122, 222, 32, 165, 195, 62, 178, 246, 19, 227, 251, 26, 118, 71,
        ]),
        U256::from_bytes_le([
            63, 97, 75, 84, 66, 135, 139, 237, 71, 224, 89, 89, 75, 165, 199, 123, 142, 237, 93, 8,
            218, 212, 69, 238, 0, 224, 135, 96, 8, 4, 55, 190,
        ]),
        U256::from_bytes_le([
            49, 143, 213, 215, 113, 232, 176, 194, 249, 16, 51, 22, 132, 119, 215, 210, 51, 239,
            35, 18, 66, 58, 146, 234, 61, 216, 225, 69, 144, 186, 171, 167,
        ]),
        U256::from_bytes_le([
            28, 20, 176, 41, 80, 99, 16, 78, 81, 183, 229, 96, 50, 12, 41, 53, 131, 219, 0, 219,
            69, 244, 158, 175, 44, 97, 242, 63, 213, 166, 171, 242,
        ]),
        U256::from_bytes_le([
            117, 137, 168, 131, 57, 1, 140, 208, 200, 217, 107, 182, 8, 204, 75, 14, 126, 208, 227,
            137, 3, 32, 251, 119, 113, 175, 110, 25, 75, 169, 19, 164,
        ]),
        U256::from_bytes_le([
            234, 119, 134, 236, 104, 109, 33, 103, 74, 136, 45, 220, 180, 224, 14, 205, 31, 146,
            106, 119, 32, 149, 135, 252, 0, 16, 26, 162, 248, 214, 34, 12,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_8_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f37250ebb8bfc70f992eb9c95107ea4def905c0062cda51a2688641a19645505");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_2_zero() {
    let mut value = Vector::<u8, 2>::try_from(Vec::<u8>::from_iter([0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_2_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_513_random() {
    let mut value = Vector::<U256, 513>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            178, 71, 197, 209, 59, 6, 21, 36, 228, 31, 161, 186, 233, 29, 46, 37, 73, 216, 72, 86,
            69, 54, 206, 110, 221, 177, 166, 166, 186, 186, 215, 68,
        ]),
        U256::from_bytes_le([
            35, 224, 168, 135, 18, 101, 248, 46, 56, 120, 178, 30, 239, 218, 38, 28, 6, 240, 148,
            191, 128, 60, 247, 192, 96, 89, 104, 171, 100, 10, 40, 62,
        ]),
        U256::from_bytes_le([
            30, 221, 119, 190, 130, 190, 160, 23, 203, 63, 137, 228, 191, 180, 64, 185, 162, 209,
            133, 209, 20, 172, 25, 138, 228, 163, 137, 6, 193, 240, 250, 47,
        ]),
        U256::from_bytes_le([
            62, 169, 21, 161, 250, 9, 206, 247, 30, 76, 164, 18, 194, 246, 95, 172, 82, 165, 213,
            242, 234, 10, 162, 138, 180, 24, 129, 91, 43, 76, 169, 204,
        ]),
        U256::from_bytes_le([
            99, 45, 118, 204, 18, 14, 247, 142, 237, 70, 142, 7, 106, 109, 240, 4, 8, 158, 206,
            220, 99, 157, 177, 36, 207, 0, 27, 32, 199, 28, 34, 170,
        ]),
        U256::from_bytes_le([
            96, 238, 170, 133, 190, 69, 74, 93, 216, 192, 45, 244, 189, 44, 96, 14, 14, 138, 110,
            2, 150, 43, 213, 2, 26, 63, 181, 73, 211, 241, 197, 212,
        ]),
        U256::from_bytes_le([
            208, 36, 201, 109, 140, 99, 100, 58, 32, 210, 66, 232, 14, 33, 170, 42, 170, 94, 198,
            83, 197, 101, 245, 255, 120, 157, 156, 250, 89, 230, 33, 30,
        ]),
        U256::from_bytes_le([
            173, 50, 149, 161, 137, 27, 29, 203, 170, 202, 16, 255, 158, 194, 251, 188, 137, 196,
            107, 168, 93, 208, 79, 243, 102, 72, 38, 9, 41, 197, 176, 200,
        ]),
        U256::from_bytes_le([
            197, 235, 149, 163, 193, 46, 219, 220, 87, 237, 166, 190, 96, 129, 64, 184, 49, 224,
            247, 185, 235, 112, 200, 33, 201, 166, 214, 109, 245, 148, 130, 43,
        ]),
        U256::from_bytes_le([
            17, 112, 84, 116, 241, 154, 12, 234, 204, 217, 192, 55, 91, 147, 46, 241, 84, 77, 154,
            162, 69, 51, 164, 214, 249, 149, 179, 28, 55, 82, 11, 108,
        ]),
        U256::from_bytes_le([
            233, 187, 81, 91, 170, 151, 23, 229, 10, 248, 194, 250, 196, 229, 50, 107, 104, 172,
            67, 54, 222, 12, 17, 156, 112, 221, 209, 171, 209, 47, 8, 234,
        ]),
        U256::from_bytes_le([
            46, 238, 115, 185, 73, 25, 97, 13, 141, 79, 45, 138, 48, 173, 221, 170, 201, 3, 10, 2,
            206, 246, 194, 225, 5, 134, 51, 106, 67, 237, 10, 185,
        ]),
        U256::from_bytes_le([
            157, 7, 23, 108, 211, 35, 110, 236, 247, 224, 225, 229, 239, 119, 47, 203, 23, 227,
            132, 45, 187, 208, 114, 44, 32, 53, 92, 124, 76, 18, 91, 180,
        ]),
        U256::from_bytes_le([
            150, 67, 190, 187, 102, 133, 84, 218, 156, 192, 108, 114, 210, 75, 35, 209, 150, 162,
            255, 238, 55, 151, 117, 121, 48, 59, 145, 213, 155, 146, 22, 134,
        ]),
        U256::from_bytes_le([
            25, 54, 191, 145, 156, 85, 110, 165, 155, 133, 187, 52, 13, 5, 196, 239, 103, 237, 200,
            102, 11, 180, 57, 36, 238, 184, 198, 181, 191, 196, 169, 88,
        ]),
        U256::from_bytes_le([
            208, 217, 225, 42, 12, 10, 171, 12, 245, 51, 131, 110, 56, 186, 18, 6, 32, 170, 20,
            196, 216, 32, 244, 2, 30, 67, 112, 208, 163, 188, 189, 192,
        ]),
        U256::from_bytes_le([
            41, 226, 112, 76, 190, 210, 233, 170, 88, 41, 47, 236, 239, 121, 209, 49, 3, 156, 29,
            222, 108, 172, 129, 67, 253, 186, 90, 153, 130, 169, 114, 184,
        ]),
        U256::from_bytes_le([
            98, 83, 27, 108, 119, 132, 255, 1, 83, 205, 167, 185, 69, 143, 28, 44, 112, 42, 47,
            112, 70, 196, 20, 48, 78, 96, 103, 47, 156, 148, 195, 166,
        ]),
        U256::from_bytes_le([
            233, 22, 130, 25, 208, 219, 207, 203, 171, 11, 25, 238, 102, 56, 132, 215, 61, 150, 77,
            110, 10, 175, 185, 124, 143, 85, 211, 173, 24, 92, 138, 122,
        ]),
        U256::from_bytes_le([
            174, 201, 78, 251, 134, 147, 80, 131, 34, 48, 132, 202, 237, 31, 3, 155, 71, 24, 187,
            169, 197, 47, 165, 79, 115, 138, 243, 195, 204, 236, 141, 163,
        ]),
        U256::from_bytes_le([
            216, 199, 142, 77, 73, 201, 189, 20, 96, 101, 22, 170, 209, 49, 93, 107, 182, 6, 88,
            213, 85, 49, 248, 134, 27, 246, 113, 128, 32, 150, 71, 168,
        ]),
        U256::from_bytes_le([
            70, 145, 215, 171, 144, 39, 231, 74, 87, 201, 93, 129, 35, 128, 156, 141, 136, 31, 228,
            162, 2, 172, 8, 135, 164, 69, 245, 47, 74, 24, 39, 239,
        ]),
        U256::from_bytes_le([
            29, 100, 159, 136, 120, 20, 214, 71, 1, 142, 158, 107, 124, 69, 140, 198, 95, 19, 167,
            138, 24, 214, 6, 235, 22, 179, 131, 147, 226, 138, 125, 228,
        ]),
        U256::from_bytes_le([
            51, 121, 185, 204, 177, 154, 144, 187, 48, 197, 160, 211, 83, 4, 4, 218, 137, 41, 98,
            84, 241, 79, 221, 207, 245, 198, 137, 129, 5, 55, 190, 229,
        ]),
        U256::from_bytes_le([
            163, 77, 183, 245, 189, 111, 239, 229, 114, 29, 21, 151, 135, 233, 239, 138, 161, 148,
            9, 129, 52, 132, 21, 155, 201, 218, 89, 7, 146, 216, 4, 82,
        ]),
        U256::from_bytes_le([
            1, 153, 163, 179, 29, 202, 77, 13, 185, 39, 60, 225, 165, 190, 34, 53, 247, 180, 169,
            155, 145, 94, 214, 250, 83, 2, 182, 137, 146, 231, 196, 13,
        ]),
        U256::from_bytes_le([
            245, 20, 86, 32, 27, 252, 228, 6, 101, 85, 20, 49, 85, 180, 180, 114, 55, 183, 33, 108,
            77, 222, 131, 141, 162, 28, 90, 146, 186, 71, 175, 155,
        ]),
        U256::from_bytes_le([
            93, 178, 235, 193, 166, 215, 111, 224, 19, 241, 164, 54, 221, 139, 69, 39, 222, 46,
            144, 172, 120, 116, 233, 230, 140, 9, 51, 173, 89, 207, 101, 87,
        ]),
        U256::from_bytes_le([
            133, 3, 28, 110, 72, 154, 217, 41, 134, 152, 207, 234, 234, 218, 232, 168, 65, 249,
            124, 212, 15, 46, 203, 28, 132, 104, 95, 119, 177, 135, 133, 194,
        ]),
        U256::from_bytes_le([
            209, 135, 15, 213, 3, 143, 90, 176, 22, 203, 102, 91, 234, 133, 24, 245, 72, 252, 212,
            208, 20, 237, 83, 121, 165, 94, 45, 41, 224, 3, 104, 235,
        ]),
        U256::from_bytes_le([
            108, 111, 87, 1, 255, 92, 18, 141, 233, 18, 117, 231, 238, 72, 61, 101, 200, 169, 119,
            108, 177, 214, 54, 22, 172, 56, 26, 205, 215, 210, 6, 162,
        ]),
        U256::from_bytes_le([
            245, 254, 132, 70, 206, 22, 148, 55, 150, 182, 25, 108, 235, 96, 89, 102, 187, 0, 129,
            254, 158, 55, 83, 66, 115, 122, 69, 165, 116, 8, 70, 186,
        ]),
        U256::from_bytes_le([
            83, 104, 58, 205, 179, 179, 97, 101, 182, 78, 78, 180, 12, 189, 25, 210, 48, 64, 235,
            119, 243, 137, 237, 144, 84, 210, 202, 178, 32, 12, 42, 135,
        ]),
        U256::from_bytes_le([
            240, 159, 142, 102, 148, 193, 233, 85, 34, 127, 79, 35, 77, 227, 178, 52, 92, 98, 4,
            209, 14, 71, 62, 166, 156, 246, 119, 113, 156, 182, 49, 34,
        ]),
        U256::from_bytes_le([
            215, 3, 248, 30, 69, 46, 117, 180, 192, 87, 8, 168, 36, 104, 28, 219, 15, 253, 246,
            148, 40, 101, 74, 45, 59, 129, 83, 143, 245, 213, 101, 45,
        ]),
        U256::from_bytes_le([
            55, 105, 177, 69, 135, 244, 64, 238, 136, 223, 41, 250, 197, 32, 138, 192, 104, 167,
            225, 24, 69, 167, 180, 136, 125, 66, 95, 67, 79, 30, 182, 220,
        ]),
        U256::from_bytes_le([
            222, 15, 245, 179, 116, 31, 141, 229, 177, 175, 126, 16, 31, 198, 73, 67, 26, 95, 195,
            98, 204, 247, 129, 253, 30, 18, 164, 181, 4, 138, 198, 164,
        ]),
        U256::from_bytes_le([
            183, 53, 103, 73, 146, 220, 122, 52, 89, 201, 212, 130, 61, 100, 45, 116, 40, 126, 89,
            64, 119, 179, 185, 203, 230, 137, 128, 66, 22, 36, 201, 136,
        ]),
        U256::from_bytes_le([
            87, 208, 7, 148, 200, 249, 41, 189, 35, 211, 125, 100, 153, 244, 129, 206, 223, 150,
            189, 26, 178, 223, 117, 23, 239, 202, 251, 252, 173, 33, 178, 94,
        ]),
        U256::from_bytes_le([
            96, 60, 62, 71, 121, 45, 122, 234, 102, 249, 34, 225, 151, 144, 173, 96, 196, 9, 199,
            171, 54, 79, 71, 176, 141, 183, 165, 237, 171, 25, 12, 214,
        ]),
        U256::from_bytes_le([
            251, 175, 202, 42, 72, 251, 88, 108, 210, 16, 96, 144, 127, 94, 244, 120, 105, 57, 163,
            1, 103, 187, 3, 124, 4, 104, 238, 25, 208, 200, 145, 8,
        ]),
        U256::from_bytes_le([
            196, 66, 8, 195, 78, 241, 145, 131, 158, 76, 74, 48, 236, 94, 172, 246, 16, 119, 239,
            29, 108, 227, 25, 185, 149, 26, 148, 219, 40, 220, 167, 174,
        ]),
        U256::from_bytes_le([
            207, 254, 108, 11, 15, 75, 35, 46, 69, 19, 0, 94, 30, 177, 18, 4, 6, 4, 139, 168, 79,
            39, 114, 245, 24, 147, 229, 173, 195, 250, 171, 189,
        ]),
        U256::from_bytes_le([
            144, 250, 196, 99, 24, 213, 168, 242, 101, 209, 89, 41, 62, 55, 180, 211, 174, 245, 33,
            238, 212, 249, 98, 195, 226, 208, 28, 120, 209, 4, 249, 230,
        ]),
        U256::from_bytes_le([
            105, 193, 211, 100, 176, 174, 97, 60, 144, 173, 181, 55, 200, 195, 57, 134, 253, 86, 2,
            5, 197, 119, 215, 167, 58, 108, 188, 99, 135, 220, 58, 36,
        ]),
        U256::from_bytes_le([
            189, 147, 225, 14, 113, 180, 171, 195, 10, 142, 13, 132, 79, 175, 73, 10, 233, 96, 204,
            255, 228, 185, 36, 62, 35, 177, 35, 247, 183, 2, 216, 224,
        ]),
        U256::from_bytes_le([
            202, 241, 161, 197, 104, 214, 11, 93, 226, 46, 22, 9, 232, 191, 212, 208, 201, 179, 18,
            225, 251, 62, 82, 253, 21, 26, 141, 235, 161, 217, 182, 22,
        ]),
        U256::from_bytes_le([
            30, 157, 113, 125, 213, 172, 170, 226, 114, 151, 16, 195, 182, 195, 80, 230, 106, 21,
            226, 44, 238, 6, 149, 102, 199, 251, 82, 108, 187, 233, 202, 180,
        ]),
        U256::from_bytes_le([
            112, 190, 45, 42, 38, 187, 96, 133, 160, 61, 102, 116, 227, 15, 27, 59, 12, 194, 13,
            98, 162, 164, 161, 36, 219, 173, 117, 247, 6, 236, 46, 196,
        ]),
        U256::from_bytes_le([
            101, 186, 191, 25, 234, 193, 100, 254, 44, 213, 150, 229, 110, 245, 214, 66, 157, 14,
            39, 178, 232, 26, 224, 39, 196, 28, 77, 68, 49, 108, 124, 20,
        ]),
        U256::from_bytes_le([
            226, 3, 39, 103, 66, 204, 187, 119, 249, 176, 207, 215, 94, 64, 150, 241, 162, 200,
            250, 28, 217, 2, 13, 103, 77, 152, 45, 251, 170, 137, 252, 118,
        ]),
        U256::from_bytes_le([
            139, 213, 243, 72, 116, 253, 237, 126, 204, 92, 100, 94, 145, 234, 104, 244, 207, 186,
            66, 192, 134, 163, 5, 112, 50, 25, 20, 171, 146, 205, 45, 53,
        ]),
        U256::from_bytes_le([
            181, 8, 86, 251, 58, 1, 204, 203, 38, 153, 215, 166, 89, 1, 23, 112, 165, 105, 60, 215,
            251, 114, 247, 103, 238, 152, 182, 84, 213, 123, 208, 131,
        ]),
        U256::from_bytes_le([
            150, 76, 74, 154, 78, 106, 87, 111, 176, 41, 48, 145, 246, 190, 37, 127, 170, 106, 182,
            78, 254, 145, 166, 35, 101, 160, 44, 34, 208, 55, 144, 208,
        ]),
        U256::from_bytes_le([
            118, 246, 194, 135, 193, 204, 164, 206, 115, 238, 102, 82, 187, 144, 112, 33, 206, 46,
            42, 174, 140, 125, 0, 225, 111, 121, 89, 205, 3, 112, 60, 161,
        ]),
        U256::from_bytes_le([
            15, 95, 93, 206, 107, 237, 4, 244, 152, 222, 154, 37, 196, 216, 15, 86, 214, 158, 25,
            46, 182, 130, 35, 248, 14, 26, 89, 235, 73, 90, 74, 230,
        ]),
        U256::from_bytes_le([
            231, 13, 106, 52, 53, 239, 137, 203, 186, 254, 68, 200, 85, 5, 181, 108, 4, 224, 127,
            47, 99, 62, 129, 236, 235, 135, 0, 105, 255, 83, 170, 162,
        ]),
        U256::from_bytes_le([
            243, 103, 193, 249, 159, 210, 222, 172, 142, 95, 91, 8, 18, 131, 37, 73, 20, 153, 21,
            138, 72, 88, 244, 45, 162, 192, 214, 155, 140, 202, 132, 253,
        ]),
        U256::from_bytes_le([
            118, 39, 78, 139, 53, 188, 156, 128, 94, 217, 244, 106, 81, 210, 173, 76, 21, 102, 21,
            125, 168, 29, 238, 183, 221, 162, 187, 123, 215, 12, 104, 237,
        ]),
        U256::from_bytes_le([
            7, 37, 46, 145, 82, 175, 23, 5, 247, 117, 117, 53, 45, 14, 23, 253, 143, 49, 6, 230,
            48, 12, 233, 87, 47, 76, 5, 67, 158, 192, 115, 245,
        ]),
        U256::from_bytes_le([
            223, 199, 45, 97, 157, 114, 81, 6, 58, 102, 84, 213, 51, 154, 244, 126, 226, 165, 130,
            206, 206, 160, 73, 176, 111, 17, 11, 173, 164, 169, 198, 98,
        ]),
        U256::from_bytes_le([
            133, 30, 237, 19, 54, 227, 173, 7, 68, 154, 9, 3, 29, 58, 7, 25, 34, 199, 140, 119, 21,
            36, 22, 12, 153, 135, 18, 127, 246, 51, 78, 101,
        ]),
        U256::from_bytes_le([
            77, 131, 152, 95, 81, 247, 79, 217, 124, 197, 255, 208, 254, 10, 61, 128, 139, 112,
            168, 121, 36, 224, 212, 148, 56, 210, 240, 196, 178, 106, 20, 57,
        ]),
        U256::from_bytes_le([
            252, 240, 191, 164, 78, 254, 105, 9, 238, 197, 203, 250, 101, 80, 192, 123, 216, 183,
            115, 158, 30, 106, 63, 97, 61, 9, 149, 40, 58, 149, 166, 214,
        ]),
        U256::from_bytes_le([
            26, 54, 80, 72, 61, 99, 27, 35, 242, 222, 111, 25, 109, 198, 108, 75, 130, 52, 67, 229,
            36, 56, 198, 47, 164, 143, 134, 0, 213, 126, 67, 140,
        ]),
        U256::from_bytes_le([
            200, 192, 200, 240, 144, 208, 21, 143, 243, 233, 240, 205, 74, 237, 66, 243, 138, 180,
            127, 213, 190, 0, 21, 148, 123, 166, 226, 238, 198, 175, 155, 22,
        ]),
        U256::from_bytes_le([
            173, 59, 57, 59, 89, 102, 136, 88, 65, 59, 186, 169, 68, 143, 133, 119, 97, 173, 228,
            128, 106, 12, 124, 156, 0, 49, 148, 87, 217, 129, 238, 77,
        ]),
        U256::from_bytes_le([
            6, 35, 101, 192, 241, 76, 32, 123, 9, 19, 226, 130, 2, 238, 182, 5, 124, 65, 155, 192,
            53, 186, 125, 216, 255, 35, 118, 198, 103, 50, 8, 140,
        ]),
        U256::from_bytes_le([
            43, 73, 156, 43, 191, 116, 92, 49, 37, 60, 147, 109, 162, 14, 90, 137, 105, 193, 188,
            161, 84, 20, 24, 195, 5, 161, 86, 146, 137, 50, 129, 241,
        ]),
        U256::from_bytes_le([
            92, 116, 152, 57, 217, 122, 124, 73, 86, 12, 155, 24, 180, 130, 8, 151, 96, 88, 133,
            186, 42, 50, 202, 238, 12, 176, 164, 220, 234, 6, 37, 46,
        ]),
        U256::from_bytes_le([
            231, 14, 84, 54, 187, 121, 24, 120, 125, 217, 54, 155, 174, 125, 171, 57, 211, 245,
            242, 74, 150, 101, 64, 144, 78, 106, 225, 220, 141, 238, 210, 158,
        ]),
        U256::from_bytes_le([
            123, 158, 195, 130, 161, 221, 44, 204, 8, 13, 37, 20, 115, 160, 235, 24, 70, 171, 224,
            237, 52, 161, 187, 119, 198, 119, 215, 58, 200, 150, 199, 18,
        ]),
        U256::from_bytes_le([
            20, 32, 69, 77, 211, 8, 103, 174, 134, 63, 89, 161, 150, 9, 103, 236, 137, 245, 204,
            129, 181, 0, 138, 214, 168, 190, 164, 215, 40, 209, 198, 207,
        ]),
        U256::from_bytes_le([
            128, 230, 61, 125, 135, 181, 103, 62, 77, 158, 164, 31, 172, 223, 47, 93, 254, 248,
            174, 49, 221, 69, 151, 139, 49, 62, 61, 203, 24, 40, 247, 36,
        ]),
        U256::from_bytes_le([
            99, 58, 102, 96, 183, 26, 87, 205, 45, 36, 130, 2, 188, 188, 54, 68, 228, 173, 168,
            122, 175, 232, 105, 187, 253, 123, 105, 252, 255, 98, 194, 24,
        ]),
        U256::from_bytes_le([
            244, 228, 6, 59, 113, 253, 99, 151, 26, 112, 163, 75, 5, 46, 45, 147, 234, 42, 182, 99,
            120, 39, 18, 36, 223, 118, 185, 149, 169, 192, 73, 198,
        ]),
        U256::from_bytes_le([
            227, 121, 82, 0, 167, 52, 74, 81, 94, 62, 216, 63, 229, 233, 62, 218, 184, 176, 19,
            150, 218, 105, 141, 95, 140, 198, 239, 25, 215, 141, 111, 3,
        ]),
        U256::from_bytes_le([
            109, 245, 250, 123, 233, 165, 37, 221, 23, 96, 80, 230, 248, 4, 177, 93, 255, 190, 49,
            170, 196, 166, 151, 105, 152, 49, 233, 216, 190, 220, 205, 56,
        ]),
        U256::from_bytes_le([
            195, 186, 74, 36, 89, 18, 236, 54, 8, 94, 174, 221, 111, 220, 208, 160, 231, 93, 141,
            199, 110, 125, 145, 69, 45, 150, 155, 165, 36, 171, 79, 17,
        ]),
        U256::from_bytes_le([
            46, 88, 38, 57, 103, 239, 1, 76, 85, 189, 108, 229, 208, 116, 111, 143, 47, 193, 25,
            64, 206, 80, 146, 123, 24, 9, 40, 40, 163, 148, 7, 139,
        ]),
        U256::from_bytes_le([
            44, 125, 135, 6, 198, 176, 55, 253, 221, 18, 82, 154, 223, 24, 119, 7, 52, 116, 250,
            231, 241, 229, 94, 101, 222, 97, 228, 87, 58, 120, 182, 191,
        ]),
        U256::from_bytes_le([
            224, 131, 193, 194, 98, 213, 224, 78, 95, 142, 17, 62, 16, 63, 208, 1, 90, 128, 255,
            62, 115, 220, 97, 104, 30, 227, 46, 229, 245, 63, 145, 65,
        ]),
        U256::from_bytes_le([
            217, 20, 152, 65, 164, 4, 57, 177, 45, 98, 127, 131, 40, 212, 141, 195, 215, 62, 140,
            116, 110, 161, 139, 84, 244, 135, 67, 28, 156, 79, 132, 153,
        ]),
        U256::from_bytes_le([
            206, 135, 11, 115, 113, 21, 11, 208, 247, 165, 192, 157, 185, 7, 85, 151, 21, 119, 103,
            43, 89, 182, 47, 41, 192, 59, 37, 182, 159, 152, 181, 190,
        ]),
        U256::from_bytes_le([
            15, 202, 178, 89, 0, 31, 141, 99, 253, 155, 32, 57, 134, 247, 13, 78, 233, 12, 163,
            137, 131, 27, 65, 230, 1, 1, 239, 47, 157, 215, 48, 28,
        ]),
        U256::from_bytes_le([
            99, 98, 213, 97, 193, 146, 244, 70, 192, 22, 72, 205, 185, 66, 64, 223, 53, 238, 82,
            255, 32, 132, 87, 51, 186, 231, 152, 111, 140, 167, 0, 11,
        ]),
        U256::from_bytes_le([
            234, 166, 50, 152, 161, 203, 100, 77, 93, 11, 5, 180, 190, 177, 71, 74, 127, 126, 149,
            95, 202, 122, 250, 128, 189, 32, 154, 190, 212, 88, 110, 94,
        ]),
        U256::from_bytes_le([
            126, 213, 154, 153, 36, 230, 133, 2, 65, 76, 249, 164, 156, 98, 45, 239, 126, 230, 21,
            7, 164, 62, 218, 17, 6, 60, 128, 71, 193, 50, 175, 29,
        ]),
        U256::from_bytes_le([
            184, 20, 161, 155, 8, 175, 74, 173, 68, 181, 229, 151, 34, 20, 238, 78, 22, 45, 169,
            249, 93, 91, 157, 106, 64, 241, 170, 91, 17, 142, 153, 1,
        ]),
        U256::from_bytes_le([
            40, 46, 178, 83, 198, 151, 5, 111, 24, 129, 9, 6, 168, 9, 12, 91, 17, 212, 238, 81,
            155, 198, 220, 10, 109, 238, 216, 209, 230, 142, 142, 99,
        ]),
        U256::from_bytes_le([
            42, 48, 115, 219, 237, 88, 71, 188, 224, 196, 1, 219, 131, 244, 182, 130, 37, 5, 143,
            81, 219, 119, 14, 185, 161, 79, 68, 225, 151, 68, 241, 140,
        ]),
        U256::from_bytes_le([
            140, 81, 219, 118, 213, 103, 0, 163, 212, 31, 123, 170, 1, 77, 141, 146, 94, 19, 99,
            120, 18, 158, 120, 113, 122, 248, 40, 228, 225, 34, 55, 239,
        ]),
        U256::from_bytes_le([
            43, 177, 185, 179, 151, 154, 156, 185, 203, 183, 180, 54, 36, 42, 123, 95, 215, 128,
            112, 109, 104, 49, 30, 61, 8, 140, 130, 71, 107, 40, 109, 138,
        ]),
        U256::from_bytes_le([
            163, 161, 220, 209, 26, 112, 25, 206, 142, 67, 41, 199, 174, 242, 217, 147, 90, 147,
            175, 176, 136, 180, 231, 181, 36, 136, 66, 152, 53, 66, 19, 126,
        ]),
        U256::from_bytes_le([
            181, 193, 47, 200, 136, 168, 68, 251, 157, 59, 88, 88, 143, 84, 87, 54, 8, 111, 172,
            10, 37, 133, 242, 25, 185, 128, 244, 202, 146, 243, 66, 100,
        ]),
        U256::from_bytes_le([
            122, 153, 147, 228, 154, 187, 138, 248, 148, 178, 113, 87, 181, 53, 55, 150, 97, 228,
            139, 155, 162, 217, 153, 178, 70, 230, 173, 122, 90, 239, 226, 224,
        ]),
        U256::from_bytes_le([
            87, 182, 231, 95, 3, 8, 145, 105, 74, 224, 238, 222, 212, 116, 215, 104, 18, 45, 135,
            195, 86, 41, 190, 150, 215, 88, 8, 133, 132, 50, 212, 48,
        ]),
        U256::from_bytes_le([
            224, 225, 38, 244, 19, 31, 101, 135, 239, 207, 21, 21, 165, 212, 119, 28, 56, 219, 143,
            96, 141, 241, 86, 77, 204, 181, 56, 99, 51, 129, 54, 80,
        ]),
        U256::from_bytes_le([
            171, 128, 206, 45, 143, 218, 155, 16, 227, 43, 101, 253, 215, 16, 142, 25, 151, 116,
            40, 198, 77, 64, 89, 113, 233, 213, 17, 17, 8, 54, 148, 67,
        ]),
        U256::from_bytes_le([
            109, 183, 244, 243, 8, 194, 196, 176, 252, 249, 245, 61, 173, 127, 216, 149, 174, 229,
            175, 249, 149, 128, 56, 247, 120, 28, 43, 213, 12, 186, 213, 95,
        ]),
        U256::from_bytes_le([
            57, 172, 177, 163, 16, 76, 82, 34, 255, 85, 12, 227, 167, 121, 47, 28, 11, 106, 223,
            122, 48, 136, 164, 158, 47, 67, 15, 255, 111, 38, 64, 227,
        ]),
        U256::from_bytes_le([
            88, 48, 21, 175, 73, 216, 200, 24, 213, 62, 89, 25, 251, 250, 60, 51, 198, 173, 215, 0,
            225, 36, 231, 55, 144, 20, 35, 252, 185, 169, 17, 158,
        ]),
        U256::from_bytes_le([
            72, 159, 255, 86, 182, 186, 148, 100, 232, 54, 91, 176, 134, 61, 4, 140, 134, 142, 131,
            175, 118, 150, 72, 31, 0, 201, 63, 197, 101, 56, 226, 250,
        ]),
        U256::from_bytes_le([
            35, 247, 159, 220, 103, 253, 21, 219, 83, 47, 252, 33, 15, 82, 255, 157, 215, 238, 194,
            127, 82, 5, 18, 237, 147, 6, 226, 184, 168, 160, 225, 24,
        ]),
        U256::from_bytes_le([
            125, 100, 59, 198, 245, 62, 53, 77, 255, 149, 83, 199, 82, 42, 68, 224, 78, 217, 222,
            181, 186, 147, 40, 67, 113, 193, 186, 92, 147, 4, 102, 170,
        ]),
        U256::from_bytes_le([
            45, 57, 118, 28, 48, 141, 88, 188, 149, 211, 110, 32, 122, 12, 48, 107, 123, 79, 216,
            90, 87, 66, 224, 158, 214, 108, 206, 133, 148, 108, 22, 195,
        ]),
        U256::from_bytes_le([
            134, 23, 79, 91, 252, 232, 30, 200, 141, 39, 221, 43, 216, 212, 194, 23, 10, 9, 105,
            132, 209, 180, 83, 243, 236, 0, 145, 53, 251, 191, 142, 156,
        ]),
        U256::from_bytes_le([
            39, 87, 94, 195, 251, 48, 27, 210, 205, 166, 135, 16, 73, 144, 134, 9, 246, 196, 178,
            10, 12, 41, 26, 253, 33, 174, 243, 15, 150, 8, 81, 179,
        ]),
        U256::from_bytes_le([
            184, 192, 243, 120, 42, 146, 100, 138, 70, 117, 95, 13, 241, 85, 87, 74, 7, 54, 150,
            180, 221, 181, 210, 75, 76, 155, 150, 90, 126, 70, 157, 154,
        ]),
        U256::from_bytes_le([
            74, 172, 30, 255, 46, 8, 178, 117, 0, 124, 234, 229, 153, 216, 211, 41, 110, 162, 186,
            231, 151, 64, 54, 129, 174, 144, 245, 153, 128, 183, 242, 59,
        ]),
        U256::from_bytes_le([
            95, 122, 68, 78, 214, 144, 136, 31, 172, 126, 215, 168, 67, 116, 92, 208, 242, 244, 0,
            182, 182, 232, 148, 154, 235, 193, 31, 34, 220, 143, 31, 177,
        ]),
        U256::from_bytes_le([
            242, 120, 102, 193, 86, 44, 238, 159, 1, 17, 250, 202, 236, 13, 229, 182, 188, 134,
            142, 140, 155, 70, 162, 180, 25, 144, 72, 148, 134, 244, 199, 202,
        ]),
        U256::from_bytes_le([
            208, 118, 146, 92, 188, 229, 213, 111, 39, 159, 234, 45, 26, 37, 197, 115, 91, 149, 11,
            59, 33, 28, 77, 163, 70, 20, 57, 99, 3, 177, 48, 12,
        ]),
        U256::from_bytes_le([
            16, 148, 26, 231, 123, 97, 90, 157, 3, 121, 156, 169, 129, 244, 2, 142, 192, 236, 29,
            37, 126, 137, 210, 113, 132, 251, 154, 161, 9, 107, 161, 32,
        ]),
        U256::from_bytes_le([
            160, 129, 8, 45, 140, 240, 195, 183, 119, 238, 25, 241, 22, 162, 67, 81, 181, 220, 11,
            10, 129, 110, 237, 63, 174, 215, 92, 54, 210, 25, 151, 70,
        ]),
        U256::from_bytes_le([
            56, 86, 111, 247, 157, 109, 218, 241, 134, 243, 41, 97, 224, 87, 3, 176, 9, 122, 143,
            64, 228, 212, 126, 160, 49, 3, 39, 135, 154, 24, 136, 105,
        ]),
        U256::from_bytes_le([
            169, 207, 46, 88, 215, 140, 217, 152, 91, 2, 200, 71, 11, 144, 203, 14, 65, 109, 57,
            148, 113, 183, 136, 132, 224, 123, 214, 61, 182, 60, 149, 168,
        ]),
        U256::from_bytes_le([
            211, 82, 116, 39, 253, 172, 140, 22, 126, 109, 121, 113, 31, 159, 183, 73, 222, 50, 35,
            33, 222, 238, 113, 188, 52, 244, 20, 48, 181, 52, 244, 58,
        ]),
        U256::from_bytes_le([
            234, 11, 4, 121, 140, 252, 242, 190, 241, 4, 238, 40, 50, 86, 240, 128, 226, 189, 134,
            53, 154, 62, 92, 52, 64, 189, 141, 179, 14, 68, 183, 28,
        ]),
        U256::from_bytes_le([
            96, 238, 252, 188, 211, 25, 191, 75, 210, 106, 27, 209, 189, 118, 185, 68, 214, 129,
            230, 94, 108, 20, 144, 194, 63, 154, 131, 146, 198, 230, 35, 149,
        ]),
        U256::from_bytes_le([
            155, 155, 154, 116, 225, 75, 97, 55, 134, 150, 133, 110, 243, 212, 153, 141, 221, 198,
            155, 124, 135, 103, 192, 165, 72, 109, 36, 39, 121, 161, 249, 107,
        ]),
        U256::from_bytes_le([
            232, 126, 150, 98, 220, 143, 197, 13, 116, 225, 47, 224, 57, 20, 29, 142, 216, 202, 50,
            163, 68, 101, 109, 121, 203, 78, 173, 194, 82, 225, 105, 50,
        ]),
        U256::from_bytes_le([
            186, 187, 37, 250, 186, 163, 52, 249, 66, 149, 99, 20, 109, 160, 9, 81, 48, 187, 173,
            156, 156, 47, 219, 135, 42, 73, 195, 78, 191, 120, 86, 68,
        ]),
        U256::from_bytes_le([
            185, 110, 17, 170, 23, 88, 78, 232, 179, 18, 196, 172, 244, 207, 89, 109, 213, 29, 251,
            117, 94, 125, 200, 125, 156, 152, 70, 109, 156, 42, 30, 169,
        ]),
        U256::from_bytes_le([
            134, 48, 170, 93, 63, 138, 212, 252, 253, 46, 220, 164, 31, 78, 29, 66, 250, 195, 113,
            6, 130, 46, 7, 40, 125, 61, 210, 223, 218, 126, 80, 90,
        ]),
        U256::from_bytes_le([
            197, 225, 36, 77, 20, 71, 175, 21, 192, 69, 5, 9, 160, 182, 35, 2, 51, 217, 238, 13,
            34, 49, 223, 246, 81, 193, 31, 26, 75, 116, 190, 219,
        ]),
        U256::from_bytes_le([
            43, 133, 97, 227, 210, 149, 255, 0, 206, 5, 186, 233, 37, 221, 100, 16, 18, 170, 141,
            183, 75, 185, 90, 35, 254, 49, 92, 191, 35, 125, 169, 227,
        ]),
        U256::from_bytes_le([
            172, 213, 173, 150, 100, 55, 64, 93, 135, 211, 14, 203, 150, 198, 84, 240, 185, 53,
            195, 200, 161, 152, 170, 181, 248, 178, 27, 58, 142, 170, 241, 81,
        ]),
        U256::from_bytes_le([
            224, 92, 10, 153, 70, 17, 191, 193, 83, 133, 2, 253, 51, 207, 249, 99, 8, 204, 143,
            159, 208, 44, 73, 34, 247, 29, 11, 121, 144, 65, 80, 183,
        ]),
        U256::from_bytes_le([
            131, 227, 92, 224, 96, 245, 152, 31, 210, 252, 1, 94, 4, 101, 157, 214, 128, 229, 246,
            133, 235, 53, 110, 152, 145, 250, 187, 231, 62, 218, 79, 100,
        ]),
        U256::from_bytes_le([
            12, 248, 67, 184, 97, 34, 129, 27, 236, 134, 250, 6, 239, 154, 63, 118, 163, 217, 39,
            169, 43, 190, 234, 26, 129, 113, 141, 90, 156, 156, 157, 90,
        ]),
        U256::from_bytes_le([
            147, 167, 113, 161, 251, 14, 251, 84, 46, 88, 50, 121, 139, 201, 68, 40, 15, 112, 251,
            38, 170, 19, 23, 83, 29, 187, 228, 44, 177, 239, 170, 91,
        ]),
        U256::from_bytes_le([
            112, 23, 213, 170, 221, 13, 128, 3, 19, 215, 139, 123, 65, 235, 67, 189, 123, 23, 237,
            189, 233, 77, 0, 21, 152, 131, 110, 176, 221, 93, 96, 51,
        ]),
        U256::from_bytes_le([
            209, 83, 120, 237, 0, 157, 62, 131, 68, 111, 79, 251, 193, 72, 233, 54, 80, 37, 131,
            26, 200, 99, 45, 8, 241, 72, 81, 25, 242, 130, 3, 43,
        ]),
        U256::from_bytes_le([
            21, 159, 54, 152, 200, 94, 117, 137, 33, 85, 172, 186, 205, 6, 80, 51, 134, 125, 225,
            225, 9, 66, 182, 14, 202, 72, 159, 131, 213, 172, 24, 29,
        ]),
        U256::from_bytes_le([
            125, 195, 4, 203, 241, 114, 66, 171, 107, 153, 161, 96, 83, 228, 220, 74, 21, 165, 139,
            252, 250, 255, 36, 141, 145, 126, 8, 135, 176, 196, 136, 95,
        ]),
        U256::from_bytes_le([
            147, 41, 45, 49, 123, 89, 118, 140, 193, 82, 110, 71, 73, 186, 207, 165, 89, 209, 143,
            168, 51, 247, 20, 71, 44, 189, 147, 64, 88, 199, 131, 182,
        ]),
        U256::from_bytes_le([
            160, 170, 242, 246, 247, 118, 68, 216, 70, 180, 212, 171, 127, 160, 180, 28, 74, 118,
            65, 36, 172, 87, 33, 34, 87, 149, 4, 50, 66, 251, 60, 203,
        ]),
        U256::from_bytes_le([
            45, 106, 143, 194, 179, 106, 145, 137, 122, 187, 248, 37, 32, 133, 226, 119, 114, 215,
            149, 80, 201, 252, 43, 70, 27, 79, 176, 103, 8, 82, 112, 182,
        ]),
        U256::from_bytes_le([
            30, 66, 80, 171, 135, 87, 79, 100, 8, 18, 135, 30, 204, 92, 244, 116, 25, 11, 65, 115,
            157, 73, 19, 100, 205, 229, 61, 80, 155, 156, 168, 187,
        ]),
        U256::from_bytes_le([
            167, 159, 244, 236, 238, 41, 75, 119, 135, 189, 162, 21, 220, 236, 15, 131, 69, 80,
            198, 36, 219, 227, 90, 63, 14, 45, 84, 253, 226, 159, 146, 45,
        ]),
        U256::from_bytes_le([
            235, 248, 13, 128, 54, 96, 228, 29, 154, 39, 1, 75, 114, 93, 176, 89, 127, 144, 79, 93,
            61, 175, 146, 231, 12, 141, 42, 69, 166, 58, 4, 21,
        ]),
        U256::from_bytes_le([
            167, 58, 47, 4, 3, 72, 239, 86, 37, 151, 82, 53, 84, 220, 212, 26, 97, 165, 114, 55,
            44, 194, 79, 182, 48, 94, 19, 121, 33, 244, 188, 79,
        ]),
        U256::from_bytes_le([
            76, 92, 53, 237, 251, 168, 168, 147, 179, 213, 5, 111, 182, 249, 122, 44, 212, 168,
            141, 67, 141, 161, 109, 91, 114, 190, 198, 105, 120, 81, 39, 66,
        ]),
        U256::from_bytes_le([
            71, 61, 123, 152, 152, 223, 27, 147, 13, 193, 236, 87, 68, 254, 175, 249, 22, 36, 35,
            106, 175, 145, 30, 161, 0, 254, 50, 150, 116, 0, 65, 42,
        ]),
        U256::from_bytes_le([
            160, 250, 172, 98, 29, 6, 67, 101, 23, 83, 149, 84, 3, 30, 96, 240, 59, 195, 178, 252,
            101, 124, 155, 109, 105, 43, 206, 247, 43, 235, 206, 65,
        ]),
        U256::from_bytes_le([
            127, 8, 198, 128, 97, 109, 39, 51, 60, 2, 2, 85, 65, 55, 164, 218, 16, 20, 114, 180,
            158, 43, 196, 176, 175, 8, 111, 183, 103, 161, 197, 3,
        ]),
        U256::from_bytes_le([
            83, 66, 136, 9, 65, 167, 86, 83, 46, 12, 223, 250, 235, 57, 142, 65, 57, 73, 5, 14,
            238, 39, 2, 101, 98, 202, 185, 130, 101, 197, 247, 56,
        ]),
        U256::from_bytes_le([
            4, 62, 58, 207, 238, 239, 28, 208, 179, 216, 139, 117, 30, 227, 94, 68, 208, 58, 143,
            98, 59, 64, 79, 40, 202, 83, 197, 254, 108, 139, 119, 192,
        ]),
        U256::from_bytes_le([
            110, 10, 238, 235, 212, 134, 145, 150, 70, 141, 47, 120, 158, 185, 34, 209, 13, 47,
            143, 149, 181, 214, 202, 132, 186, 199, 30, 180, 167, 241, 142, 16,
        ]),
        U256::from_bytes_le([
            128, 85, 18, 78, 38, 60, 227, 145, 99, 2, 96, 76, 173, 67, 89, 182, 51, 253, 77, 250,
            132, 176, 62, 26, 196, 179, 213, 71, 16, 22, 182, 224,
        ]),
        U256::from_bytes_le([
            102, 228, 122, 195, 188, 229, 118, 171, 55, 237, 129, 14, 101, 164, 171, 19, 179, 120,
            197, 59, 232, 68, 53, 114, 52, 67, 20, 118, 85, 92, 16, 71,
        ]),
        U256::from_bytes_le([
            55, 1, 96, 244, 27, 29, 198, 236, 35, 50, 185, 219, 206, 166, 241, 240, 223, 12, 188,
            242, 20, 63, 86, 198, 137, 177, 47, 122, 96, 209, 99, 70,
        ]),
        U256::from_bytes_le([
            1, 161, 208, 57, 141, 211, 225, 109, 218, 175, 138, 179, 238, 187, 168, 162, 207, 71,
            57, 143, 86, 86, 37, 35, 112, 251, 46, 166, 180, 82, 239, 38,
        ]),
        U256::from_bytes_le([
            109, 245, 27, 146, 74, 243, 141, 0, 138, 239, 22, 36, 233, 248, 17, 240, 109, 118, 184,
            176, 125, 63, 177, 114, 132, 57, 197, 225, 48, 125, 202, 115,
        ]),
        U256::from_bytes_le([
            57, 146, 158, 106, 100, 179, 122, 13, 212, 228, 174, 31, 176, 145, 64, 177, 64, 69, 50,
            94, 244, 112, 22, 5, 105, 77, 90, 97, 250, 167, 32, 141,
        ]),
        U256::from_bytes_le([
            47, 198, 180, 26, 233, 190, 162, 18, 38, 87, 255, 163, 240, 167, 14, 218, 177, 65, 117,
            180, 132, 208, 105, 143, 189, 224, 172, 231, 172, 173, 14, 46,
        ]),
        U256::from_bytes_le([
            140, 233, 71, 150, 49, 239, 83, 220, 211, 16, 204, 194, 161, 223, 132, 188, 183, 153,
            188, 170, 140, 105, 74, 35, 238, 219, 198, 111, 162, 70, 248, 34,
        ]),
        U256::from_bytes_le([
            111, 129, 179, 156, 209, 200, 234, 88, 157, 0, 88, 24, 106, 181, 132, 254, 244, 174,
            133, 254, 179, 9, 127, 41, 170, 77, 118, 82, 134, 135, 215, 244,
        ]),
        U256::from_bytes_le([
            178, 129, 81, 124, 187, 173, 203, 188, 7, 175, 210, 62, 231, 207, 135, 135, 11, 145,
            82, 228, 22, 96, 60, 238, 87, 53, 208, 201, 75, 251, 215, 178,
        ]),
        U256::from_bytes_le([
            54, 111, 251, 115, 31, 73, 219, 6, 237, 84, 22, 23, 166, 41, 109, 232, 15, 161, 114,
            241, 71, 7, 208, 111, 153, 177, 182, 113, 111, 65, 125, 210,
        ]),
        U256::from_bytes_le([
            226, 2, 219, 29, 200, 174, 10, 153, 133, 248, 147, 31, 15, 162, 198, 50, 61, 145, 250,
            92, 46, 21, 64, 223, 209, 67, 94, 59, 193, 61, 162, 221,
        ]),
        U256::from_bytes_le([
            13, 238, 227, 150, 16, 66, 163, 117, 131, 173, 55, 95, 121, 214, 238, 112, 49, 146, 69,
            174, 43, 33, 108, 156, 116, 170, 26, 103, 221, 2, 104, 216,
        ]),
        U256::from_bytes_le([
            113, 0, 167, 156, 190, 52, 46, 82, 243, 113, 157, 18, 135, 3, 213, 126, 46, 22, 104,
            33, 144, 149, 232, 49, 235, 6, 185, 35, 178, 253, 116, 65,
        ]),
        U256::from_bytes_le([
            87, 49, 107, 57, 218, 151, 213, 160, 171, 15, 210, 127, 45, 252, 254, 19, 59, 54, 197,
            133, 132, 37, 198, 17, 211, 84, 116, 29, 123, 143, 90, 41,
        ]),
        U256::from_bytes_le([
            231, 202, 75, 43, 254, 65, 106, 42, 128, 168, 204, 157, 11, 189, 117, 128, 184, 188,
            228, 58, 67, 232, 83, 239, 90, 173, 69, 66, 211, 152, 240, 104,
        ]),
        U256::from_bytes_le([
            119, 15, 255, 30, 121, 176, 181, 188, 221, 64, 41, 222, 116, 36, 199, 174, 195, 186,
            168, 65, 8, 226, 218, 92, 86, 89, 68, 155, 113, 5, 192, 135,
        ]),
        U256::from_bytes_le([
            154, 177, 113, 213, 104, 33, 16, 123, 136, 113, 117, 137, 15, 29, 51, 163, 117, 86, 31,
            251, 220, 33, 35, 128, 111, 161, 207, 106, 18, 216, 197, 231,
        ]),
        U256::from_bytes_le([
            158, 7, 5, 58, 190, 170, 54, 2, 236, 20, 64, 147, 164, 68, 105, 88, 93, 63, 140, 14,
            96, 103, 141, 239, 107, 170, 68, 48, 106, 41, 33, 118,
        ]),
        U256::from_bytes_le([
            247, 105, 241, 197, 73, 120, 93, 250, 74, 10, 28, 90, 247, 64, 117, 107, 225, 37, 104,
            184, 58, 143, 180, 202, 171, 237, 130, 5, 176, 124, 7, 230,
        ]),
        U256::from_bytes_le([
            136, 0, 100, 224, 221, 204, 129, 99, 203, 202, 27, 94, 43, 113, 66, 128, 100, 217, 131,
            245, 232, 91, 159, 12, 133, 93, 173, 27, 3, 53, 212, 13,
        ]),
        U256::from_bytes_le([
            166, 148, 216, 63, 72, 107, 91, 68, 188, 160, 149, 77, 28, 37, 154, 28, 247, 55, 160,
            90, 173, 62, 247, 99, 207, 2, 254, 16, 66, 57, 237, 67,
        ]),
        U256::from_bytes_le([
            13, 179, 61, 117, 140, 68, 238, 11, 241, 172, 99, 235, 89, 105, 127, 253, 107, 227,
            196, 168, 91, 190, 145, 120, 200, 79, 116, 75, 91, 91, 232, 210,
        ]),
        U256::from_bytes_le([
            36, 137, 231, 151, 114, 195, 204, 29, 110, 226, 17, 172, 125, 151, 224, 63, 182, 40,
            17, 212, 212, 180, 219, 181, 190, 241, 116, 193, 237, 111, 248, 237,
        ]),
        U256::from_bytes_le([
            103, 173, 110, 205, 187, 113, 38, 214, 130, 112, 52, 219, 195, 177, 16, 140, 156, 97,
            219, 35, 215, 250, 93, 220, 100, 168, 24, 54, 189, 238, 190, 72,
        ]),
        U256::from_bytes_le([
            214, 218, 255, 80, 19, 115, 34, 43, 60, 150, 50, 9, 224, 147, 51, 82, 16, 209, 69, 192,
            82, 29, 211, 62, 150, 187, 221, 28, 177, 35, 179, 119,
        ]),
        U256::from_bytes_le([
            98, 82, 110, 181, 23, 168, 102, 206, 222, 18, 243, 103, 164, 184, 23, 219, 6, 241, 128,
            185, 144, 169, 129, 134, 4, 109, 255, 209, 109, 152, 55, 166,
        ]),
        U256::from_bytes_le([
            61, 35, 187, 30, 3, 253, 246, 110, 128, 198, 40, 137, 249, 162, 150, 19, 219, 73, 118,
            104, 73, 192, 200, 254, 139, 240, 179, 51, 248, 17, 90, 15,
        ]),
        U256::from_bytes_le([
            178, 81, 64, 145, 198, 147, 26, 30, 229, 138, 108, 99, 44, 55, 209, 220, 157, 176, 119,
            233, 150, 172, 100, 194, 250, 53, 118, 161, 241, 42, 75, 53,
        ]),
        U256::from_bytes_le([
            6, 199, 167, 83, 65, 12, 182, 181, 90, 247, 251, 39, 116, 191, 170, 93, 56, 198, 175,
            152, 49, 139, 47, 51, 22, 163, 48, 247, 155, 181, 117, 250,
        ]),
        U256::from_bytes_le([
            193, 104, 192, 143, 218, 249, 174, 186, 226, 227, 3, 233, 47, 101, 197, 149, 227, 226,
            2, 58, 68, 156, 75, 120, 68, 214, 134, 11, 100, 51, 3, 15,
        ]),
        U256::from_bytes_le([
            88, 181, 79, 189, 38, 149, 230, 247, 45, 103, 125, 222, 163, 105, 163, 81, 148, 191,
            177, 137, 77, 177, 35, 199, 142, 16, 142, 159, 97, 69, 102, 110,
        ]),
        U256::from_bytes_le([
            119, 107, 187, 103, 137, 158, 191, 83, 33, 253, 161, 3, 58, 181, 112, 34, 61, 175, 192,
            236, 202, 5, 17, 137, 142, 83, 186, 217, 65, 212, 117, 203,
        ]),
        U256::from_bytes_le([
            227, 40, 86, 57, 98, 107, 85, 81, 255, 152, 240, 213, 253, 170, 131, 165, 201, 41, 75,
            167, 124, 212, 137, 124, 173, 32, 12, 229, 95, 4, 252, 60,
        ]),
        U256::from_bytes_le([
            176, 226, 61, 30, 196, 214, 151, 145, 149, 210, 125, 167, 82, 161, 224, 174, 65, 197,
            223, 165, 109, 223, 55, 127, 203, 192, 170, 73, 59, 212, 127, 88,
        ]),
        U256::from_bytes_le([
            201, 35, 20, 184, 196, 234, 242, 237, 192, 160, 83, 88, 217, 254, 130, 42, 122, 237,
            164, 106, 137, 84, 137, 79, 223, 33, 213, 86, 142, 98, 21, 219,
        ]),
        U256::from_bytes_le([
            128, 157, 219, 183, 181, 70, 41, 190, 55, 123, 22, 187, 58, 70, 199, 20, 230, 22, 154,
            249, 50, 238, 240, 166, 166, 84, 166, 165, 154, 120, 15, 4,
        ]),
        U256::from_bytes_le([
            27, 155, 220, 238, 59, 201, 9, 2, 178, 172, 83, 47, 233, 5, 80, 170, 142, 68, 138, 142,
            139, 159, 120, 141, 128, 165, 131, 143, 240, 180, 200, 225,
        ]),
        U256::from_bytes_le([
            158, 38, 78, 66, 136, 106, 55, 118, 178, 238, 189, 197, 214, 78, 88, 137, 244, 188,
            123, 5, 20, 56, 210, 208, 190, 208, 21, 233, 193, 214, 200, 194,
        ]),
        U256::from_bytes_le([
            205, 169, 58, 23, 171, 7, 74, 208, 94, 2, 9, 44, 138, 103, 229, 115, 224, 177, 170, 49,
            67, 218, 152, 53, 183, 170, 132, 53, 233, 32, 52, 23,
        ]),
        U256::from_bytes_le([
            165, 200, 3, 80, 189, 116, 109, 222, 84, 127, 208, 162, 100, 14, 44, 14, 195, 233, 0,
            62, 71, 82, 44, 115, 68, 27, 81, 97, 196, 13, 28, 253,
        ]),
        U256::from_bytes_le([
            220, 46, 135, 204, 254, 87, 122, 47, 86, 173, 150, 227, 153, 198, 48, 180, 56, 221,
            123, 17, 118, 75, 190, 203, 217, 145, 138, 60, 7, 22, 62, 18,
        ]),
        U256::from_bytes_le([
            86, 106, 104, 181, 180, 96, 96, 27, 148, 195, 128, 156, 211, 59, 205, 30, 130, 19, 3,
            124, 243, 51, 27, 87, 166, 229, 186, 127, 214, 20, 211, 117,
        ]),
        U256::from_bytes_le([
            67, 25, 78, 184, 204, 203, 40, 21, 179, 236, 223, 93, 131, 13, 32, 146, 208, 189, 208,
            145, 209, 138, 142, 18, 50, 101, 150, 215, 154, 255, 28, 46,
        ]),
        U256::from_bytes_le([
            231, 244, 61, 70, 189, 71, 69, 27, 49, 131, 116, 168, 115, 136, 144, 80, 195, 121, 142,
            41, 200, 223, 29, 137, 48, 111, 162, 108, 115, 83, 126, 178,
        ]),
        U256::from_bytes_le([
            237, 137, 4, 148, 46, 5, 202, 196, 168, 27, 23, 3, 29, 33, 191, 181, 132, 106, 76, 1,
            101, 28, 58, 51, 85, 1, 166, 47, 164, 141, 25, 13,
        ]),
        U256::from_bytes_le([
            165, 59, 92, 211, 92, 138, 121, 182, 29, 226, 63, 161, 255, 61, 213, 52, 168, 165, 154,
            200, 209, 252, 113, 56, 69, 219, 61, 172, 57, 120, 238, 14,
        ]),
        U256::from_bytes_le([
            157, 43, 231, 255, 31, 104, 213, 7, 54, 250, 120, 30, 183, 226, 11, 220, 220, 183, 67,
            135, 237, 70, 89, 211, 244, 177, 202, 36, 98, 175, 65, 17,
        ]),
        U256::from_bytes_le([
            151, 154, 195, 178, 115, 103, 203, 239, 201, 251, 225, 200, 32, 133, 244, 3, 136, 74,
            163, 21, 219, 24, 95, 158, 145, 209, 64, 173, 223, 119, 158, 248,
        ]),
        U256::from_bytes_le([
            185, 220, 16, 62, 190, 30, 219, 31, 36, 19, 73, 191, 169, 9, 109, 143, 105, 202, 134,
            37, 55, 22, 119, 52, 146, 194, 224, 196, 51, 176, 158, 91,
        ]),
        U256::from_bytes_le([
            50, 72, 1, 59, 0, 109, 220, 138, 196, 145, 238, 135, 92, 97, 176, 133, 15, 222, 134,
            222, 1, 190, 7, 58, 134, 82, 252, 9, 112, 2, 90, 166,
        ]),
        U256::from_bytes_le([
            27, 221, 196, 110, 118, 131, 60, 14, 85, 65, 50, 128, 50, 84, 228, 108, 79, 33, 169,
            204, 150, 224, 184, 67, 50, 249, 224, 247, 121, 188, 123, 72,
        ]),
        U256::from_bytes_le([
            126, 173, 146, 22, 136, 123, 208, 175, 35, 221, 68, 242, 213, 84, 73, 39, 85, 13, 250,
            137, 201, 106, 151, 26, 93, 184, 226, 6, 181, 100, 204, 122,
        ]),
        U256::from_bytes_le([
            192, 236, 208, 51, 89, 252, 137, 130, 41, 105, 131, 37, 24, 217, 150, 244, 156, 232,
            184, 125, 48, 130, 82, 254, 108, 57, 80, 225, 84, 72, 215, 253,
        ]),
        U256::from_bytes_le([
            23, 196, 188, 79, 56, 180, 167, 11, 254, 50, 226, 118, 5, 35, 214, 91, 113, 70, 200,
            225, 155, 237, 85, 169, 194, 109, 97, 77, 232, 83, 31, 247,
        ]),
        U256::from_bytes_le([
            53, 127, 57, 195, 224, 103, 40, 226, 4, 193, 218, 246, 94, 45, 159, 34, 13, 86, 164,
            15, 18, 108, 97, 13, 73, 202, 66, 195, 246, 2, 157, 2,
        ]),
        U256::from_bytes_le([
            192, 85, 193, 195, 198, 7, 1, 224, 117, 156, 222, 48, 32, 163, 239, 128, 142, 187, 222,
            47, 137, 196, 245, 214, 228, 166, 252, 32, 193, 11, 94, 126,
        ]),
        U256::from_bytes_le([
            50, 66, 171, 189, 114, 125, 200, 128, 126, 189, 71, 26, 188, 179, 49, 129, 83, 97, 97,
            207, 185, 51, 36, 113, 245, 227, 0, 122, 203, 248, 20, 212,
        ]),
        U256::from_bytes_le([
            232, 34, 47, 67, 25, 110, 186, 182, 124, 98, 163, 239, 185, 251, 218, 227, 53, 127,
            230, 56, 224, 180, 98, 181, 131, 247, 118, 184, 149, 17, 194, 52,
        ]),
        U256::from_bytes_le([
            190, 144, 166, 167, 55, 113, 179, 202, 159, 155, 111, 150, 91, 8, 240, 138, 254, 193,
            30, 231, 171, 79, 78, 240, 110, 84, 80, 58, 57, 52, 144, 112,
        ]),
        U256::from_bytes_le([
            7, 229, 87, 17, 135, 252, 117, 45, 148, 250, 32, 219, 109, 251, 191, 123, 216, 191,
            218, 115, 193, 119, 38, 40, 174, 112, 228, 21, 35, 141, 217, 59,
        ]),
        U256::from_bytes_le([
            126, 149, 241, 84, 84, 186, 144, 3, 235, 140, 232, 181, 49, 151, 124, 249, 142, 232,
            72, 194, 218, 154, 76, 162, 115, 102, 163, 65, 41, 30, 103, 121,
        ]),
        U256::from_bytes_le([
            233, 138, 195, 83, 10, 172, 120, 245, 77, 228, 211, 65, 89, 119, 4, 21, 180, 46, 173,
            131, 147, 251, 181, 155, 240, 171, 148, 32, 222, 64, 236, 240,
        ]),
        U256::from_bytes_le([
            239, 4, 241, 20, 20, 47, 69, 183, 246, 46, 253, 11, 38, 128, 43, 144, 147, 71, 116,
            181, 177, 130, 213, 201, 235, 72, 140, 108, 34, 146, 239, 231,
        ]),
        U256::from_bytes_le([
            140, 20, 216, 96, 234, 252, 146, 38, 130, 218, 14, 49, 209, 54, 29, 101, 171, 125, 129,
            125, 12, 76, 121, 183, 196, 162, 115, 182, 216, 149, 142, 23,
        ]),
        U256::from_bytes_le([
            6, 6, 218, 202, 66, 74, 50, 244, 147, 76, 39, 220, 47, 224, 110, 192, 22, 151, 230,
            155, 110, 54, 189, 223, 53, 239, 181, 241, 227, 123, 30, 196,
        ]),
        U256::from_bytes_le([
            51, 124, 126, 41, 7, 193, 99, 56, 189, 194, 120, 99, 40, 168, 184, 148, 199, 48, 165,
            18, 50, 14, 144, 187, 70, 179, 101, 80, 116, 136, 88, 228,
        ]),
        U256::from_bytes_le([
            2, 126, 253, 199, 94, 126, 119, 27, 228, 86, 216, 155, 132, 114, 246, 107, 113, 42,
            145, 30, 116, 41, 22, 19, 203, 236, 117, 135, 200, 248, 15, 44,
        ]),
        U256::from_bytes_le([
            104, 196, 191, 71, 193, 220, 14, 171, 41, 174, 81, 197, 147, 61, 63, 84, 158, 35, 115,
            35, 163, 214, 125, 243, 91, 207, 246, 12, 241, 173, 100, 142,
        ]),
        U256::from_bytes_le([
            95, 145, 21, 229, 118, 20, 104, 255, 35, 205, 80, 255, 242, 105, 139, 253, 188, 140,
            143, 47, 251, 222, 99, 100, 29, 37, 253, 110, 199, 106, 15, 138,
        ]),
        U256::from_bytes_le([
            85, 251, 42, 189, 113, 70, 121, 127, 47, 23, 195, 158, 152, 225, 6, 143, 7, 126, 137,
            143, 31, 7, 48, 105, 10, 23, 74, 45, 73, 0, 100, 67,
        ]),
        U256::from_bytes_le([
            200, 203, 105, 246, 39, 37, 135, 40, 183, 40, 217, 30, 43, 252, 92, 19, 155, 15, 16,
            59, 57, 252, 134, 239, 80, 45, 69, 65, 174, 128, 40, 221,
        ]),
        U256::from_bytes_le([
            143, 254, 190, 196, 173, 21, 121, 212, 99, 91, 98, 243, 227, 129, 74, 127, 34, 116, 70,
            155, 66, 185, 148, 193, 187, 63, 9, 215, 186, 144, 74, 172,
        ]),
        U256::from_bytes_le([
            182, 23, 118, 170, 64, 177, 157, 84, 119, 173, 141, 219, 40, 202, 63, 45, 222, 65, 39,
            57, 101, 196, 184, 221, 120, 188, 239, 29, 223, 226, 245, 224,
        ]),
        U256::from_bytes_le([
            30, 247, 157, 105, 205, 82, 173, 35, 126, 134, 84, 34, 3, 125, 35, 212, 67, 100, 43,
            77, 180, 156, 167, 191, 41, 35, 218, 100, 90, 193, 140, 121,
        ]),
        U256::from_bytes_le([
            208, 104, 194, 231, 121, 241, 171, 145, 57, 65, 120, 173, 190, 143, 34, 152, 207, 213,
            167, 192, 150, 96, 14, 244, 141, 152, 27, 153, 135, 87, 89, 175,
        ]),
        U256::from_bytes_le([
            25, 212, 231, 192, 162, 188, 97, 246, 84, 66, 191, 224, 250, 99, 132, 89, 66, 207, 146,
            117, 169, 43, 62, 64, 239, 90, 134, 25, 11, 174, 11, 97,
        ]),
        U256::from_bytes_le([
            13, 141, 113, 244, 74, 16, 147, 245, 25, 30, 64, 144, 143, 241, 55, 247, 45, 157, 149,
            195, 119, 191, 221, 119, 98, 53, 30, 166, 174, 101, 44, 135,
        ]),
        U256::from_bytes_le([
            48, 224, 247, 203, 72, 105, 14, 186, 3, 122, 51, 15, 107, 70, 31, 175, 142, 213, 153,
            221, 55, 7, 134, 160, 254, 203, 168, 162, 14, 85, 73, 119,
        ]),
        U256::from_bytes_le([
            14, 184, 115, 22, 107, 208, 57, 123, 175, 61, 199, 3, 197, 212, 16, 2, 216, 180, 247,
            154, 159, 233, 33, 236, 174, 33, 182, 86, 61, 55, 159, 76,
        ]),
        U256::from_bytes_le([
            181, 151, 249, 109, 80, 51, 148, 110, 34, 62, 51, 242, 192, 15, 76, 34, 115, 235, 73,
            16, 84, 27, 188, 216, 91, 9, 119, 42, 103, 129, 41, 179,
        ]),
        U256::from_bytes_le([
            226, 179, 148, 185, 233, 254, 88, 186, 74, 58, 84, 178, 87, 79, 36, 49, 26, 228, 6,
            133, 228, 134, 92, 11, 77, 164, 254, 203, 46, 105, 84, 202,
        ]),
        U256::from_bytes_le([
            80, 107, 232, 140, 80, 166, 212, 154, 195, 64, 207, 131, 227, 237, 183, 15, 121, 226,
            31, 217, 58, 148, 92, 132, 66, 129, 195, 10, 148, 236, 147, 15,
        ]),
        U256::from_bytes_le([
            222, 229, 26, 117, 140, 92, 34, 20, 9, 206, 44, 153, 173, 59, 147, 66, 248, 30, 33, 53,
            91, 220, 15, 27, 45, 223, 211, 126, 244, 143, 142, 57,
        ]),
        U256::from_bytes_le([
            84, 132, 210, 131, 156, 210, 40, 24, 210, 5, 237, 18, 254, 14, 208, 13, 19, 47, 31,
            150, 135, 118, 248, 115, 168, 216, 148, 204, 24, 219, 234, 221,
        ]),
        U256::from_bytes_le([
            15, 24, 97, 95, 158, 104, 183, 33, 53, 51, 95, 113, 157, 225, 63, 105, 248, 224, 16,
            55, 36, 237, 52, 76, 92, 1, 125, 203, 15, 103, 135, 135,
        ]),
        U256::from_bytes_le([
            232, 116, 9, 108, 167, 119, 95, 12, 109, 43, 249, 56, 150, 167, 152, 247, 135, 125, 60,
            26, 214, 117, 78, 205, 60, 38, 23, 76, 9, 57, 189, 186,
        ]),
        U256::from_bytes_le([
            113, 40, 127, 190, 12, 179, 194, 27, 134, 150, 205, 229, 218, 215, 115, 43, 177, 192,
            189, 173, 157, 234, 43, 52, 207, 190, 72, 39, 175, 99, 214, 240,
        ]),
        U256::from_bytes_le([
            101, 150, 90, 110, 120, 26, 239, 184, 228, 128, 130, 174, 70, 211, 118, 69, 41, 11,
            227, 93, 5, 38, 153, 73, 164, 53, 132, 105, 215, 195, 113, 218,
        ]),
        U256::from_bytes_le([
            181, 188, 110, 19, 213, 185, 124, 106, 60, 69, 160, 10, 138, 88, 177, 178, 251, 114,
            118, 126, 18, 43, 181, 141, 75, 16, 2, 187, 21, 184, 194, 175,
        ]),
        U256::from_bytes_le([
            60, 8, 225, 177, 83, 214, 127, 35, 59, 247, 156, 56, 247, 134, 125, 189, 47, 233, 35,
            116, 4, 206, 148, 27, 38, 177, 202, 222, 82, 72, 94, 30,
        ]),
        U256::from_bytes_le([
            79, 11, 81, 223, 248, 44, 166, 44, 55, 53, 168, 196, 206, 89, 36, 31, 188, 43, 109,
            158, 46, 112, 158, 118, 1, 253, 59, 104, 199, 140, 121, 29,
        ]),
        U256::from_bytes_le([
            169, 61, 22, 137, 90, 53, 101, 232, 165, 174, 185, 209, 97, 101, 61, 27, 0, 178, 162,
            84, 235, 4, 129, 127, 29, 93, 0, 226, 76, 17, 4, 116,
        ]),
        U256::from_bytes_le([
            61, 162, 94, 54, 61, 183, 1, 69, 8, 151, 158, 53, 10, 69, 129, 169, 36, 200, 238, 141,
            90, 151, 99, 139, 188, 21, 30, 252, 161, 193, 53, 87,
        ]),
        U256::from_bytes_le([
            58, 126, 10, 126, 178, 224, 13, 12, 229, 135, 37, 234, 71, 229, 167, 85, 63, 150, 182,
            237, 200, 236, 177, 31, 3, 160, 219, 120, 185, 199, 91, 12,
        ]),
        U256::from_bytes_le([
            242, 34, 74, 125, 70, 160, 14, 67, 242, 215, 84, 236, 57, 88, 174, 28, 97, 158, 100,
            187, 127, 18, 164, 89, 226, 38, 157, 187, 236, 196, 237, 56,
        ]),
        U256::from_bytes_le([
            129, 202, 156, 39, 227, 215, 134, 248, 49, 43, 38, 239, 79, 152, 26, 227, 220, 136,
            150, 132, 76, 205, 226, 117, 232, 220, 247, 40, 79, 158, 89, 22,
        ]),
        U256::from_bytes_le([
            198, 10, 247, 43, 85, 42, 168, 124, 170, 228, 221, 4, 70, 174, 40, 9, 209, 133, 236,
            49, 26, 141, 185, 66, 71, 220, 209, 228, 158, 217, 123, 197,
        ]),
        U256::from_bytes_le([
            176, 96, 255, 20, 175, 196, 75, 123, 112, 128, 129, 123, 103, 85, 198, 211, 250, 210,
            178, 155, 157, 227, 75, 89, 40, 211, 86, 123, 95, 250, 174, 174,
        ]),
        U256::from_bytes_le([
            18, 31, 184, 232, 230, 52, 231, 202, 55, 22, 104, 21, 75, 225, 3, 230, 11, 11, 160,
            172, 44, 229, 17, 129, 196, 190, 13, 90, 142, 221, 60, 247,
        ]),
        U256::from_bytes_le([
            37, 225, 210, 183, 236, 227, 198, 7, 247, 111, 161, 78, 201, 89, 123, 61, 223, 208,
            149, 141, 32, 26, 142, 167, 158, 128, 152, 239, 80, 174, 140, 30,
        ]),
        U256::from_bytes_le([
            238, 240, 178, 239, 68, 197, 152, 136, 33, 3, 204, 163, 112, 233, 138, 4, 12, 11, 110,
            146, 252, 245, 188, 130, 203, 220, 209, 9, 46, 84, 162, 226,
        ]),
        U256::from_bytes_le([
            57, 77, 208, 186, 113, 81, 226, 245, 24, 216, 241, 35, 26, 72, 110, 181, 178, 14, 123,
            174, 133, 155, 78, 25, 150, 104, 30, 143, 169, 181, 147, 113,
        ]),
        U256::from_bytes_le([
            164, 101, 159, 104, 82, 98, 87, 1, 178, 90, 119, 251, 115, 149, 193, 210, 135, 221, 69,
            55, 43, 124, 96, 231, 135, 136, 44, 230, 217, 47, 140, 110,
        ]),
        U256::from_bytes_le([
            189, 160, 225, 107, 144, 63, 217, 132, 166, 241, 245, 51, 240, 33, 121, 150, 240, 190,
            80, 147, 169, 52, 92, 21, 67, 76, 88, 134, 189, 89, 98, 193,
        ]),
        U256::from_bytes_le([
            72, 139, 236, 26, 163, 213, 170, 143, 149, 60, 151, 59, 37, 222, 193, 157, 16, 99, 142,
            150, 11, 250, 34, 76, 163, 84, 172, 19, 128, 31, 21, 219,
        ]),
        U256::from_bytes_le([
            249, 52, 205, 122, 52, 157, 101, 213, 215, 71, 98, 131, 255, 37, 11, 140, 176, 75, 69,
            141, 178, 211, 90, 234, 42, 188, 5, 218, 14, 14, 122, 101,
        ]),
        U256::from_bytes_le([
            204, 117, 112, 177, 190, 135, 82, 196, 202, 0, 163, 190, 51, 110, 99, 8, 51, 92, 76,
            225, 102, 240, 158, 137, 206, 255, 220, 91, 242, 255, 85, 88,
        ]),
        U256::from_bytes_le([
            202, 13, 211, 36, 243, 62, 66, 83, 108, 187, 16, 62, 222, 79, 231, 251, 164, 16, 58,
            23, 33, 134, 34, 2, 64, 203, 237, 74, 18, 73, 151, 203,
        ]),
        U256::from_bytes_le([
            75, 85, 178, 81, 108, 162, 155, 241, 162, 92, 10, 81, 117, 155, 180, 200, 225, 175,
            124, 36, 58, 149, 234, 173, 145, 250, 233, 74, 217, 117, 80, 29,
        ]),
        U256::from_bytes_le([
            143, 235, 18, 85, 159, 80, 97, 229, 195, 136, 3, 110, 197, 24, 56, 241, 128, 83, 57,
            177, 47, 164, 70, 171, 173, 2, 216, 5, 123, 203, 137, 31,
        ]),
        U256::from_bytes_le([
            140, 205, 156, 66, 221, 46, 125, 95, 59, 226, 181, 225, 12, 78, 12, 112, 133, 187, 50,
            39, 87, 136, 136, 165, 254, 253, 168, 59, 153, 194, 184, 179,
        ]),
        U256::from_bytes_le([
            51, 24, 170, 249, 49, 178, 16, 29, 7, 250, 247, 238, 79, 17, 188, 164, 112, 32, 231,
            52, 167, 43, 173, 143, 3, 97, 59, 22, 136, 226, 220, 173,
        ]),
        U256::from_bytes_le([
            227, 45, 102, 239, 134, 64, 8, 168, 249, 89, 163, 68, 117, 60, 148, 250, 128, 154, 56,
            202, 234, 15, 44, 7, 244, 49, 103, 126, 242, 233, 57, 190,
        ]),
        U256::from_bytes_le([
            24, 40, 154, 139, 122, 182, 159, 177, 164, 11, 193, 69, 127, 90, 143, 94, 23, 202, 220,
            79, 63, 56, 102, 177, 30, 197, 100, 50, 194, 45, 182, 34,
        ]),
        U256::from_bytes_le([
            229, 115, 18, 157, 120, 117, 249, 44, 170, 193, 71, 5, 132, 50, 32, 79, 195, 28, 14,
            21, 180, 65, 169, 193, 172, 243, 205, 166, 86, 1, 106, 118,
        ]),
        U256::from_bytes_le([
            125, 100, 148, 198, 176, 206, 208, 3, 171, 119, 68, 255, 26, 225, 137, 175, 188, 15,
            56, 6, 111, 186, 19, 95, 12, 220, 242, 212, 27, 187, 52, 66,
        ]),
        U256::from_bytes_le([
            226, 188, 11, 13, 38, 48, 137, 80, 241, 212, 226, 219, 62, 120, 107, 173, 80, 120, 142,
            211, 66, 199, 162, 219, 237, 186, 99, 65, 103, 255, 85, 31,
        ]),
        U256::from_bytes_le([
            124, 122, 117, 14, 106, 198, 66, 66, 254, 28, 211, 68, 89, 32, 77, 187, 164, 216, 32,
            74, 239, 25, 38, 159, 20, 62, 232, 126, 166, 29, 11, 255,
        ]),
        U256::from_bytes_le([
            209, 134, 26, 47, 226, 26, 93, 55, 5, 68, 215, 77, 224, 94, 105, 205, 198, 122, 126,
            207, 63, 207, 107, 114, 69, 12, 10, 225, 16, 176, 83, 195,
        ]),
        U256::from_bytes_le([
            241, 202, 235, 165, 107, 42, 21, 11, 21, 137, 241, 209, 180, 106, 132, 49, 239, 60, 6,
            56, 223, 252, 88, 35, 46, 174, 229, 227, 116, 52, 94, 234,
        ]),
        U256::from_bytes_le([
            48, 76, 79, 239, 46, 227, 188, 217, 88, 249, 50, 214, 202, 105, 96, 121, 183, 51, 31,
            240, 58, 7, 139, 60, 64, 17, 70, 205, 178, 89, 32, 249,
        ]),
        U256::from_bytes_le([
            72, 183, 25, 152, 22, 44, 54, 109, 234, 127, 143, 250, 239, 228, 131, 106, 149, 47,
            250, 35, 15, 204, 238, 58, 237, 104, 210, 74, 61, 13, 175, 201,
        ]),
        U256::from_bytes_le([
            145, 219, 118, 4, 71, 194, 51, 139, 206, 235, 50, 130, 205, 21, 192, 34, 100, 144, 53,
            2, 91, 86, 232, 201, 169, 46, 246, 64, 49, 237, 219, 201,
        ]),
        U256::from_bytes_le([
            10, 92, 38, 63, 212, 153, 199, 248, 185, 63, 212, 163, 203, 151, 56, 75, 28, 182, 236,
            72, 164, 193, 135, 5, 96, 191, 19, 124, 16, 51, 165, 144,
        ]),
        U256::from_bytes_le([
            30, 15, 196, 44, 86, 137, 247, 176, 30, 248, 73, 133, 80, 168, 108, 206, 198, 0, 13,
            186, 223, 175, 211, 146, 25, 120, 123, 59, 59, 158, 79, 28,
        ]),
        U256::from_bytes_le([
            13, 109, 34, 100, 111, 200, 53, 47, 243, 120, 212, 114, 74, 15, 150, 132, 177, 77, 213,
            179, 112, 48, 225, 104, 102, 48, 203, 212, 122, 12, 36, 133,
        ]),
        U256::from_bytes_le([
            190, 5, 243, 142, 196, 96, 197, 121, 241, 88, 44, 46, 107, 55, 45, 202, 10, 50, 5, 157,
            143, 5, 2, 206, 74, 112, 74, 246, 38, 95, 98, 181,
        ]),
        U256::from_bytes_le([
            227, 134, 173, 58, 42, 115, 187, 113, 53, 241, 192, 245, 76, 175, 58, 132, 191, 139,
            203, 251, 48, 44, 177, 184, 55, 194, 96, 233, 62, 187, 204, 36,
        ]),
        U256::from_bytes_le([
            255, 156, 57, 46, 244, 180, 255, 195, 152, 181, 238, 0, 133, 54, 14, 20, 84, 47, 218,
            32, 176, 178, 130, 56, 55, 202, 150, 89, 132, 3, 187, 40,
        ]),
        U256::from_bytes_le([
            205, 166, 234, 86, 15, 7, 97, 139, 215, 233, 69, 160, 34, 191, 238, 220, 237, 102, 183,
            117, 141, 209, 82, 251, 177, 74, 253, 58, 195, 246, 57, 117,
        ]),
        U256::from_bytes_le([
            214, 245, 27, 238, 108, 86, 170, 235, 11, 57, 234, 149, 208, 157, 208, 220, 117, 123,
            204, 157, 148, 73, 248, 132, 47, 186, 182, 70, 48, 151, 34, 182,
        ]),
        U256::from_bytes_le([
            3, 147, 61, 129, 186, 110, 4, 79, 0, 255, 64, 199, 18, 132, 152, 22, 117, 50, 42, 15,
            210, 252, 199, 173, 170, 235, 101, 133, 85, 89, 86, 133,
        ]),
        U256::from_bytes_le([
            174, 51, 28, 13, 80, 134, 144, 186, 244, 4, 194, 184, 123, 197, 7, 59, 47, 77, 53, 201,
            102, 171, 236, 15, 27, 219, 229, 103, 82, 173, 77, 9,
        ]),
        U256::from_bytes_le([
            222, 245, 105, 245, 144, 35, 15, 211, 154, 206, 222, 173, 190, 149, 186, 83, 175, 100,
            9, 112, 102, 23, 157, 120, 185, 213, 232, 34, 49, 5, 202, 65,
        ]),
        U256::from_bytes_le([
            250, 73, 28, 158, 206, 140, 232, 214, 98, 157, 10, 242, 96, 105, 27, 60, 18, 42, 176,
            136, 255, 244, 83, 183, 19, 58, 38, 106, 198, 86, 60, 206,
        ]),
        U256::from_bytes_le([
            207, 78, 53, 59, 3, 49, 20, 172, 48, 199, 84, 133, 244, 182, 4, 216, 132, 171, 8, 88,
            18, 237, 62, 60, 204, 230, 230, 79, 141, 158, 13, 52,
        ]),
        U256::from_bytes_le([
            186, 83, 102, 71, 52, 60, 176, 7, 210, 136, 71, 133, 89, 107, 68, 199, 93, 251, 20,
            171, 82, 174, 81, 105, 18, 18, 85, 226, 106, 244, 16, 56,
        ]),
        U256::from_bytes_le([
            65, 177, 198, 23, 11, 163, 236, 230, 106, 50, 35, 198, 210, 252, 49, 57, 30, 156, 47,
            162, 143, 33, 43, 238, 76, 84, 155, 126, 207, 80, 217, 124,
        ]),
        U256::from_bytes_le([
            73, 10, 103, 156, 74, 171, 94, 15, 153, 157, 142, 156, 161, 112, 108, 111, 34, 157,
            124, 76, 237, 125, 130, 45, 39, 141, 37, 65, 86, 88, 43, 190,
        ]),
        U256::from_bytes_le([
            85, 183, 89, 0, 192, 29, 62, 87, 141, 124, 44, 67, 195, 142, 118, 192, 192, 140, 14,
            148, 237, 244, 170, 105, 167, 138, 172, 145, 128, 136, 221, 102,
        ]),
        U256::from_bytes_le([
            2, 129, 176, 155, 3, 73, 44, 218, 217, 52, 94, 210, 227, 230, 214, 223, 155, 240, 67,
            171, 176, 203, 51, 146, 163, 255, 140, 95, 197, 17, 89, 31,
        ]),
        U256::from_bytes_le([
            232, 172, 172, 197, 253, 90, 63, 35, 10, 137, 8, 116, 56, 123, 127, 103, 224, 84, 9,
            110, 156, 208, 191, 172, 40, 234, 229, 185, 59, 110, 15, 103,
        ]),
        U256::from_bytes_le([
            38, 214, 220, 54, 133, 72, 140, 188, 147, 170, 247, 149, 147, 45, 150, 103, 81, 185,
            163, 184, 220, 60, 216, 152, 120, 201, 38, 123, 206, 2, 207, 137,
        ]),
        U256::from_bytes_le([
            49, 178, 177, 38, 204, 253, 161, 79, 85, 47, 138, 48, 178, 115, 107, 237, 30, 6, 16,
            43, 21, 124, 152, 239, 180, 79, 69, 229, 177, 2, 200, 237,
        ]),
        U256::from_bytes_le([
            131, 35, 63, 55, 200, 43, 236, 93, 212, 202, 53, 7, 143, 22, 186, 85, 0, 219, 213, 10,
            38, 214, 107, 185, 141, 19, 76, 173, 137, 68, 221, 224,
        ]),
        U256::from_bytes_le([
            225, 8, 132, 2, 143, 229, 74, 244, 104, 158, 56, 32, 65, 250, 69, 197, 241, 159, 188,
            157, 22, 115, 183, 80, 153, 254, 117, 239, 87, 67, 121, 119,
        ]),
        U256::from_bytes_le([
            69, 75, 107, 156, 122, 72, 127, 216, 12, 55, 183, 54, 171, 228, 45, 5, 42, 83, 105,
            234, 119, 110, 121, 249, 95, 99, 127, 161, 153, 123, 223, 202,
        ]),
        U256::from_bytes_le([
            8, 112, 90, 33, 135, 170, 251, 123, 77, 38, 122, 245, 212, 21, 27, 154, 58, 198, 76,
            107, 235, 209, 255, 192, 196, 141, 224, 130, 229, 146, 52, 189,
        ]),
        U256::from_bytes_le([
            42, 44, 58, 149, 161, 195, 102, 133, 252, 81, 7, 164, 145, 222, 100, 179, 67, 175, 20,
            144, 160, 117, 236, 154, 227, 99, 115, 127, 19, 36, 211, 3,
        ]),
        U256::from_bytes_le([
            244, 3, 16, 185, 5, 122, 226, 42, 169, 60, 129, 143, 117, 2, 217, 214, 161, 130, 232,
            108, 187, 216, 163, 179, 31, 226, 67, 159, 91, 108, 179, 175,
        ]),
        U256::from_bytes_le([
            255, 62, 88, 118, 83, 204, 110, 202, 118, 116, 142, 238, 32, 109, 187, 226, 136, 51,
            84, 116, 159, 59, 116, 70, 3, 29, 193, 70, 251, 46, 84, 77,
        ]),
        U256::from_bytes_le([
            140, 156, 175, 22, 194, 138, 248, 99, 214, 24, 217, 110, 154, 40, 161, 132, 56, 106,
            122, 226, 133, 248, 130, 191, 165, 118, 129, 247, 48, 203, 165, 80,
        ]),
        U256::from_bytes_le([
            129, 79, 162, 23, 144, 21, 122, 89, 42, 129, 220, 50, 227, 79, 74, 144, 165, 95, 72,
            86, 93, 163, 70, 32, 39, 192, 190, 117, 15, 125, 125, 12,
        ]),
        U256::from_bytes_le([
            28, 33, 174, 96, 214, 93, 197, 212, 207, 81, 49, 64, 104, 38, 47, 137, 209, 160, 186,
            252, 126, 52, 248, 114, 199, 88, 189, 41, 152, 90, 212, 165,
        ]),
        U256::from_bytes_le([
            151, 85, 25, 239, 158, 58, 161, 110, 125, 64, 89, 158, 209, 112, 29, 167, 63, 114, 161,
            118, 97, 124, 170, 106, 210, 34, 175, 59, 165, 142, 144, 3,
        ]),
        U256::from_bytes_le([
            193, 5, 138, 24, 134, 217, 165, 52, 117, 73, 8, 146, 157, 64, 234, 53, 22, 35, 184,
            174, 122, 180, 255, 110, 216, 80, 95, 120, 192, 59, 38, 167,
        ]),
        U256::from_bytes_le([
            112, 41, 5, 2, 200, 50, 190, 216, 156, 52, 29, 234, 60, 103, 237, 165, 146, 146, 102,
            43, 36, 119, 41, 77, 140, 38, 210, 244, 120, 21, 185, 88,
        ]),
        U256::from_bytes_le([
            241, 236, 185, 116, 7, 161, 38, 117, 34, 133, 100, 187, 140, 158, 94, 12, 69, 211, 158,
            80, 68, 20, 171, 167, 150, 172, 176, 32, 204, 141, 235, 140,
        ]),
        U256::from_bytes_le([
            37, 170, 198, 64, 94, 39, 74, 55, 48, 225, 90, 106, 116, 169, 156, 26, 171, 86, 54, 57,
            108, 151, 17, 19, 185, 201, 24, 64, 204, 117, 54, 136,
        ]),
        U256::from_bytes_le([
            241, 110, 193, 155, 99, 110, 97, 43, 69, 146, 24, 192, 183, 9, 162, 98, 62, 139, 106,
            100, 137, 139, 180, 143, 221, 40, 103, 142, 115, 102, 12, 218,
        ]),
        U256::from_bytes_le([
            74, 48, 136, 4, 115, 96, 79, 237, 226, 153, 234, 226, 18, 122, 143, 186, 123, 147, 23,
            167, 133, 172, 247, 188, 54, 142, 164, 109, 26, 105, 223, 201,
        ]),
        U256::from_bytes_le([
            194, 161, 19, 99, 101, 192, 216, 94, 214, 51, 229, 164, 129, 116, 244, 136, 93, 212,
            90, 32, 132, 155, 114, 23, 204, 127, 118, 245, 214, 171, 40, 193,
        ]),
        U256::from_bytes_le([
            162, 37, 69, 241, 180, 107, 167, 164, 68, 173, 112, 72, 245, 61, 31, 112, 60, 241, 162,
            169, 229, 123, 69, 94, 72, 66, 139, 242, 94, 20, 164, 187,
        ]),
        U256::from_bytes_le([
            51, 39, 102, 56, 159, 204, 138, 160, 101, 50, 50, 214, 14, 137, 153, 42, 131, 253, 231,
            60, 60, 84, 119, 27, 26, 123, 41, 104, 221, 202, 95, 229,
        ]),
        U256::from_bytes_le([
            223, 78, 192, 88, 183, 54, 32, 144, 63, 193, 30, 122, 99, 168, 117, 68, 9, 93, 235,
            215, 52, 19, 245, 39, 79, 86, 222, 247, 3, 116, 199, 104,
        ]),
        U256::from_bytes_le([
            71, 82, 194, 18, 160, 195, 15, 212, 177, 100, 245, 91, 29, 137, 125, 168, 108, 51, 158,
            22, 237, 128, 4, 50, 11, 127, 95, 6, 115, 21, 75, 236,
        ]),
        U256::from_bytes_le([
            193, 98, 57, 33, 58, 158, 206, 242, 252, 234, 202, 254, 70, 238, 165, 176, 162, 113,
            155, 195, 30, 130, 253, 78, 132, 105, 153, 68, 49, 150, 231, 166,
        ]),
        U256::from_bytes_le([
            224, 224, 163, 170, 18, 80, 85, 142, 133, 50, 38, 191, 228, 88, 135, 137, 246, 251, 90,
            173, 58, 146, 113, 140, 13, 73, 203, 44, 191, 250, 104, 19,
        ]),
        U256::from_bytes_le([
            157, 212, 112, 255, 239, 91, 53, 109, 211, 56, 73, 168, 16, 11, 90, 111, 205, 194, 180,
            199, 15, 167, 169, 117, 145, 245, 142, 198, 37, 230, 46, 253,
        ]),
        U256::from_bytes_le([
            147, 70, 140, 58, 163, 196, 193, 104, 42, 154, 52, 203, 1, 218, 243, 237, 87, 142, 151,
            100, 153, 85, 68, 98, 224, 37, 121, 8, 219, 52, 237, 199,
        ]),
        U256::from_bytes_le([
            145, 41, 148, 121, 215, 225, 114, 188, 199, 200, 162, 45, 181, 137, 20, 19, 215, 143,
            72, 230, 70, 208, 182, 215, 195, 139, 35, 17, 150, 188, 254, 135,
        ]),
        U256::from_bytes_le([
            35, 131, 185, 137, 16, 53, 31, 29, 94, 93, 211, 224, 216, 243, 93, 199, 245, 208, 136,
            81, 245, 0, 146, 151, 235, 250, 223, 150, 173, 170, 144, 153,
        ]),
        U256::from_bytes_le([
            52, 93, 19, 222, 29, 145, 83, 231, 124, 88, 112, 61, 165, 168, 181, 76, 97, 218, 133,
            22, 155, 7, 68, 29, 29, 104, 81, 8, 93, 79, 117, 126,
        ]),
        U256::from_bytes_le([
            60, 204, 67, 211, 121, 155, 51, 131, 73, 70, 164, 198, 78, 200, 30, 106, 137, 199, 69,
            248, 95, 1, 59, 248, 228, 143, 199, 83, 84, 171, 19, 27,
        ]),
        U256::from_bytes_le([
            140, 171, 198, 145, 4, 109, 23, 136, 47, 53, 11, 95, 70, 92, 52, 177, 1, 41, 242, 255,
            138, 60, 190, 168, 71, 95, 181, 181, 51, 128, 91, 90,
        ]),
        U256::from_bytes_le([
            78, 21, 20, 176, 85, 31, 119, 36, 118, 191, 31, 62, 33, 130, 122, 66, 234, 176, 99, 51,
            169, 200, 145, 236, 40, 3, 201, 134, 79, 38, 110, 196,
        ]),
        U256::from_bytes_le([
            143, 204, 122, 84, 69, 160, 27, 24, 15, 118, 255, 196, 31, 198, 184, 164, 7, 157, 156,
            65, 68, 121, 205, 145, 215, 94, 141, 237, 100, 60, 121, 78,
        ]),
        U256::from_bytes_le([
            202, 229, 114, 110, 100, 205, 79, 30, 149, 125, 220, 196, 88, 195, 23, 238, 69, 110, 3,
            60, 172, 15, 147, 141, 202, 39, 83, 219, 173, 53, 34, 42,
        ]),
        U256::from_bytes_le([
            183, 18, 8, 169, 21, 184, 236, 125, 90, 146, 117, 32, 49, 84, 0, 94, 4, 132, 135, 169,
            102, 244, 149, 144, 249, 209, 117, 24, 108, 14, 141, 186,
        ]),
        U256::from_bytes_le([
            47, 95, 232, 170, 180, 149, 235, 243, 51, 197, 150, 226, 118, 205, 75, 120, 15, 148,
            167, 82, 103, 33, 14, 247, 146, 243, 196, 80, 65, 51, 157, 115,
        ]),
        U256::from_bytes_le([
            174, 161, 80, 170, 80, 239, 129, 75, 250, 140, 47, 101, 241, 192, 242, 246, 78, 60,
            187, 183, 36, 27, 36, 132, 121, 80, 71, 102, 5, 223, 204, 133,
        ]),
        U256::from_bytes_le([
            73, 104, 180, 124, 212, 170, 156, 93, 245, 166, 70, 85, 152, 181, 14, 163, 240, 23,
            138, 248, 209, 63, 106, 167, 45, 211, 238, 117, 83, 87, 125, 37,
        ]),
        U256::from_bytes_le([
            178, 125, 109, 74, 73, 18, 200, 51, 104, 21, 12, 145, 83, 188, 209, 59, 245, 113, 87,
            196, 22, 17, 39, 220, 191, 157, 65, 33, 215, 97, 30, 132,
        ]),
        U256::from_bytes_le([
            90, 90, 154, 35, 110, 116, 154, 39, 192, 109, 80, 167, 97, 45, 34, 163, 209, 16, 248,
            120, 76, 11, 222, 64, 147, 55, 82, 109, 117, 3, 228, 19,
        ]),
        U256::from_bytes_le([
            206, 227, 78, 114, 141, 123, 114, 61, 62, 100, 210, 185, 42, 43, 203, 90, 20, 49, 87,
            246, 241, 16, 56, 134, 74, 149, 103, 87, 232, 15, 13, 184,
        ]),
        U256::from_bytes_le([
            5, 210, 96, 250, 92, 132, 229, 248, 173, 227, 178, 110, 66, 136, 239, 84, 44, 181, 31,
            219, 170, 16, 216, 123, 62, 24, 130, 14, 240, 233, 141, 109,
        ]),
        U256::from_bytes_le([
            203, 219, 132, 162, 125, 178, 253, 207, 59, 232, 120, 116, 69, 144, 76, 252, 191, 209,
            217, 50, 72, 110, 175, 0, 2, 53, 200, 175, 192, 42, 20, 159,
        ]),
        U256::from_bytes_le([
            198, 72, 236, 2, 242, 39, 250, 167, 160, 203, 2, 202, 158, 14, 193, 137, 50, 57, 125,
            107, 62, 136, 43, 140, 154, 76, 217, 194, 206, 87, 248, 175,
        ]),
        U256::from_bytes_le([
            247, 144, 5, 211, 15, 60, 82, 82, 146, 187, 222, 24, 133, 71, 155, 241, 58, 12, 171,
            130, 79, 192, 195, 21, 153, 149, 36, 68, 72, 2, 34, 6,
        ]),
        U256::from_bytes_le([
            163, 198, 8, 91, 23, 220, 242, 3, 14, 129, 211, 172, 72, 224, 45, 181, 116, 156, 90,
            58, 182, 71, 115, 155, 83, 217, 119, 250, 81, 167, 151, 123,
        ]),
        U256::from_bytes_le([
            1, 207, 98, 216, 243, 140, 202, 237, 210, 144, 215, 222, 115, 57, 76, 64, 220, 215, 48,
            148, 168, 148, 25, 77, 67, 118, 105, 253, 113, 141, 111, 156,
        ]),
        U256::from_bytes_le([
            69, 242, 182, 197, 121, 148, 56, 214, 168, 29, 179, 226, 201, 159, 82, 140, 129, 60,
            45, 20, 19, 46, 34, 184, 159, 0, 89, 29, 32, 66, 80, 231,
        ]),
        U256::from_bytes_le([
            181, 106, 202, 62, 96, 36, 53, 158, 217, 241, 131, 112, 231, 5, 34, 186, 6, 36, 90,
            229, 233, 84, 209, 168, 192, 240, 93, 53, 184, 130, 10, 154,
        ]),
        U256::from_bytes_le([
            87, 176, 242, 64, 51, 195, 201, 14, 235, 180, 22, 38, 148, 202, 225, 186, 170, 23, 92,
            62, 238, 247, 247, 175, 20, 121, 181, 85, 54, 207, 120, 252,
        ]),
        U256::from_bytes_le([
            49, 117, 89, 220, 46, 69, 129, 109, 12, 44, 173, 212, 13, 71, 180, 160, 212, 69, 134,
            238, 78, 6, 148, 251, 81, 28, 207, 146, 245, 58, 230, 202,
        ]),
        U256::from_bytes_le([
            120, 232, 244, 252, 98, 165, 64, 71, 207, 85, 248, 181, 157, 199, 141, 203, 169, 120,
            237, 151, 102, 24, 63, 186, 28, 55, 160, 162, 245, 123, 77, 160,
        ]),
        U256::from_bytes_le([
            143, 161, 66, 3, 56, 35, 233, 91, 139, 59, 161, 50, 166, 249, 73, 24, 108, 200, 117,
            225, 214, 74, 70, 184, 24, 112, 47, 148, 8, 117, 40, 158,
        ]),
        U256::from_bytes_le([
            147, 197, 143, 19, 130, 229, 78, 10, 14, 10, 50, 215, 114, 8, 141, 60, 36, 70, 169, 44,
            169, 85, 236, 39, 110, 44, 10, 150, 242, 130, 65, 115,
        ]),
        U256::from_bytes_le([
            109, 79, 114, 158, 102, 107, 18, 79, 182, 27, 78, 93, 56, 210, 189, 180, 203, 207, 220,
            112, 200, 75, 55, 164, 105, 34, 77, 83, 59, 38, 220, 232,
        ]),
        U256::from_bytes_le([
            49, 197, 118, 216, 40, 181, 168, 126, 120, 231, 121, 11, 118, 28, 44, 51, 181, 115,
            212, 94, 215, 124, 226, 219, 138, 88, 99, 213, 130, 242, 14, 102,
        ]),
        U256::from_bytes_le([
            151, 139, 237, 149, 88, 133, 108, 160, 65, 31, 72, 240, 74, 18, 27, 223, 146, 214, 110,
            160, 46, 180, 32, 137, 162, 9, 32, 229, 191, 238, 154, 175,
        ]),
        U256::from_bytes_le([
            43, 4, 151, 233, 55, 212, 134, 119, 119, 80, 247, 182, 176, 20, 143, 120, 92, 255, 131,
            22, 244, 186, 148, 92, 137, 142, 118, 23, 46, 34, 251, 80,
        ]),
        U256::from_bytes_le([
            122, 243, 77, 211, 178, 132, 140, 207, 184, 244, 179, 3, 11, 89, 36, 23, 133, 10, 162,
            44, 187, 118, 156, 23, 196, 90, 163, 106, 223, 162, 32, 191,
        ]),
        U256::from_bytes_le([
            243, 213, 26, 213, 174, 18, 80, 168, 39, 233, 125, 179, 30, 138, 34, 155, 252, 127,
            221, 176, 16, 85, 55, 141, 77, 202, 255, 93, 44, 138, 42, 107,
        ]),
        U256::from_bytes_le([
            88, 120, 84, 68, 107, 112, 158, 212, 0, 145, 153, 126, 213, 251, 213, 179, 101, 137,
            149, 165, 11, 67, 118, 254, 59, 89, 106, 47, 168, 206, 188, 113,
        ]),
        U256::from_bytes_le([
            78, 190, 239, 61, 101, 139, 84, 211, 244, 8, 53, 49, 179, 212, 96, 216, 241, 36, 56,
            91, 97, 221, 153, 134, 187, 66, 210, 152, 181, 70, 104, 252,
        ]),
        U256::from_bytes_le([
            222, 87, 23, 88, 195, 108, 5, 130, 227, 194, 176, 134, 159, 33, 9, 78, 48, 187, 92, 22,
            253, 10, 68, 185, 52, 92, 109, 202, 241, 98, 227, 167,
        ]),
        U256::from_bytes_le([
            162, 157, 163, 24, 67, 160, 22, 210, 145, 44, 122, 34, 74, 117, 35, 65, 92, 240, 16,
            126, 40, 4, 16, 253, 33, 222, 44, 117, 103, 147, 161, 31,
        ]),
        U256::from_bytes_le([
            231, 82, 39, 56, 50, 183, 163, 15, 151, 155, 5, 15, 164, 246, 3, 123, 112, 91, 205,
            185, 204, 140, 118, 169, 84, 180, 245, 248, 99, 39, 233, 252,
        ]),
        U256::from_bytes_le([
            63, 61, 170, 186, 248, 38, 104, 29, 227, 180, 32, 170, 127, 217, 25, 161, 23, 7, 80,
            24, 73, 102, 171, 25, 243, 35, 3, 153, 114, 212, 129, 127,
        ]),
        U256::from_bytes_le([
            255, 135, 128, 51, 245, 60, 84, 32, 192, 244, 254, 190, 194, 157, 162, 30, 218, 139,
            146, 144, 153, 237, 244, 253, 100, 194, 198, 143, 29, 54, 78, 249,
        ]),
        U256::from_bytes_le([
            145, 154, 244, 42, 89, 28, 117, 152, 117, 65, 79, 250, 206, 194, 207, 36, 112, 47, 106,
            119, 48, 68, 78, 28, 222, 69, 216, 169, 69, 75, 105, 235,
        ]),
        U256::from_bytes_le([
            143, 66, 252, 236, 18, 203, 132, 158, 152, 76, 44, 107, 71, 179, 151, 9, 9, 51, 108,
            38, 190, 84, 65, 21, 193, 90, 194, 58, 74, 215, 34, 78,
        ]),
        U256::from_bytes_le([
            145, 252, 151, 17, 168, 17, 39, 197, 249, 153, 165, 175, 21, 205, 64, 213, 19, 20, 217,
            239, 129, 182, 189, 109, 62, 159, 210, 252, 69, 218, 111, 170,
        ]),
        U256::from_bytes_le([
            12, 146, 226, 62, 152, 150, 242, 123, 235, 28, 188, 175, 243, 132, 235, 127, 157, 172,
            211, 108, 110, 117, 67, 201, 185, 60, 226, 210, 34, 56, 250, 160,
        ]),
        U256::from_bytes_le([
            23, 113, 27, 3, 67, 109, 159, 201, 38, 118, 143, 99, 209, 165, 120, 18, 75, 205, 95,
            119, 112, 59, 132, 180, 238, 24, 132, 156, 45, 252, 15, 12,
        ]),
        U256::from_bytes_le([
            94, 165, 236, 109, 213, 135, 100, 200, 64, 182, 240, 80, 36, 0, 222, 108, 182, 207, 21,
            194, 125, 57, 12, 120, 168, 203, 65, 34, 97, 92, 61, 70,
        ]),
        U256::from_bytes_le([
            31, 7, 93, 27, 198, 107, 49, 144, 149, 206, 163, 146, 75, 38, 142, 195, 234, 100, 41,
            194, 229, 75, 187, 179, 178, 52, 243, 128, 51, 156, 41, 241,
        ]),
        U256::from_bytes_le([
            66, 160, 212, 95, 147, 190, 36, 173, 204, 92, 155, 198, 80, 50, 154, 0, 146, 249, 55,
            90, 242, 6, 47, 255, 24, 55, 191, 40, 166, 75, 160, 126,
        ]),
        U256::from_bytes_le([
            100, 91, 204, 111, 226, 214, 142, 31, 135, 35, 108, 119, 101, 106, 188, 103, 137, 187,
            55, 76, 87, 227, 122, 197, 117, 9, 126, 112, 144, 135, 19, 43,
        ]),
        U256::from_bytes_le([
            142, 157, 68, 175, 24, 198, 29, 34, 78, 128, 192, 196, 125, 86, 134, 142, 178, 189,
            219, 45, 59, 139, 20, 231, 174, 39, 157, 170, 185, 71, 139, 63,
        ]),
        U256::from_bytes_le([
            215, 49, 192, 91, 214, 241, 61, 118, 149, 231, 93, 148, 229, 86, 15, 166, 104, 92, 2,
            193, 103, 170, 40, 71, 165, 4, 71, 108, 182, 218, 133, 122,
        ]),
        U256::from_bytes_le([
            144, 222, 220, 207, 42, 128, 103, 141, 51, 125, 227, 202, 30, 202, 239, 44, 222, 81,
            116, 110, 24, 227, 131, 29, 144, 150, 235, 136, 49, 211, 144, 128,
        ]),
        U256::from_bytes_le([
            105, 136, 15, 199, 96, 132, 166, 1, 254, 68, 135, 112, 56, 180, 147, 53, 188, 37, 138,
            16, 74, 185, 144, 189, 91, 235, 20, 120, 170, 54, 106, 149,
        ]),
        U256::from_bytes_le([
            165, 37, 184, 115, 68, 116, 237, 154, 76, 135, 219, 25, 181, 238, 26, 49, 110, 204,
            152, 192, 173, 51, 99, 244, 125, 100, 121, 53, 236, 152, 20, 243,
        ]),
        U256::from_bytes_le([
            110, 135, 117, 38, 29, 204, 72, 14, 194, 118, 24, 226, 34, 202, 39, 231, 169, 123, 194,
            67, 31, 77, 242, 231, 63, 29, 85, 86, 238, 159, 28, 135,
        ]),
        U256::from_bytes_le([
            34, 250, 231, 230, 175, 135, 24, 104, 129, 61, 148, 137, 197, 133, 98, 114, 142, 229,
            14, 3, 61, 77, 50, 5, 19, 234, 197, 252, 109, 61, 255, 121,
        ]),
        U256::from_bytes_le([
            6, 38, 49, 79, 167, 28, 192, 118, 78, 46, 8, 63, 50, 218, 200, 217, 120, 250, 78, 67,
            71, 32, 72, 101, 7, 179, 192, 202, 56, 108, 21, 47,
        ]),
        U256::from_bytes_le([
            142, 3, 154, 6, 197, 46, 237, 212, 203, 34, 49, 11, 169, 19, 91, 229, 218, 163, 28,
            214, 64, 208, 84, 89, 153, 38, 69, 253, 89, 211, 56, 60,
        ]),
        U256::from_bytes_le([
            163, 44, 215, 192, 124, 168, 30, 41, 38, 173, 58, 222, 95, 23, 202, 25, 178, 206, 163,
            98, 122, 84, 33, 194, 234, 33, 111, 79, 70, 141, 165, 173,
        ]),
        U256::from_bytes_le([
            211, 134, 159, 133, 103, 208, 48, 201, 8, 53, 88, 82, 195, 28, 204, 254, 218, 255, 227,
            185, 39, 19, 11, 111, 99, 67, 76, 62, 133, 81, 171, 122,
        ]),
        U256::from_bytes_le([
            255, 40, 98, 201, 98, 109, 15, 225, 28, 255, 200, 122, 240, 167, 87, 37, 142, 54, 44,
            187, 14, 202, 46, 217, 207, 166, 61, 170, 186, 229, 14, 159,
        ]),
        U256::from_bytes_le([
            39, 109, 255, 98, 1, 6, 198, 66, 203, 56, 137, 33, 189, 198, 44, 200, 181, 197, 203,
            124, 170, 154, 181, 10, 45, 215, 97, 71, 49, 156, 217, 35,
        ]),
        U256::from_bytes_le([
            239, 107, 215, 107, 248, 103, 196, 93, 234, 161, 156, 53, 38, 123, 253, 71, 110, 80,
            100, 11, 101, 137, 97, 11, 8, 121, 215, 114, 177, 70, 134, 233,
        ]),
        U256::from_bytes_le([
            48, 125, 92, 128, 206, 66, 183, 18, 118, 132, 24, 93, 24, 46, 153, 43, 177, 132, 95,
            79, 3, 51, 50, 5, 15, 102, 77, 18, 2, 113, 89, 212,
        ]),
        U256::from_bytes_le([
            75, 150, 96, 10, 206, 247, 205, 253, 118, 46, 131, 118, 152, 112, 226, 6, 212, 60, 192,
            63, 193, 196, 156, 245, 86, 148, 57, 202, 134, 205, 161, 170,
        ]),
        U256::from_bytes_le([
            153, 103, 38, 67, 189, 125, 193, 46, 180, 111, 175, 249, 194, 173, 228, 101, 74, 52,
            128, 82, 206, 234, 42, 37, 52, 69, 228, 244, 219, 222, 43, 0,
        ]),
        U256::from_bytes_le([
            144, 31, 82, 172, 39, 149, 169, 32, 242, 183, 128, 153, 41, 154, 197, 43, 79, 114, 139,
            214, 125, 39, 170, 17, 88, 16, 225, 148, 130, 12, 58, 234,
        ]),
        U256::from_bytes_le([
            245, 33, 15, 244, 214, 61, 120, 10, 147, 255, 248, 41, 12, 29, 255, 132, 181, 110, 127,
            105, 242, 135, 1, 163, 232, 190, 1, 49, 81, 130, 217, 196,
        ]),
        U256::from_bytes_le([
            118, 73, 234, 211, 120, 247, 100, 145, 223, 209, 114, 242, 250, 75, 211, 242, 139, 176,
            243, 89, 203, 74, 148, 64, 253, 106, 222, 96, 110, 106, 150, 164,
        ]),
        U256::from_bytes_le([
            66, 91, 100, 182, 86, 21, 69, 233, 171, 178, 120, 171, 135, 179, 20, 253, 44, 51, 146,
            223, 136, 197, 84, 32, 129, 7, 200, 138, 104, 130, 225, 103,
        ]),
        U256::from_bytes_le([
            55, 85, 145, 241, 55, 121, 99, 237, 175, 166, 165, 192, 158, 48, 116, 107, 150, 247,
            39, 225, 62, 125, 79, 53, 132, 222, 113, 20, 22, 61, 151, 182,
        ]),
        U256::from_bytes_le([
            60, 113, 156, 119, 86, 112, 253, 153, 6, 35, 114, 28, 55, 56, 215, 43, 178, 211, 180,
            122, 119, 169, 106, 124, 103, 2, 58, 80, 123, 147, 153, 127,
        ]),
        U256::from_bytes_le([
            203, 204, 131, 56, 84, 161, 231, 229, 137, 98, 55, 90, 253, 11, 53, 200, 83, 91, 158,
            134, 29, 178, 67, 221, 27, 74, 86, 115, 101, 61, 4, 130,
        ]),
        U256::from_bytes_le([
            153, 145, 140, 247, 152, 63, 233, 125, 7, 161, 98, 211, 71, 15, 119, 188, 117, 18, 67,
            250, 251, 63, 254, 181, 242, 69, 186, 39, 107, 123, 252, 252,
        ]),
        U256::from_bytes_le([
            43, 43, 57, 171, 48, 37, 236, 79, 167, 240, 103, 110, 135, 161, 244, 239, 167, 85, 50,
            15, 153, 120, 243, 105, 135, 129, 147, 193, 31, 84, 137, 69,
        ]),
        U256::from_bytes_le([
            196, 249, 106, 184, 227, 185, 109, 63, 137, 199, 59, 153, 173, 172, 255, 216, 165, 7,
            218, 144, 125, 116, 212, 225, 113, 248, 142, 76, 0, 232, 90, 229,
        ]),
        U256::from_bytes_le([
            98, 137, 143, 215, 90, 83, 76, 86, 255, 105, 148, 250, 231, 139, 68, 254, 52, 221, 229,
            0, 12, 181, 62, 110, 2, 86, 123, 236, 216, 39, 18, 9,
        ]),
        U256::from_bytes_le([
            117, 192, 131, 91, 85, 51, 194, 19, 82, 25, 76, 136, 160, 43, 0, 201, 221, 238, 128,
            220, 202, 227, 75, 112, 183, 230, 89, 9, 228, 93, 194, 136,
        ]),
        U256::from_bytes_le([
            176, 16, 103, 65, 23, 12, 213, 65, 48, 248, 33, 149, 243, 23, 74, 205, 133, 110, 208,
            228, 115, 37, 13, 252, 121, 228, 184, 210, 140, 64, 196, 124,
        ]),
        U256::from_bytes_le([
            195, 36, 107, 74, 161, 193, 80, 128, 88, 218, 137, 137, 41, 227, 127, 236, 134, 107,
            16, 221, 172, 199, 184, 231, 171, 236, 170, 233, 111, 13, 38, 86,
        ]),
        U256::from_bytes_le([
            24, 159, 240, 134, 253, 197, 21, 236, 0, 123, 33, 130, 56, 177, 152, 172, 155, 19, 148,
            172, 68, 71, 96, 212, 133, 63, 79, 240, 31, 82, 202, 140,
        ]),
        U256::from_bytes_le([
            70, 24, 169, 92, 195, 247, 98, 110, 213, 189, 5, 76, 252, 44, 198, 75, 51, 93, 176, 93,
            206, 248, 246, 193, 73, 79, 133, 79, 0, 105, 200, 101,
        ]),
        U256::from_bytes_le([
            20, 127, 104, 232, 242, 6, 51, 79, 251, 207, 176, 69, 22, 204, 71, 211, 88, 88, 176,
            177, 113, 233, 253, 136, 9, 53, 159, 2, 100, 19, 215, 30,
        ]),
        U256::from_bytes_le([
            134, 134, 235, 106, 131, 200, 104, 210, 65, 146, 250, 81, 47, 251, 55, 13, 138, 79,
            134, 62, 224, 70, 252, 240, 221, 158, 150, 160, 166, 197, 222, 56,
        ]),
        U256::from_bytes_le([
            145, 45, 150, 90, 112, 61, 0, 244, 229, 225, 85, 214, 44, 86, 91, 236, 115, 200, 7,
            247, 239, 229, 25, 229, 10, 69, 131, 212, 207, 123, 196, 30,
        ]),
        U256::from_bytes_le([
            38, 33, 20, 21, 45, 244, 219, 139, 20, 74, 36, 132, 35, 151, 216, 75, 171, 245, 112,
            224, 203, 212, 69, 201, 30, 185, 228, 221, 138, 229, 99, 186,
        ]),
        U256::from_bytes_le([
            237, 230, 215, 231, 121, 185, 75, 104, 148, 14, 77, 231, 250, 176, 220, 109, 53, 110,
            181, 161, 178, 16, 226, 251, 16, 121, 254, 201, 202, 45, 94, 54,
        ]),
        U256::from_bytes_le([
            164, 12, 77, 56, 18, 50, 61, 105, 217, 215, 18, 33, 143, 95, 181, 70, 191, 117, 186,
            241, 169, 242, 114, 80, 4, 196, 172, 113, 133, 176, 50, 10,
        ]),
        U256::from_bytes_le([
            177, 66, 57, 85, 205, 220, 150, 57, 100, 200, 163, 30, 160, 246, 157, 83, 162, 249, 40,
            95, 19, 89, 217, 204, 227, 103, 225, 72, 142, 230, 124, 233,
        ]),
        U256::from_bytes_le([
            228, 44, 119, 104, 71, 221, 220, 10, 186, 44, 120, 133, 73, 56, 34, 140, 238, 4, 176,
            8, 136, 56, 33, 175, 118, 199, 53, 145, 158, 156, 169, 250,
        ]),
        U256::from_bytes_le([
            176, 192, 231, 65, 94, 80, 232, 76, 17, 95, 163, 37, 5, 226, 177, 249, 104, 194, 2, 14,
            10, 124, 173, 176, 17, 136, 172, 194, 147, 200, 161, 65,
        ]),
        U256::from_bytes_le([
            150, 228, 80, 196, 76, 124, 18, 47, 72, 187, 221, 217, 20, 30, 247, 47, 38, 160, 118,
            237, 236, 44, 203, 43, 117, 4, 120, 85, 171, 208, 94, 115,
        ]),
        U256::from_bytes_le([
            193, 215, 120, 14, 189, 153, 224, 154, 163, 158, 169, 12, 19, 187, 42, 175, 236, 11,
            139, 21, 210, 218, 228, 86, 25, 229, 216, 213, 79, 133, 208, 28,
        ]),
        U256::from_bytes_le([
            51, 75, 241, 148, 220, 65, 152, 93, 54, 37, 91, 92, 35, 22, 150, 205, 184, 168, 11, 97,
            129, 210, 17, 220, 189, 117, 163, 172, 70, 184, 150, 138,
        ]),
        U256::from_bytes_le([
            122, 49, 191, 91, 38, 125, 64, 103, 59, 107, 141, 197, 26, 9, 227, 226, 86, 52, 248,
            147, 42, 170, 156, 91, 231, 63, 47, 232, 217, 193, 244, 18,
        ]),
        U256::from_bytes_le([
            184, 217, 213, 120, 119, 39, 32, 138, 128, 176, 199, 224, 248, 188, 105, 117, 193, 145,
            73, 125, 121, 52, 245, 142, 109, 240, 81, 102, 128, 103, 1, 246,
        ]),
        U256::from_bytes_le([
            172, 227, 81, 153, 195, 122, 6, 242, 65, 247, 119, 4, 167, 118, 6, 226, 13, 162, 23,
            92, 100, 44, 20, 155, 243, 180, 229, 13, 67, 145, 93, 222,
        ]),
        U256::from_bytes_le([
            127, 139, 132, 85, 105, 208, 97, 102, 130, 185, 191, 164, 171, 119, 57, 69, 233, 193,
            178, 111, 50, 43, 155, 126, 115, 11, 99, 23, 240, 33, 173, 235,
        ]),
        U256::from_bytes_le([
            237, 247, 156, 222, 6, 91, 167, 140, 240, 54, 135, 38, 128, 61, 103, 53, 252, 64, 163,
            9, 84, 125, 170, 176, 185, 149, 119, 234, 93, 132, 58, 224,
        ]),
        U256::from_bytes_le([
            0, 136, 226, 145, 62, 24, 76, 251, 75, 45, 52, 106, 65, 141, 93, 229, 15, 64, 212, 198,
            25, 68, 113, 100, 244, 83, 87, 18, 233, 221, 24, 12,
        ]),
        U256::from_bytes_le([
            97, 72, 218, 251, 179, 94, 46, 178, 147, 99, 187, 207, 17, 163, 51, 178, 150, 10, 133,
            76, 214, 22, 31, 35, 247, 75, 108, 247, 132, 3, 74, 199,
        ]),
        U256::from_bytes_le([
            92, 168, 156, 200, 229, 81, 244, 59, 113, 199, 174, 73, 78, 191, 74, 17, 105, 167, 154,
            208, 172, 178, 18, 223, 226, 161, 177, 76, 131, 99, 203, 164,
        ]),
        U256::from_bytes_le([
            91, 148, 39, 107, 123, 78, 144, 61, 107, 216, 91, 245, 65, 236, 139, 111, 200, 115,
            160, 145, 154, 7, 108, 143, 72, 192, 135, 172, 20, 90, 63, 135,
        ]),
        U256::from_bytes_le([
            196, 191, 109, 156, 32, 179, 38, 178, 35, 166, 239, 238, 110, 58, 162, 77, 246, 244,
            253, 206, 145, 1, 118, 72, 148, 108, 191, 134, 212, 123, 117, 74,
        ]),
        U256::from_bytes_le([
            254, 2, 241, 232, 29, 36, 64, 218, 208, 128, 97, 66, 123, 47, 192, 236, 110, 96, 211,
            88, 192, 14, 146, 236, 39, 173, 13, 58, 237, 23, 32, 44,
        ]),
        U256::from_bytes_le([
            23, 241, 236, 156, 25, 250, 242, 84, 185, 208, 159, 96, 195, 59, 43, 139, 69, 125, 4,
            82, 204, 238, 73, 86, 224, 245, 89, 137, 229, 241, 99, 181,
        ]),
        U256::from_bytes_le([
            26, 201, 13, 19, 15, 109, 199, 107, 169, 158, 8, 180, 52, 36, 81, 202, 76, 34, 44, 156,
            243, 251, 244, 147, 161, 58, 41, 55, 71, 87, 50, 157,
        ]),
        U256::from_bytes_le([
            42, 26, 183, 135, 41, 196, 168, 244, 72, 228, 206, 86, 142, 247, 20, 39, 232, 208, 184,
            162, 93, 74, 254, 251, 42, 40, 137, 95, 18, 253, 87, 195,
        ]),
        U256::from_bytes_le([
            88, 121, 98, 7, 229, 18, 96, 59, 44, 110, 38, 99, 222, 67, 77, 222, 211, 147, 69, 103,
            168, 78, 43, 67, 173, 6, 13, 185, 141, 6, 91, 140,
        ]),
        U256::from_bytes_le([
            244, 178, 221, 151, 50, 28, 3, 197, 54, 20, 164, 80, 70, 171, 246, 239, 203, 64, 186,
            27, 32, 196, 65, 16, 53, 119, 248, 25, 150, 242, 27, 219,
        ]),
        U256::from_bytes_le([
            216, 45, 191, 143, 199, 109, 37, 86, 63, 254, 35, 73, 140, 37, 40, 62, 14, 201, 8, 198,
            191, 178, 240, 38, 250, 19, 150, 172, 80, 98, 197, 14,
        ]),
        U256::from_bytes_le([
            174, 34, 246, 155, 47, 123, 179, 132, 34, 171, 248, 226, 221, 194, 203, 79, 231, 30,
            157, 128, 214, 57, 200, 157, 109, 102, 51, 139, 131, 248, 167, 243,
        ]),
        U256::from_bytes_le([
            25, 18, 211, 172, 184, 153, 170, 9, 32, 110, 208, 120, 71, 112, 182, 249, 129, 51, 20,
            110, 55, 5, 139, 92, 174, 58, 114, 17, 154, 89, 175, 206,
        ]),
        U256::from_bytes_le([
            167, 167, 67, 96, 56, 189, 34, 92, 179, 82, 79, 66, 120, 224, 143, 254, 225, 208, 178,
            61, 253, 192, 112, 9, 141, 33, 181, 11, 160, 118, 210, 36,
        ]),
        U256::from_bytes_le([
            2, 111, 97, 120, 8, 29, 71, 80, 105, 24, 213, 130, 115, 153, 204, 125, 237, 81, 75, 44,
            60, 47, 243, 212, 99, 85, 101, 215, 124, 153, 105, 36,
        ]),
        U256::from_bytes_le([
            97, 14, 111, 251, 221, 185, 177, 182, 174, 116, 191, 189, 70, 27, 171, 47, 60, 246,
            239, 21, 169, 1, 92, 101, 175, 4, 233, 121, 254, 19, 119, 163,
        ]),
        U256::from_bytes_le([
            96, 96, 132, 162, 240, 77, 146, 166, 245, 85, 160, 144, 206, 28, 71, 82, 50, 51, 177,
            9, 127, 251, 63, 231, 172, 96, 72, 44, 4, 204, 102, 231,
        ]),
        U256::from_bytes_le([
            173, 45, 90, 214, 204, 29, 199, 238, 89, 61, 211, 122, 244, 26, 147, 115, 111, 229, 12,
            254, 130, 144, 122, 49, 56, 41, 147, 18, 241, 15, 42, 4,
        ]),
        U256::from_bytes_le([
            169, 64, 151, 145, 234, 192, 101, 144, 126, 2, 169, 175, 214, 200, 92, 52, 48, 190,
            130, 153, 253, 244, 93, 188, 5, 87, 107, 87, 186, 6, 167, 168,
        ]),
        U256::from_bytes_le([
            199, 65, 136, 82, 64, 232, 167, 112, 120, 60, 216, 16, 155, 191, 221, 113, 239, 235,
            32, 97, 194, 91, 242, 143, 73, 102, 223, 54, 102, 46, 190, 101,
        ]),
        U256::from_bytes_le([
            41, 223, 31, 105, 40, 128, 41, 85, 253, 40, 190, 38, 235, 158, 225, 142, 75, 147, 167,
            105, 225, 27, 210, 85, 207, 44, 177, 12, 119, 231, 24, 73,
        ]),
        U256::from_bytes_le([
            208, 34, 101, 228, 233, 89, 95, 32, 135, 47, 131, 37, 108, 158, 152, 0, 141, 203, 241,
            183, 50, 132, 59, 146, 169, 152, 52, 150, 139, 36, 162, 192,
        ]),
        U256::from_bytes_le([
            133, 138, 189, 146, 49, 158, 150, 10, 89, 168, 226, 116, 165, 28, 104, 71, 72, 69, 158,
            86, 248, 205, 247, 209, 243, 57, 61, 56, 17, 112, 65, 242,
        ]),
        U256::from_bytes_le([
            35, 108, 153, 212, 118, 189, 210, 170, 213, 197, 236, 132, 116, 141, 209, 215, 14, 54,
            169, 89, 29, 215, 98, 231, 63, 145, 252, 200, 34, 70, 115, 189,
        ]),
        U256::from_bytes_le([
            205, 207, 128, 139, 5, 115, 84, 76, 98, 195, 158, 83, 71, 61, 85, 243, 250, 164, 52, 6,
            191, 37, 227, 196, 166, 136, 32, 179, 8, 29, 6, 152,
        ]),
        U256::from_bytes_le([
            170, 98, 220, 173, 195, 27, 149, 213, 141, 69, 248, 112, 218, 9, 82, 50, 60, 218, 96,
            84, 96, 103, 31, 253, 109, 110, 46, 116, 198, 31, 198, 39,
        ]),
        U256::from_bytes_le([
            218, 142, 63, 221, 255, 4, 120, 218, 230, 177, 207, 173, 174, 135, 187, 162, 34, 194,
            77, 155, 190, 0, 190, 6, 10, 184, 40, 71, 70, 176, 158, 179,
        ]),
        U256::from_bytes_le([
            252, 37, 42, 161, 168, 44, 53, 202, 58, 207, 104, 32, 89, 87, 137, 218, 8, 36, 18, 52,
            57, 127, 65, 10, 252, 148, 197, 201, 190, 228, 46, 97,
        ]),
        U256::from_bytes_le([
            158, 114, 205, 103, 210, 250, 219, 124, 193, 223, 43, 216, 14, 1, 111, 103, 15, 130,
            152, 231, 3, 195, 0, 0, 20, 147, 218, 32, 254, 219, 1, 234,
        ]),
        U256::from_bytes_le([
            62, 165, 122, 180, 42, 247, 93, 249, 167, 83, 90, 17, 101, 198, 177, 243, 172, 223,
            144, 155, 69, 86, 78, 111, 68, 162, 38, 131, 94, 112, 42, 182,
        ]),
        U256::from_bytes_le([
            80, 143, 36, 159, 228, 41, 242, 253, 45, 45, 42, 108, 69, 39, 176, 73, 84, 5, 154, 185,
            170, 249, 192, 32, 77, 209, 3, 46, 96, 78, 200, 135,
        ]),
        U256::from_bytes_le([
            25, 98, 175, 82, 14, 245, 204, 144, 23, 216, 38, 115, 177, 75, 25, 130, 70, 210, 21,
            61, 32, 239, 130, 75, 107, 122, 219, 170, 164, 117, 145, 37,
        ]),
        U256::from_bytes_le([
            252, 27, 244, 148, 186, 172, 234, 109, 188, 194, 14, 190, 73, 3, 115, 37, 168, 170,
            210, 240, 113, 223, 205, 139, 123, 100, 211, 81, 78, 201, 232, 34,
        ]),
        U256::from_bytes_le([
            98, 241, 200, 105, 189, 22, 181, 11, 196, 12, 124, 193, 224, 31, 154, 42, 63, 170, 84,
            29, 170, 66, 185, 35, 90, 213, 224, 111, 208, 82, 181, 71,
        ]),
        U256::from_bytes_le([
            138, 248, 229, 47, 28, 38, 130, 3, 69, 57, 23, 165, 11, 219, 102, 85, 79, 145, 38, 232,
            84, 144, 48, 80, 217, 95, 19, 17, 246, 131, 38, 252,
        ]),
        U256::from_bytes_le([
            139, 116, 195, 31, 56, 190, 96, 64, 65, 97, 28, 129, 95, 44, 4, 233, 85, 103, 255, 163,
            172, 225, 238, 98, 203, 196, 81, 69, 30, 172, 108, 159,
        ]),
        U256::from_bytes_le([
            61, 159, 11, 223, 92, 22, 150, 2, 57, 167, 212, 119, 182, 57, 200, 249, 73, 110, 228,
            85, 32, 25, 196, 74, 12, 181, 198, 15, 84, 225, 196, 183,
        ]),
        U256::from_bytes_le([
            249, 92, 141, 39, 107, 13, 194, 155, 62, 55, 241, 14, 89, 165, 82, 94, 122, 166, 232,
            57, 110, 145, 216, 66, 73, 52, 106, 11, 219, 92, 105, 130,
        ]),
        U256::from_bytes_le([
            84, 95, 58, 6, 77, 13, 188, 215, 83, 145, 220, 123, 105, 245, 32, 69, 208, 219, 102,
            192, 251, 188, 50, 29, 3, 78, 38, 142, 186, 163, 126, 127,
        ]),
        U256::from_bytes_le([
            122, 109, 79, 149, 37, 167, 169, 149, 217, 109, 201, 134, 131, 114, 132, 125, 188, 146,
            37, 215, 79, 68, 133, 75, 211, 138, 3, 142, 207, 210, 148, 55,
        ]),
        U256::from_bytes_le([
            23, 151, 180, 66, 189, 58, 108, 10, 188, 51, 55, 61, 54, 232, 5, 3, 186, 255, 41, 3,
            223, 242, 186, 215, 114, 15, 84, 86, 28, 58, 94, 111,
        ]),
        U256::from_bytes_le([
            156, 76, 113, 72, 148, 229, 3, 19, 119, 249, 21, 149, 152, 63, 158, 71, 108, 18, 163,
            233, 137, 229, 96, 70, 165, 196, 185, 234, 122, 105, 91, 9,
        ]),
        U256::from_bytes_le([
            233, 27, 39, 102, 133, 193, 174, 72, 117, 95, 209, 164, 147, 171, 104, 64, 223, 20,
            145, 75, 88, 30, 94, 203, 212, 157, 185, 71, 67, 87, 223, 180,
        ]),
        U256::from_bytes_le([
            35, 193, 82, 175, 202, 228, 140, 109, 136, 103, 1, 163, 142, 66, 138, 127, 241, 235,
            77, 128, 65, 92, 115, 151, 100, 202, 19, 47, 63, 191, 213, 21,
        ]),
        U256::from_bytes_le([
            104, 188, 109, 58, 225, 21, 132, 104, 182, 58, 186, 229, 226, 24, 42, 68, 141, 201,
            178, 60, 123, 149, 24, 198, 191, 242, 89, 26, 89, 237, 75, 150,
        ]),
        U256::from_bytes_le([
            173, 21, 51, 36, 220, 60, 204, 112, 236, 231, 58, 159, 168, 197, 104, 197, 75, 231, 72,
            233, 75, 95, 41, 153, 149, 38, 88, 88, 56, 185, 42, 73,
        ]),
        U256::from_bytes_le([
            51, 10, 203, 197, 80, 179, 125, 128, 250, 117, 40, 91, 211, 172, 195, 170, 90, 158,
            199, 178, 160, 197, 153, 74, 242, 24, 246, 227, 224, 97, 11, 62,
        ]),
        U256::from_bytes_le([
            21, 192, 108, 247, 81, 235, 58, 157, 221, 96, 246, 75, 25, 167, 222, 236, 32, 201, 32,
            109, 1, 50, 92, 202, 158, 248, 217, 9, 143, 196, 239, 73,
        ]),
        U256::from_bytes_le([
            50, 75, 138, 217, 231, 35, 163, 109, 15, 37, 228, 192, 84, 35, 86, 15, 71, 192, 241,
            94, 74, 183, 242, 255, 146, 254, 230, 208, 131, 6, 82, 46,
        ]),
        U256::from_bytes_le([
            33, 9, 119, 233, 64, 34, 203, 159, 60, 67, 159, 113, 13, 98, 37, 237, 33, 128, 77, 129,
            61, 59, 136, 88, 131, 16, 173, 118, 50, 30, 181, 101,
        ]),
        U256::from_bytes_le([
            141, 128, 188, 44, 77, 160, 15, 26, 81, 211, 188, 185, 25, 201, 48, 90, 228, 250, 46,
            10, 110, 197, 108, 166, 255, 123, 126, 238, 158, 187, 218, 38,
        ]),
        U256::from_bytes_le([
            253, 74, 74, 93, 161, 36, 110, 203, 229, 224, 52, 111, 213, 41, 23, 40, 213, 97, 92,
            135, 172, 93, 210, 96, 9, 79, 171, 66, 120, 250, 189, 104,
        ]),
        U256::from_bytes_le([
            13, 105, 65, 238, 209, 88, 142, 201, 134, 150, 105, 82, 12, 40, 26, 79, 105, 255, 85,
            90, 34, 124, 169, 200, 211, 133, 83, 144, 233, 112, 36, 87,
        ]),
        U256::from_bytes_le([
            6, 68, 197, 166, 68, 80, 239, 177, 216, 82, 216, 131, 62, 141, 154, 109, 84, 54, 104,
            93, 237, 81, 72, 248, 207, 166, 36, 55, 215, 87, 7, 251,
        ]),
        U256::from_bytes_le([
            176, 18, 113, 249, 254, 173, 7, 62, 206, 107, 210, 233, 105, 157, 69, 148, 182, 89,
            116, 166, 143, 2, 40, 15, 227, 43, 215, 145, 239, 20, 205, 195,
        ]),
        U256::from_bytes_le([
            251, 161, 106, 252, 68, 230, 46, 182, 82, 69, 164, 27, 245, 226, 171, 174, 17, 149,
            242, 39, 111, 100, 148, 102, 187, 156, 183, 40, 110, 154, 119, 122,
        ]),
        U256::from_bytes_le([
            168, 251, 137, 41, 232, 90, 150, 237, 9, 89, 36, 35, 198, 71, 120, 169, 7, 46, 154,
            149, 138, 14, 27, 179, 130, 184, 227, 168, 26, 101, 53, 122,
        ]),
        U256::from_bytes_le([
            66, 124, 214, 160, 173, 42, 36, 31, 131, 135, 203, 49, 65, 253, 71, 29, 122, 89, 53,
            201, 253, 153, 245, 106, 229, 19, 138, 59, 141, 217, 77, 95,
        ]),
        U256::from_bytes_le([
            146, 22, 94, 247, 210, 26, 51, 73, 216, 164, 236, 138, 115, 20, 120, 140, 141, 187, 49,
            48, 224, 213, 48, 250, 214, 126, 115, 219, 153, 136, 122, 149,
        ]),
        U256::from_bytes_le([
            1, 244, 68, 52, 234, 203, 244, 232, 217, 144, 83, 26, 65, 113, 162, 159, 58, 63, 211,
            242, 187, 149, 97, 78, 26, 27, 12, 138, 134, 2, 51, 198,
        ]),
        U256::from_bytes_le([
            190, 173, 159, 20, 168, 130, 73, 38, 186, 117, 7, 231, 55, 197, 241, 220, 132, 23, 243,
            235, 160, 38, 224, 53, 113, 119, 151, 5, 248, 249, 88, 14,
        ]),
        U256::from_bytes_le([
            42, 99, 108, 198, 253, 13, 81, 134, 19, 70, 248, 255, 38, 166, 166, 70, 23, 158, 236,
            157, 173, 232, 167, 167, 123, 212, 98, 78, 150, 63, 96, 15,
        ]),
        U256::from_bytes_le([
            28, 180, 196, 213, 225, 145, 122, 222, 206, 17, 81, 27, 175, 182, 188, 234, 16, 2, 60,
            162, 149, 146, 199, 68, 147, 193, 226, 147, 68, 208, 66, 89,
        ]),
        U256::from_bytes_le([
            16, 90, 44, 130, 115, 24, 54, 16, 99, 77, 216, 151, 97, 125, 129, 96, 14, 51, 188, 166,
            129, 57, 125, 70, 155, 138, 184, 253, 98, 4, 109, 134,
        ]),
        U256::from_bytes_le([
            83, 63, 83, 174, 207, 63, 152, 188, 165, 169, 66, 102, 239, 119, 24, 142, 140, 211,
            178, 41, 50, 146, 91, 197, 235, 84, 127, 223, 72, 139, 243, 162,
        ]),
        U256::from_bytes_le([
            115, 145, 219, 25, 4, 123, 175, 18, 244, 237, 243, 185, 156, 40, 56, 36, 248, 205, 90,
            73, 230, 250, 89, 120, 139, 160, 109, 19, 76, 84, 2, 146,
        ]),
        U256::from_bytes_le([
            172, 78, 34, 98, 102, 174, 216, 28, 73, 191, 81, 200, 69, 112, 249, 171, 104, 242, 134,
            240, 76, 74, 206, 36, 178, 1, 242, 213, 176, 85, 59, 163,
        ]),
        U256::from_bytes_le([
            171, 200, 235, 3, 243, 190, 0, 134, 219, 15, 65, 201, 58, 120, 242, 248, 47, 235, 242,
            222, 97, 58, 80, 1, 60, 153, 53, 155, 14, 96, 68, 247,
        ]),
        U256::from_bytes_le([
            252, 175, 27, 146, 138, 201, 244, 91, 67, 7, 157, 81, 142, 88, 124, 163, 37, 165, 46,
            164, 238, 149, 202, 159, 179, 15, 172, 50, 121, 91, 60, 161,
        ]),
        U256::from_bytes_le([
            252, 250, 68, 12, 125, 157, 2, 101, 202, 60, 85, 137, 229, 84, 74, 37, 236, 11, 207,
            123, 81, 193, 56, 139, 133, 228, 107, 196, 212, 221, 83, 131,
        ]),
        U256::from_bytes_le([
            83, 40, 121, 72, 195, 22, 135, 225, 156, 157, 137, 182, 71, 41, 88, 67, 229, 121, 238,
            39, 201, 205, 248, 106, 209, 140, 142, 123, 73, 239, 146, 35,
        ]),
        U256::from_bytes_le([
            121, 253, 107, 38, 207, 173, 95, 52, 207, 140, 58, 116, 61, 201, 75, 164, 55, 70, 76,
            123, 24, 168, 18, 81, 34, 196, 6, 218, 171, 14, 167, 225,
        ]),
        U256::from_bytes_le([
            72, 234, 5, 246, 152, 155, 78, 122, 204, 191, 192, 71, 93, 202, 208, 231, 154, 24, 231,
            91, 201, 110, 53, 168, 126, 65, 86, 158, 3, 171, 12, 89,
        ]),
        U256::from_bytes_le([
            91, 51, 221, 110, 203, 142, 222, 204, 29, 185, 25, 146, 36, 176, 157, 5, 122, 152, 63,
            217, 250, 208, 97, 184, 179, 114, 208, 166, 206, 243, 139, 199,
        ]),
        U256::from_bytes_le([
            145, 210, 153, 65, 206, 119, 141, 78, 4, 255, 75, 31, 126, 218, 169, 135, 172, 126,
            145, 15, 232, 211, 199, 182, 39, 106, 151, 81, 53, 167, 27, 253,
        ]),
        U256::from_bytes_le([
            40, 250, 235, 72, 205, 80, 136, 144, 70, 236, 108, 56, 57, 182, 38, 72, 247, 228, 31,
            11, 244, 158, 217, 41, 180, 233, 83, 229, 69, 247, 53, 226,
        ]),
        U256::from_bytes_le([
            214, 206, 104, 130, 113, 242, 254, 151, 189, 79, 112, 123, 237, 68, 1, 58, 163, 160,
            33, 89, 177, 119, 204, 176, 57, 166, 249, 0, 117, 55, 28, 107,
        ]),
        U256::from_bytes_le([
            12, 108, 64, 80, 228, 111, 239, 89, 218, 162, 50, 206, 112, 119, 65, 70, 230, 59, 80,
            30, 232, 200, 131, 222, 104, 115, 60, 185, 30, 20, 62, 56,
        ]),
        U256::from_bytes_le([
            17, 22, 211, 154, 54, 217, 35, 188, 223, 21, 154, 124, 83, 74, 190, 127, 18, 90, 188,
            181, 17, 34, 108, 108, 168, 29, 251, 76, 122, 224, 76, 204,
        ]),
        U256::from_bytes_le([
            154, 114, 163, 240, 106, 85, 126, 166, 249, 149, 79, 249, 142, 15, 249, 102, 79, 157,
            195, 222, 150, 38, 81, 114, 13, 42, 246, 252, 83, 155, 19, 189,
        ]),
        U256::from_bytes_le([
            220, 56, 97, 78, 98, 214, 3, 78, 7, 245, 243, 88, 245, 21, 67, 84, 229, 108, 66, 220,
            130, 218, 24, 152, 236, 226, 231, 64, 244, 11, 82, 251,
        ]),
        U256::from_bytes_le([
            24, 85, 196, 4, 83, 15, 85, 140, 197, 152, 128, 89, 106, 249, 99, 43, 31, 116, 93, 202,
            80, 64, 153, 234, 242, 185, 246, 215, 74, 200, 115, 17,
        ]),
        U256::from_bytes_le([
            228, 50, 145, 207, 218, 140, 7, 101, 96, 52, 152, 122, 170, 208, 17, 117, 192, 3, 222,
            11, 217, 87, 27, 171, 178, 80, 127, 134, 21, 201, 127, 198,
        ]),
        U256::from_bytes_le([
            194, 7, 152, 11, 166, 150, 142, 163, 159, 194, 219, 233, 33, 217, 112, 240, 175, 242,
            218, 231, 145, 155, 65, 23, 13, 20, 79, 210, 136, 116, 210, 62,
        ]),
        U256::from_bytes_le([
            31, 57, 37, 229, 83, 183, 181, 6, 92, 36, 125, 193, 234, 86, 192, 24, 16, 96, 161, 203,
            12, 147, 46, 126, 110, 242, 218, 233, 31, 38, 203, 154,
        ]),
        U256::from_bytes_le([
            32, 223, 222, 219, 211, 30, 216, 108, 236, 149, 124, 6, 157, 194, 151, 178, 33, 42,
            117, 252, 144, 130, 5, 35, 168, 150, 91, 194, 220, 246, 214, 39,
        ]),
        U256::from_bytes_le([
            255, 207, 176, 131, 181, 60, 255, 167, 230, 19, 91, 219, 254, 25, 157, 71, 120, 63, 31,
            142, 118, 245, 76, 80, 193, 111, 15, 185, 79, 126, 135, 4,
        ]),
        U256::from_bytes_le([
            76, 177, 171, 215, 91, 173, 141, 48, 236, 186, 220, 47, 175, 61, 132, 111, 245, 22,
            231, 101, 115, 16, 152, 84, 24, 4, 65, 148, 36, 194, 49, 169,
        ]),
        U256::from_bytes_le([
            45, 182, 101, 20, 80, 234, 17, 241, 252, 102, 8, 146, 183, 41, 155, 198, 131, 171, 197,
            227, 21, 218, 118, 45, 181, 52, 116, 49, 129, 181, 224, 132,
        ]),
        U256::from_bytes_le([
            95, 215, 183, 23, 157, 125, 36, 253, 251, 52, 249, 130, 88, 24, 31, 195, 239, 108, 137,
            161, 132, 219, 231, 121, 224, 17, 102, 181, 208, 177, 146, 45,
        ]),
        U256::from_bytes_le([
            46, 124, 235, 173, 54, 148, 57, 202, 128, 75, 10, 185, 62, 60, 208, 159, 247, 30, 171,
            150, 74, 206, 151, 188, 60, 86, 50, 182, 234, 52, 216, 20,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_513_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("cf114fb32b16706fc55188ad17f4dcced660baf4f31353048a5f51317134dc2b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_31_random() {
    let mut value = Vector::<u64, 31>::try_from(Vec::<u64>::from_iter([
        3052724393868548387,
        3810693530679841654,
        12585541796688525245,
        7797619408698423071,
        17300603542735752207,
        1500042191375799293,
        15730311807639243063,
        4896003536604206404,
        11052623568709729964,
        7620613587987365317,
        14725846845076244548,
        8277023605973026738,
        17826368043195852359,
        3128829880034264486,
        3473891868744927914,
        18343612133879937169,
        11117133942831612242,
        15989397465635862691,
        7217156999682606300,
        11356562156743016218,
        8285094276436873719,
        1589676644942788053,
        4169250114160504621,
        558291410544594398,
        15615879608970573885,
        9651926789184060127,
        7687155892063378437,
        17756836253102770925,
        5291345685353917916,
        15829036281687984180,
        4874883508035225879,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_31_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("692da28053f3e2d585e5359989519e2af9044140b7f50d0db8e36b89e5ddd6f3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_512_max() {
    let mut value = Vector::<u8, 512>::try_from(Vec::<u8>::from_iter([
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_512_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("006eed26f731a68917853879507d9fa9f4044f7af999f9df535fac29715db555");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_8_max() {
    let mut value =
        Vector::<u8, 8>::try_from(Vec::<u8>::from_iter([255, 255, 255, 255, 255, 255, 255, 255]))
            .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_8_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffff000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_5_random() {
    let mut value =
        Vector::<u8, 5>::try_from(Vec::<u8>::from_iter([15, 8, 177, 247, 237])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_5_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0f08b1f7ed000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_513_zero() {
    let mut value = Vector::<bool, 513>::try_from(Vec::<bool>::from_iter([
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_513_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_513_zero() {
    let mut value = Vector::<u128, 513>::try_from(Vec::<u128>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_513_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_3_zero() {
    let mut value = Vector::<u128, 3>::try_from(Vec::<u128>::from_iter([0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_3_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_8_zero() {
    let mut value =
        Vector::<u32, 8>::try_from(Vec::<u32>::from_iter([0, 0, 0, 0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_8_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_5_max() {
    let mut value =
        Vector::<u8, 5>::try_from(Vec::<u8>::from_iter([255, 255, 255, 255, 255])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_5_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffff000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_31_max() {
    let mut value = Vector::<u32, 31>::try_from(Vec::<u32>::from_iter([
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_31_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("e7492e2fb875c43b137514ed057ddfc23ddd1220431403c9a3395e2bbaf51407");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_3_random() {
    let mut value =
        Vector::<u16, 3>::try_from(Vec::<u16>::from_iter([55998, 58650, 32471])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_3_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("beda1ae5d77e0000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_1_max() {
    let mut value =
        Vector::<u64, 1>::try_from(Vec::<u64>::from_iter([18446744073709551615])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_1_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffff000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_3_max() {
    let mut value = Vector::<u128, 3>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_3_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("1e3915ef9ca4ed8619d472b72fb1833448756054b4de9acb439da54dff7166aa");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_5_random() {
    let mut value = Vector::<u32, 5>::try_from(Vec::<u32>::from_iter([
        1051503312, 1875702585, 3338068896, 1062162289, 44280150,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_5_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("d0aaac3e39f3cc6fa0e3f6c6714f4f3f56a9a302000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_1_random() {
    let mut value = Vector::<U256, 1>::try_from(Vec::<U256>::from_iter([U256::from_bytes_le([
        23, 198, 217, 240, 65, 96, 243, 95, 206, 232, 214, 26, 230, 80, 25, 35, 116, 138, 185, 248,
        165, 147, 63, 252, 41, 25, 209, 95, 73, 233, 26, 244,
    ])]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_1_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("17c6d9f04160f35fcee8d61ae6501923748ab9f8a5933ffc2919d15f49e91af4");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_1_zero() {
    let mut value = Vector::<u8, 1>::try_from(Vec::<u8>::from_iter([0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_1_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_16_zero() {
    let mut value = Vector::<u128, 16>::try_from(Vec::<u128>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_16_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_16_random() {
    let mut value = Vector::<U256, 16>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            240, 52, 157, 62, 33, 82, 186, 76, 43, 156, 161, 241, 59, 31, 225, 79, 247, 97, 118,
            251, 234, 138, 47, 120, 129, 122, 206, 216, 201, 221, 67, 133,
        ]),
        U256::from_bytes_le([
            212, 233, 42, 72, 109, 30, 150, 166, 88, 4, 208, 133, 82, 125, 255, 36, 249, 82, 137,
            253, 208, 202, 238, 139, 89, 125, 32, 184, 194, 35, 67, 228,
        ]),
        U256::from_bytes_le([
            208, 105, 149, 83, 2, 180, 140, 191, 233, 37, 135, 57, 130, 252, 145, 71, 76, 173, 132,
            46, 249, 51, 122, 56, 225, 158, 152, 51, 196, 172, 24, 18,
        ]),
        U256::from_bytes_le([
            97, 39, 155, 196, 77, 16, 157, 41, 102, 252, 217, 171, 184, 68, 202, 234, 63, 183, 7,
            221, 237, 207, 49, 201, 225, 175, 163, 83, 239, 45, 247, 101,
        ]),
        U256::from_bytes_le([
            70, 14, 165, 110, 162, 181, 160, 255, 106, 186, 164, 191, 44, 169, 228, 169, 248, 154,
            41, 111, 79, 244, 153, 151, 24, 219, 136, 247, 172, 88, 238, 251,
        ]),
        U256::from_bytes_le([
            62, 10, 101, 3, 25, 26, 183, 177, 148, 210, 253, 158, 9, 182, 247, 222, 224, 93, 222,
            42, 167, 173, 74, 239, 207, 212, 142, 144, 20, 85, 92, 90,
        ]),
        U256::from_bytes_le([
            43, 43, 101, 214, 10, 154, 114, 74, 19, 170, 147, 124, 11, 70, 23, 0, 125, 82, 11, 121,
            71, 230, 232, 150, 239, 232, 250, 93, 218, 212, 204, 130,
        ]),
        U256::from_bytes_le([
            49, 96, 40, 230, 174, 26, 30, 184, 55, 154, 214, 62, 60, 161, 121, 92, 59, 246, 44,
            186, 80, 192, 28, 66, 237, 133, 169, 171, 172, 173, 59, 90,
        ]),
        U256::from_bytes_le([
            196, 231, 203, 2, 98, 198, 170, 41, 17, 140, 109, 246, 151, 202, 56, 81, 122, 237, 131,
            226, 70, 26, 136, 50, 152, 234, 50, 172, 133, 77, 247, 85,
        ]),
        U256::from_bytes_le([
            249, 187, 45, 222, 65, 149, 93, 108, 105, 204, 110, 197, 173, 81, 110, 93, 180, 149,
            163, 181, 52, 5, 89, 169, 35, 190, 40, 58, 238, 202, 172, 192,
        ]),
        U256::from_bytes_le([
            54, 52, 107, 75, 46, 163, 28, 241, 243, 172, 165, 205, 237, 118, 85, 13, 170, 7, 205,
            220, 134, 48, 51, 139, 212, 170, 109, 129, 159, 233, 76, 97,
        ]),
        U256::from_bytes_le([
            61, 221, 81, 65, 43, 122, 39, 223, 193, 16, 207, 117, 189, 255, 60, 203, 63, 111, 177,
            81, 97, 245, 119, 44, 97, 2, 84, 80, 86, 146, 230, 230,
        ]),
        U256::from_bytes_le([
            125, 167, 181, 185, 177, 182, 24, 151, 80, 163, 2, 242, 167, 227, 201, 211, 136, 98,
            219, 64, 251, 168, 254, 63, 36, 30, 47, 49, 135, 67, 81, 124,
        ]),
        U256::from_bytes_le([
            40, 175, 24, 214, 113, 163, 253, 157, 148, 106, 189, 102, 38, 33, 201, 187, 32, 147,
            153, 228, 220, 138, 87, 137, 145, 55, 13, 233, 91, 137, 56, 93,
        ]),
        U256::from_bytes_le([
            117, 43, 14, 180, 130, 170, 82, 40, 76, 107, 118, 110, 10, 246, 96, 35, 44, 43, 50,
            201, 61, 101, 247, 36, 42, 134, 71, 103, 91, 62, 238, 249,
        ]),
        U256::from_bytes_le([
            171, 127, 221, 201, 139, 31, 221, 183, 128, 145, 61, 209, 23, 93, 25, 164, 96, 48, 210,
            1, 84, 130, 44, 131, 33, 60, 0, 100, 125, 32, 229, 220,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_16_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("1acf6f6a33e7a6642bf9f60d5c829ca9f09390bf30663f50ef1424796f582057");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_31_random() {
    let mut value = Vector::<u16, 31>::try_from(Vec::<u16>::from_iter([
        2630, 4376, 65427, 13583, 41975, 15842, 27686, 33957, 45114, 56180, 24895, 4175, 40381,
        32830, 48421, 52207, 58611, 41821, 31373, 23853, 55119, 1957, 34877, 62496, 37311, 40303,
        44876, 36839, 47492, 53209, 24055,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_31_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("29fab6cb24858519d6e8d3af2fdac7ec9fce5c08e978fb1a3cdb3fad6fe88f7f");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_512_random() {
    let mut value = Vector::<u32, 512>::try_from(Vec::<u32>::from_iter([
        3535294352, 2244578171, 32943704, 3015817426, 2456157102, 219351158, 2006999311,
        1996972550, 2838712831, 1656769757, 3318502982, 4213769932, 2050078503, 4292367497,
        4290313471, 1262779699, 4083724714, 1323361645, 974092343, 710698434, 2984936844,
        2709051461, 793048327, 2740605131, 4271720468, 1239230976, 737431578, 3362943983,
        918617091, 2606153556, 388763806, 2502078683, 3378874323, 2355187203, 157263768,
        1750398229, 1726973279, 1685332809, 2492836426, 1734731691, 3216588585, 19605804,
        1079902211, 752009555, 1313141487, 2557096315, 3782998189, 1055732267, 1012020811,
        3323197044, 4054145370, 4138435231, 2069952128, 306530649, 1494565330, 3753105050,
        1360186424, 2380191177, 3271137983, 2853578005, 1966300545, 2445678985, 1722906387,
        1568386585, 500870613, 1339987259, 3268820798, 3981291882, 933156616, 3775563964,
        1596013155, 741998234, 268068699, 2563970862, 1804695176, 3982648303, 2655461544,
        2734449043, 738208464, 3745411901, 99361025, 2741088555, 4201353158, 3348783183,
        2054886505, 4084856832, 3508954061, 498624123, 2117203264, 3745504180, 3062233877,
        3074639656, 2386643714, 1332975315, 3901865235, 1858598116, 2599471745, 859192293,
        1322827830, 2027021532, 2694401832, 3990078534, 2974308187, 3968735550, 4206014803,
        2971436541, 3774373948, 2846923396, 3578470527, 3654481937, 3353460878, 4075675716,
        3799520987, 4120838021, 2158786311, 403313196, 2508911367, 10900908, 3028221190, 342848224,
        3529437045, 359980750, 1781538672, 1604481683, 674127897, 37035551, 2695472569, 496109305,
        3159798786, 2419165439, 663646611, 874882601, 1646773349, 3622039566, 1046420945,
        3665303103, 678740365, 685087413, 526677619, 2275681050, 1032960777, 3429497003,
        1417114643, 3172213549, 1404837023, 1325283518, 3893270408, 602238145, 3914985577,
        3975382686, 2601748675, 2356353894, 3153873749, 526408453, 2640845379, 3926620605,
        1258444490, 986708388, 3975693528, 299605420, 104768804, 444965549, 4065545249, 490166175,
        657757140, 2768701878, 3813333597, 3455406501, 2504511478, 355414935, 4015633969,
        2880420128, 2359983044, 3197597614, 212209564, 3888226910, 3951085813, 401264663,
        3792922719, 1420661438, 2254844891, 580834507, 3364803238, 2203604914, 2615046504,
        1115697783, 392870589, 311935107, 1442208749, 1209298478, 1013593249, 2053215367,
        3412394840, 4030116388, 142371070, 1950874224, 3042396528, 3018316910, 3697727630,
        1998412466, 1565816659, 841459056, 4030754272, 1312053095, 2455378572, 1731126608,
        2845452582, 3953375723, 3822263095, 252824003, 3630660489, 1739260497, 1803576050,
        1912944999, 2601986289, 2541404050, 4215070596, 1061521796, 1754148457, 3255336258,
        3582596520, 514105160, 2980764780, 3130695110, 1253698669, 3004166864, 3824662942,
        3246231229, 460259310, 4089129029, 4114996050, 3534152197, 2122530116, 865630905,
        968035546, 2199557573, 1958771466, 773581354, 370339735, 614529460, 3234242989, 3517297738,
        830368230, 2173424325, 3013280028, 427969949, 2679037354, 908067850, 2821401428, 603844792,
        71983645, 4161931391, 3067792552, 1418037527, 4463265, 84316272, 950745375, 3964187759,
        1501489365, 2988654540, 2292636560, 3945907452, 502636829, 1574346912, 3281827256,
        2787880690, 1499982341, 847934911, 610690502, 163824992, 777259958, 2781566187, 3615351968,
        3708981020, 976054856, 100913786, 4090496589, 300612182, 2030010945, 4173694335,
        3969615050, 2415563, 991623807, 3310316394, 2251061732, 1305042197, 3465256011, 3395953082,
        2513468668, 1354005343, 1632604415, 216263825, 3076011258, 3746999400, 1117079550,
        2295596376, 883106176, 2361055599, 3258628962, 3945266859, 3860808418, 846352371,
        1399590686, 772378354, 1588875802, 3343689110, 2082989732, 3408728540, 1076495583,
        1680687149, 291855826, 726487704, 799970947, 3551790903, 2742915380, 1890091834,
        2507392407, 1727482428, 3096669669, 2909223385, 1635977177, 2089470236, 981557541,
        2342237733, 2363710558, 2696327208, 2986914419, 292191546, 1107478332, 2959391739,
        378566732, 1118392952, 973862178, 1031998503, 1820508723, 3075483448, 3249413162,
        2076796467, 545866968, 3457667772, 1385917415, 2606276828, 437737244, 2540365289,
        728331253, 2258686738, 470639768, 4189510907, 3916947153, 2585918050, 565375584,
        3686965793, 1007880761, 2413669839, 1063127889, 825859952, 3139645345, 3186620248,
        578211014, 2693981046, 3057114146, 1493741110, 458566123, 2468827650, 4140026266,
        894690154, 523145548, 3726228913, 1831559042, 2679193135, 4072981159, 3190351894,
        2550794351, 1938105959, 4245338721, 3988907142, 2457209373, 3975700772, 144892689,
        3811184202, 425355055, 1855911656, 3474887805, 203251995, 1787895772, 3172519209,
        962544690, 3629109328, 345813322, 150915150, 2893137764, 2618891532, 1625475391,
        2029336085, 1263731842, 1911894423, 3894118586, 1363971621, 960015382, 192449136, 67552855,
        1294879004, 2591718910, 1736825353, 3490063644, 2128190458, 1972629089, 2399260128,
        17379262, 161281455, 1709561484, 2933730946, 3225981600, 2543293831, 1978452738,
        3008899847, 3118751066, 1254469678, 1023053771, 3193145277, 3070133883, 2941828171,
        1001485872, 1869687394, 2769560579, 4142957345, 3319210633, 1455429722, 2614932657,
        4245078534, 994863755, 3143378383, 199381130, 661298469, 2452039343, 2031879050,
        2729949360, 2235242867, 2996710365, 2227030039, 1405749267, 3825028104, 848321069,
        1458715752, 2000071960, 3126188701, 106644335, 2050139015, 4236278138, 1131957322,
        1005264630, 3652645946, 3343357510, 3773188712, 271071174, 3557746887, 317450074,
        1545562146, 193974785, 3599222840, 879189109, 4092020238, 3841666085, 2197870115,
        182750812, 2605303221, 2012863450, 3219471627, 918483864, 53850912, 2530136267, 1612901225,
        743481088, 613878693, 2916861685, 971257519, 3236860384, 3379284124, 2519555053, 366466546,
        1686741245, 2943106452, 1199737384, 4035650276, 3529673426, 2114328522, 2416026204,
        2731819303, 2314409199, 3516208253, 1107875552, 2938755457, 3081337177, 2481720773,
        387862847, 3668943239, 2471366547, 3042011515, 1291823301, 3478236734, 4266051645,
        1225358750, 2712399533, 3151898487, 2747576291, 2815685304, 2442136584, 2977848056,
        1605903903, 2992868241, 2668529965, 1279750435,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_512_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("29520e549f20e52e3cd8ef74509a65c936a54c25207355c6c7d8b93b50c16b79");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_8_zero() {
    let mut value =
        Vector::<u16, 8>::try_from(Vec::<u16>::from_iter([0, 0, 0, 0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_8_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_31_max() {
    let mut value = Vector::<u16, 31>::try_from(Vec::<u16>::from_iter([
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_31_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("43cbd26c37dcff8448ce8896f9b5e553a1047de0c59ec3b477decefbdea9c74b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_2_max() {
    let mut value = Vector::<u128, 2>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_2_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_4_max() {
    let mut value = Vector::<u8, 4>::try_from(Vec::<u8>::from_iter([255, 255, 255, 255])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_4_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffff00000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_16_random() {
    let mut value = Vector::<u8, 16>::try_from(Vec::<u8>::from_iter([
        238, 35, 45, 23, 138, 32, 154, 246, 181, 136, 127, 102, 232, 9, 36, 2,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_16_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ee232d178a209af6b5887f66e809240200000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_512_zero() {
    let mut value = Vector::<u8, 512>::try_from(Vec::<u8>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_512_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_4_zero() {
    let mut value = Vector::<u32, 4>::try_from(Vec::<u32>::from_iter([0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_4_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_4_max() {
    let mut value =
        Vector::<bool, 4>::try_from(Vec::<bool>::from_iter([true, true, true, true])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_4_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0101010100000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_513_max() {
    let mut value = Vector::<u32, 513>::try_from(Vec::<u32>::from_iter([
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_513_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("e243d140ab8d341e3cad517d2ba8cd3b8ef7df2ff6f6962f0aeaf20e366fe7e3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_513_max() {
    let mut value = Vector::<bool, 513>::try_from(Vec::<bool>::from_iter([
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_513_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f5299a985b414f61b75a2c8c15f886b14a1a668135c01d9a44f094b893d72852");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_1_zero() {
    let mut value = Vector::<u64, 1>::try_from(Vec::<u64>::from_iter([0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_1_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_2_max() {
    let mut value = Vector::<u64, 2>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_2_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffff00000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_8_max() {
    let mut value = Vector::<u32, 8>::try_from(Vec::<u32>::from_iter([
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_8_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_513_max() {
    let mut value = Vector::<U256, 513>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_513_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("8d90ae08c4b61479f6867707545ea8b26e91d9ef54e863a8daf7427f1e4d04c1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_4_zero() {
    let mut value = Vector::<u16, 4>::try_from(Vec::<u16>::from_iter([0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_4_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_512_max() {
    let mut value = Vector::<U256, 512>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_512_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("a278cf32ca74f920b67a7b3d02447453d8883fecb4a7aa1ba4327079fa3d5162");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_8_random() {
    let mut value = Vector::<u64, 8>::try_from(Vec::<u64>::from_iter([
        598083651574187315,
        16261093746939895763,
        11288686854153899408,
        4845075573469762221,
        17314674068189149066,
        14806780961068871529,
        11182945185590657296,
        10120249242423179797,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_8_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("d5a3754afc2badf65538d7358ba6199e5433893701dafc2f775e6e3b49cf13ca");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_4_random() {
    let mut value = Vector::<u64, 4>::try_from(Vec::<u64>::from_iter([
        7900660817174063737,
        6533979385570669156,
        4271747397033668748,
        3517156834185333722,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_4_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("79ea815a27c9a46d6432aaf6a15bad5a8c3064fa9f4b483bda4bf4888173cf30");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_1_max() {
    let mut value = Vector::<u128, 1>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_1_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffff00000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_3_max() {
    let mut value = Vector::<u64, 3>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_3_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_3_zero() {
    let mut value = Vector::<U256, 3>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_3_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_512_max() {
    let mut value = Vector::<bool, 512>::try_from(Vec::<bool>::from_iter([
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true, true,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_512_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("bea533dbcce99238f8e459b813178182fbb2903627d119e0e6a91718dee93bec");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_512_max() {
    let mut value = Vector::<u32, 512>::try_from(Vec::<u32>::from_iter([
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295,
        4294967295,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_512_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("7c09b1cdfe9a7e172dfe2ca8715becf5132c036abbfdfb500daa9c51f365074d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_8_max() {
    let mut value = Vector::<u16, 8>::try_from(Vec::<u16>::from_iter([
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_8_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffff00000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_5_max() {
    let mut value =
        Vector::<bool, 5>::try_from(Vec::<bool>::from_iter([true, true, true, true, true]))
            .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_5_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0101010101000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_16_zero() {
    let mut value = Vector::<U256, 16>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_16_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_1_max() {
    let mut value = Vector::<bool, 1>::try_from(Vec::<bool>::from_iter([true])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_1_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0100000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_5_max() {
    let mut value = Vector::<u128, 5>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_5_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("42b2994e8f77b7cc4b05fe01a2d6570ab7d29be54e434582425697ee8cd8f2c2");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_3_max() {
    let mut value = Vector::<u8, 3>::try_from(Vec::<u8>::from_iter([255, 255, 255])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_3_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffff0000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_2_zero() {
    let mut value = Vector::<U256, 2>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_2_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_16_zero() {
    let mut value = Vector::<bool, 16>::try_from(Vec::<bool>::from_iter([
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_16_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_16_zero() {
    let mut value = Vector::<u32, 16>::try_from(Vec::<u32>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_16_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_5_zero() {
    let mut value = Vector::<u16, 5>::try_from(Vec::<u16>::from_iter([0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_5_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_31_zero() {
    let mut value = Vector::<u64, 31>::try_from(Vec::<u64>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_31_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_1_zero() {
    let mut value = Vector::<bool, 1>::try_from(Vec::<bool>::from_iter([false])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_1_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_2_max() {
    let mut value = Vector::<u8, 2>::try_from(Vec::<u8>::from_iter([255, 255])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_2_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffff000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_4_max() {
    let mut value = Vector::<u128, 4>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_4_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("8667e718294e9e0df1d30600ba3eeb201f764aad2dad72748643e4a285e1d1f7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_513_zero() {
    let mut value = Vector::<u8, 513>::try_from(Vec::<u8>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_513_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_5_zero() {
    let mut value = Vector::<u32, 5>::try_from(Vec::<u32>::from_iter([0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_5_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_31_zero() {
    let mut value = Vector::<u16, 31>::try_from(Vec::<u16>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_31_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_5_random() {
    let mut value = Vector::<u128, 5>::try_from(Vec::<u128>::from_iter([
        194578830033788736352569855138204668708,
        222404791245710801707639009374583541271,
        300921627290141104382250227469409620613,
        262165721261575220299431625592070664586,
        114390707564886779102314838295082086088,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_5_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("3783f4ecb6a705af305039d2f104b57616a40fd279144e6723358ca561a22a51");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_2_max() {
    let mut value = Vector::<bool, 2>::try_from(Vec::<bool>::from_iter([true, true])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_2_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0101000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_513_max() {
    let mut value = Vector::<u128, 513>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_513_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("71b09f3b6e5e978c55a3e8e88640e9abbfe68c41e61e96424cffa42b63bfa413");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_4_max() {
    let mut value = Vector::<u64, 4>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_4_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_3_random() {
    let mut value = Vector::<U256, 3>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            180, 21, 110, 11, 140, 206, 247, 50, 116, 42, 151, 240, 95, 129, 184, 145, 10, 60, 171,
            40, 120, 79, 137, 163, 69, 100, 70, 1, 173, 244, 248, 44,
        ]),
        U256::from_bytes_le([
            251, 233, 155, 132, 150, 17, 100, 94, 219, 18, 216, 181, 81, 16, 227, 193, 182, 29,
            106, 23, 114, 245, 186, 36, 187, 57, 209, 98, 187, 13, 191, 164,
        ]),
        U256::from_bytes_le([
            201, 244, 78, 58, 39, 55, 151, 126, 63, 239, 151, 45, 32, 114, 114, 145, 25, 154, 100,
            142, 85, 203, 94, 39, 125, 63, 163, 149, 244, 214, 209, 134,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_3_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0d0ad5da1149666a95382488e4164f5eaf34c9a5d4616dabaf74fc5c1cb5416c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_1_random() {
    let mut value = Vector::<u16, 1>::try_from(Vec::<u16>::from_iter([58671])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_1_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("2fe5000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_5_max() {
    let mut value = Vector::<u64, 5>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_5_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f0b46c4ab8cd5720de9457addeff0a7267e475c09fd5abb6661e32faf9dd30cd");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_1_max() {
    let mut value = Vector::<u8, 1>::try_from(Vec::<u8>::from_iter([255])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_1_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ff00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_513_random() {
    let mut value = Vector::<u128, 513>::try_from(Vec::<u128>::from_iter([
        34806233895606943316594477386264063388,
        269482665842274191832954812547223680643,
        98566888497380199723262118438348948905,
        306220238885959541900464878040688725020,
        111159210194802426381381041643724587505,
        255284616880460028192586642678864289378,
        188871549660503800108679523636135765568,
        21056290823491066720648133193625324049,
        286710680113285492371594620423571623971,
        200004860114587550212458443689430210411,
        321851956264775548612724788518793872734,
        3532337742491205460942323389975095296,
        323481655059545229713341333709240616122,
        323136964091009130056662149426183105457,
        65167318114830798017853810940849211815,
        99515404003291191584176500698893947096,
        180752719303242454432654495283527282623,
        316094185457648142185214471716302456967,
        93108837894792737125268951133721012040,
        223432116605195098796196862999105167008,
        36136949214178855160871726075755908205,
        302685122815841206762281614237458018211,
        125443367308817112377866828073872853275,
        81839106221620302098317069081963502378,
        79868404006231383566878264208180763516,
        82045941390403533866916174239465997712,
        114786098599669193029507218675990346556,
        277150593060181503827173172054038761065,
        134160698114177924670518200285967824094,
        54307925108328140336193430071292664302,
        81237491094300166034936894545685569135,
        339137825481638857685737855647652444540,
        100444922531596670474477300535544185083,
        304917587669227796313009737172322898092,
        67545143044848126908800951695149216631,
        200330516374109347995164263472097286053,
        57008632998146200089913222745105393955,
        274569345757878505322705087144276745732,
        304202587007901236355082194481916703186,
        114022363498830864639840147187644134991,
        305604296489208184357315646941263079491,
        62415697895798625222187970203431978046,
        212473946153620257507317728946356887645,
        6960034907456026234434260266584973406,
        187393605190011137027154046505864228541,
        86455527766341212244670704268469208684,
        115819451863739675140779780615033767652,
        75098126903439813739065905721927603597,
        44146474389129539911169430458352196742,
        258660355275685503683719592571436739980,
        236024392362650090176037828983661685381,
        194379966247782328856615689857154389416,
        258411776661483687391859525914642937736,
        329595757116581011391576813918821972920,
        104204073831744179958368680780400890931,
        179459781283877086488823271607414654080,
        170832652511394071304123668419115703278,
        218060991854722196656996706140045268201,
        96277322228460602817723751160483777565,
        153841079210086519343186459132396542708,
        138208317953302167387562966637428744828,
        126578676301160949140892395804017228857,
        3645025998846620796940971243468910676,
        104537413799756899135541944630954930279,
        234975575917491814005902371630971086280,
        332106924614250529586477868040168131558,
        282348027500597244128781340047887657594,
        97766988785716932963173272223212366772,
        106638883738156562609847876715751976755,
        70273114598914754154979122700372820817,
        180035778760960650582292529008939494832,
        176087344579726961184384050339345398219,
        240575812092879350277015191650271377369,
        277492100560593682752724362587380202686,
        313573961130288179822689821311629708968,
        233349244850888732251319812403423392334,
        294739209938672767175109958009718995667,
        158546319483829881918550211852268429291,
        150514918589426145007018114981053616199,
        14346362869902976673690978164614055802,
        189946922491791557956027742419236145054,
        142548158909253567029964304587649265398,
        39482133759591022481459641708890390642,
        94007789590443924513964716851761019241,
        295811620290576542547361414990678438759,
        114397773768869953894312840134377361219,
        300863106230159297034794357178279827100,
        318638833796044043346070543416279492179,
        71015864690116482811749779030434626709,
        71911132557073211736550146969030402658,
        198693736898785517956156448753394156016,
        300028572813307061464498739424798969321,
        338819733526523946463150159703685318005,
        327308647752096643213571602817940447795,
        17856216928942555709366709672698008752,
        16337615903034349237318035267418765482,
        155631161046614346361868077600010135717,
        159579921524121322571986148530090258937,
        52448034977495035268906194016230227058,
        226249836738449197632123927173022234990,
        284682329466967481753157695897768580756,
        336666077482294946940857502687346589124,
        47238248049178118096602784891379277234,
        1623247273694393890905991923310375068,
        204600920949585785785604506564732577859,
        160652961618860841113755815228643170481,
        289473837337210632200393681681097420591,
        268837063026041494516244499431962630952,
        325489298828601488388449641069800828381,
        148752403879228802100184400514728504956,
        13068179053504524564312161116600211541,
        74255354762929223490963204801594969826,
        210442607508879117399352858248291519055,
        174725361633019944886072153691415472080,
        286639400195610869464298543479532707577,
        292756726916625014906287691236276640584,
        128401361410066268594465348099234749842,
        196511083009584388385149372924362136470,
        187524958128641129231156601369304138680,
        261345686512293319179015600863327457941,
        152657771338718559403746481632097909879,
        288164935265327982992932566028623721723,
        306979039669599340062003007880332639225,
        54467652375185419954206245469420787151,
        92899323918121377409095167563136706236,
        208061683491856029900000329124049909721,
        112282901040895607378043268936919789066,
        123073582811178312504154424673372583661,
        188250533161277569349647752257317611049,
        2830006874395189957219661647590580787,
        93911482360705451650982379789597980021,
        321307650579124171463673972631620638752,
        47701286423845786582508186821414424863,
        206408368687541460037820175117117130977,
        170066510256474493534290808539179775062,
        91605241227824911816865059905900304353,
        114729335694352220327623665721506857093,
        22194185641353189474875879416690697024,
        256022801464095439247900313952636439407,
        140383937056462874775553361757357574507,
        15961810878358601881527646023010509221,
        124794119902474099776090350851445083054,
        198169628009311065792623785308130146529,
        311760983345791784241648507028199609396,
        129553712728922002831276591856339827228,
        222104092770193338958825152071853111162,
        96645047190289468957593578365392869015,
        313761892272717481365531332771324212091,
        307195232542436740741186084995460095692,
        250005657825317746935389895516448130448,
        36449055807335231151872268316130095899,
        18482132038945606647789431602430216208,
        5011381221826506230108824483502879310,
        141372147050436215319405296686297326693,
        279598264949256321708926808359127249374,
        301269478421795099893217072810488129437,
        162543493123370422006042040659140940281,
        96118430907212862579127990379065143155,
        159289271454328420652458324759143421917,
        337992080784566386323247894997560353968,
        5229658174929415251895920105630929935,
        268552975083365828490892284392804011690,
        247384864530717213830603724038965832983,
        214055185738105862888206767237763629806,
        23693571564554319554993359016010499201,
        287628661797779570858619132271218342099,
        292443174504906882721863284521652021180,
        52145939198259001101952359398809154160,
        290302759899913758280586648361828582357,
        166817661561478301148629119117143026206,
        91434877287398497727541521962580492742,
        23358835134733732771181987795987200839,
        146353505364457735741755398857741975323,
        178744620488145364319893013703941793532,
        273179903825287271848038593077446992006,
        212447130864357515526043283306188580233,
        143317001051304702559569941148852205111,
        219647227741795784712646053270117061166,
        146195943102904802271062647133567607063,
        212241124180253227758859032591931991385,
        325869461649761576527913968160028206712,
        248149532457379535532722975518440716247,
        325792397719078016930330029174039568084,
        274646057134122374482458677963418329930,
        1773461617822456571326194291043615189,
        146699663470315690023147066886652390422,
        204156932773722545326782846678719413854,
        239621682904325967278892855393624824615,
        37896929623687905853883263346444613567,
        94585521626235411595725912493424713832,
        195704971936763381698554410220325632853,
        212035126380273276778035786579979476802,
        176622893403723820665491387241105701738,
        324938864404095516867129037630628939818,
        42106209207800727690593025251160004170,
        246097963045449165633027096548303060707,
        90247989431685517878370690363815981477,
        56015299796271031976687260496806703737,
        15718120956761988765008472344447993893,
        183481204412340071738077846540060178662,
        44935315818060725947720560206784917911,
        284412706963868634942497643375290447231,
        5234074441977302547815443101826087587,
        178491225163860493693249948439628412301,
        50654502501600410927085753225761906177,
        72758588785181775706499453402521382367,
        105766562883944598247885133845621533897,
        264938786484612722485349401924068535867,
        329997875977001267480966887397193365227,
        93706453807036234618395522396663375320,
        269347036193489175205006259454211868268,
        139711032526376825871996177180270906858,
        282801908193138940637571142655544984651,
        15651702118375671172333729631120565317,
        115275394909088211175141117747786537242,
        38775003030334853952091493787037190648,
        258768424613875828090663097220831505466,
        110789338227394536542258300727845773016,
        290121872465176519477726367755776078924,
        268097218250901005305506743784602527924,
        170501593429014361333815518892081199111,
        190075309464201614500933263131312950605,
        15284042930197657899266703697435808445,
        251711112346510789510012925883300581456,
        32777930811606340106678010259088580172,
        159931869076381475282427321991644013049,
        75196925249171908244203167971162565923,
        226797935284352946955984775490965760228,
        71231223815892755162381563836928077143,
        130164446722578492239161269461433406215,
        81656670669930350300291292821140663731,
        324213745561026698183640983146328573079,
        194996676064018939946412828799039348725,
        83364329309766744342201218617869857862,
        336220934747775708847818801008374101615,
        215253718136283453541072278112827713356,
        128513931422880285298005510273289787654,
        81844830850151679872430805568547120123,
        125354313221682085755791449334108776843,
        30114676357833680239150643752533530979,
        168474838651827714278846509738201966868,
        193253208189281486466055792881336479605,
        164503824926246580252824582206559161467,
        97066288962273275344843430636876307866,
        311627486857188708476852052200291858852,
        275986381632743143364667200716011216348,
        82105826671921693647340013041104515000,
        302785179303168369484983041227231988828,
        195249956567967506637883949422945647425,
        155797472952317774557660202436715601771,
        305385568395287656838142127098215681339,
        114973450019464086668464530251405823921,
        257123666101110857942716142345540430315,
        134621479749583156105744033694947429377,
        301526093545053129714725781355937071549,
        94139976669111407977526828124810311456,
        246805593437486911411344869701396544892,
        46446281040864487095411717242016261292,
        328606402329262610580921804691797586586,
        102891681111402081739162959344555656138,
        144580083917191726016481220217722422393,
        122136813004348520626446661186492008652,
        318822311604243553874293104524548464568,
        322523589647811276819193499783838962269,
        230480845379761553596834883532459326222,
        296828989914577090873301557994236317497,
        125298699393769779935312472358829832430,
        114287229943311434348030799763708324151,
        291109131283946449026840281386167860323,
        14174034287051335737974446378779242674,
        126902352962166088213242277444353070332,
        180617122157575486476306717471499562790,
        261093182098062529692707076348778231963,
        224233643055403226275614889584424355450,
        270400231638642297529672448690664829479,
        215143589417490090780380610294382121829,
        243482845364263372209153084432576869209,
        118560820224197765905075139736393609450,
        47103020165320637167206623667187930956,
        284118317971439912602334890596516688860,
        20329047223871621564119646327389561683,
        294415419020673514697425536305092203616,
        223156058190770108878051218723793412213,
        272062182889284646743082383604774779276,
        261714962860020224667351581141024007246,
        122234500080132310243226820262021459839,
        50020774016352326866855732557207512296,
        79966142581084661986107436157772108715,
        59569508209666118394229252747116352128,
        177449710045924021970154493313266682085,
        169889037971264327586062864747829281168,
        224579609332542977284640328743368411836,
        197868965699671594701782479482313847014,
        62856354403886969021205374871406418804,
        35976853697770061988251487543161816684,
        28075286358289119440288964979030692487,
        330322145312995692800721533484122620265,
        289367715816944809386367499125890832826,
        311438324935593794500703926089083120811,
        150821910281893610043051674760767656974,
        126407936269627044410465065529052586849,
        158905869255698782756386670067991000934,
        201186521969319895879484699289158084362,
        320690891684918335961677291224379626521,
        146560794064396747430989376899403489143,
        291852838810252468990778339901881302800,
        169009499023191937908643251225274753892,
        222611190890723618585065704317431281350,
        101070028958843036402497979992349143575,
        215576747657148183083965418032092422813,
        91508833849933606528430825774962919582,
        29595459226878147948615552044156097121,
        226376685952631215407928734913832964626,
        301260160594866011257574390230227988565,
        317479126916165143225617102230659766923,
        244462609413456563913050095613676618458,
        270704365218328255581432279816252038474,
        294196807977837210929538287531843354531,
        212628453534702156362743955641268823930,
        5677791524817541596060092381480255804,
        138687997258538177179425309521759854190,
        259957066901601598760152489788973884312,
        200927271252361163906108938056932673981,
        24411201151676272937733302974133212894,
        195718591670560390658129813606806529693,
        48010162603876786623715624506524274669,
        273677304742407484351513251516522742979,
        85568865829140641183644741456072631334,
        242511145172197276273702530382366301650,
        128864464787960460250478501004879911975,
        53387188533730812929501408008405746529,
        255765750242344796367837757336982393683,
        249342339620995191684171147020372932416,
        329873897127033343913522982745046272690,
        29094573381731605924559697250901276342,
        14669576776489067484114466983590184339,
        4522546893269986307811971388294719968,
        98545881702491922643274851979747500718,
        207007035555654367992076939017559542245,
        47251495553872384243901472187069259200,
        2694181369399693601520217350375099812,
        234053663050407573410107341972100124835,
        184231464578109402311222429643789193534,
        312643158495292203648915681393436660188,
        170038580728108563030414257230519015572,
        308069216188561631445719508773830461776,
        303003561728146767921786277253305092843,
        295124839666362619962502271397339183430,
        42075774094529612702085244702965987314,
        222303703209741250446195781239992919740,
        181705205176182403192700279542416879335,
        30281884679462436302801474547062039519,
        47555576185741722940273410025012825062,
        91579187348509757599667669486335655631,
        225070669705653098809252722490268541296,
        231469905751638611927214600031537282106,
        239758096705314136908320203687557556159,
        71760321581391979162350191658730302935,
        247129567634057314261255937751419372295,
        77720666029613310335565313239010993244,
        255473114780244677689383263663622370640,
        239514901680458072817661047584835482828,
        304878050668299341755187792491025630916,
        213678941294168094430911240458675709392,
        269728450553747750731559446003254588939,
        29891991961618089763677927317576448905,
        212725405781280381047125034851205521382,
        333400447790445072798173086324663281968,
        232960472371962022165090293165979988155,
        142133702805784354146440456979909464208,
        254972550604552529297073837831007704134,
        9030966779072054488031699516968420492,
        219638091202733453662903234534856287568,
        32445235387052729112149347290534085651,
        102284639913360802221127004015106980728,
        221520370693569843609873719634726895156,
        77820292303791615758864845879083457933,
        164972414795442160061844278495113860660,
        18098965979287963641579969237551639824,
        36732689838146755467901213604533171223,
        52679251373271568428523139654899870962,
        213359831556524448634325369972800231195,
        184883153729997813665074975417233683459,
        40514828955193067095892683797849862789,
        31851554808687080347127939176480569593,
        182691410666916675981078255489201061421,
        320507283518900342781156947441021356281,
        13149597991278312367771009484523267258,
        337570201464636697437314502097639234091,
        205809581514989495598762328905615141674,
        41374301604298760192286864668971462466,
        75064901111089181509416178219068452006,
        302415610046207754295384074612633813307,
        47165717328685781003420332133398230763,
        5389066198551080605879833439737799499,
        257080053435295218527779397269270405782,
        284003235380522299954948237375415531069,
        224969252251223555891829888602459411878,
        70438772592315274144802266972373596436,
        192488255562217886512335206443228491047,
        71833346986491319148169975542023088912,
        181018544431220736309526830624878815115,
        333717691470275440658830040613994786471,
        202137518116584642304589781210074632978,
        102442679004337011231345344829891015493,
        124863204326006281050248345622785611341,
        208140791672912941099032676363795826239,
        109100704943125578954618450465328411381,
        101144857096536798592317001716874498869,
        86520853165236391683734696798873338484,
        314203898608206346152153894730126862032,
        337644330531048322936730449085273015897,
        339691214173151855963281264996741081198,
        4974335854522284426566916404706362190,
        196414541290605833169617742009592206005,
        300365715027419908772018451000853513257,
        132577590439298175342883947882081335238,
        263878934156944337125536470476971864904,
        233923779527024545789807684282251004489,
        131665083890128424343856912045539680379,
        169352350623046944819489716243588353374,
        332320061953920626841597554422150506343,
        172139239266840723842707506448553977032,
        338987809311295280502277384193643470904,
        310167963287987736955286574096116593070,
        18519309750083408357079283121562451223,
        313564124160272566304194347102740447959,
        158906361430100740150658893371856130179,
        95701448370845478068254397660689605516,
        277238645116514805831097547261433526823,
        143209809787977525518308738738880422040,
        52798759258241942570979511359410125428,
        280733043575169518362981473565094983737,
        125265944423527168256904163343979763377,
        239683922564149602736966057272398460264,
        328926062097868951504077452504669922085,
        12358813718555259181684522109757917209,
        203575127917216970031340038111998633493,
        315502175925381787534820009727778621784,
        51554118958403705746989698684550226985,
        144116720682187797891226079153148640892,
        82451417815285479898403806642641132082,
        186902012655005578027397264183435980472,
        33625305532234670390023847516519354930,
        197966011548828444022338585924675270611,
        338295823785170362918829953875589854558,
        168822590932972871866450287070115064860,
        140790721261095706323502982512044536988,
        274496954896219652696909423114529491504,
        339545551834219214231916796020998722208,
        287690546721521539834754953488501778055,
        222065686727893123386904155196173798489,
        74405117096035972833830432179016472894,
        227162005572928491352390677389529763085,
        180709042558678267804347035446588378475,
        205875219752703314568931504400449457892,
        57317178928629534585262679694795341889,
        53358965587809360426133007570924386284,
        147787351987681307505516744626017659828,
        204232118816580034806859877547430404821,
        265720665050899807525608255627725680283,
        243000591446827277138785181106636904418,
        302456119993615948279247739377395306578,
        322962192027178373763971906935276434769,
        326420716753970971091644559942082041066,
        236654545216880540796223630593954372759,
        50521133337630896515784142044593212754,
        9267802159093076155706887778612249331,
        325522942434685073094136443680011961361,
        192682179850857199992091829042064895969,
        314864237895746760310736419452902807972,
        118110231100042762477446006412839968070,
        289343784617659729396508880032068562430,
        101989450006512218740615208375588591689,
        312547556274232015781431813120234646931,
        164820945314900024285827141604899423993,
        128945941564122507971270698431915949999,
        193079131540605264366545438020720819161,
        223700928183392668735069779119091432042,
        43346391068518570409069107876068495735,
        142412886278717401332026472944416778459,
        1849935188028431796526211154154310997,
        185158338190715399808990406060340669310,
        297283936372651553856542205349049044098,
        187249263280892350318945311530344895607,
        23983226407233284446785287276993024890,
        237188694161353479360907996789831009591,
        148728211580346479983672545364133437263,
        187341439561034011093365261507806225518,
        212997861984480309171261712306611028308,
        63399801444325324698609238346981078465,
        91728364814444314404824629262948230111,
        32715757456789913488723324600282994650,
        269652131788898035519253492215905290248,
        115539653526852109661444656231699418344,
        171081833323177810791432313985591011623,
        3088403098500007329298505322815864984,
        32424346684320607752881892459898139111,
        129304480335990825040470217571765833580,
        262113825311805794210841948226528437913,
        55967954843542081252345215961381591687,
        73692338009507700432207520465512222635,
        43100108541061168616022500222122537182,
        2279741118419694817978913958827940054,
        209207581190236367534533098662422781049,
        79364598170184386374865388987943569285,
        83754191790187064317181377455913425959,
        105903243335747692983269541729934460863,
        68600884388131324600073417027612130105,
        53559242678598888571051637563625109998,
        31123334673239505985502485469190871818,
        108221987199725942615133993358635423732,
        144858385761375916683877311660170870186,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_513_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("7c9e8b3a007dbdcf573b837b5ace3e186a390e605306d95a3c9c4fc893b62088");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_2_random() {
    let mut value = Vector::<u8, 2>::try_from(Vec::<u8>::from_iter([59, 3])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_2_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("3b03000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_512_max() {
    let mut value = Vector::<u128, 512>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_512_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("d13fb49c7c7e17c33d7bfb88c3e3d674e602b53315c769a4b9f053ffba656cc3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_3_max() {
    let mut value =
        Vector::<bool, 3>::try_from(Vec::<bool>::from_iter([true, true, true])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_3_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0101010000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_2_zero() {
    let mut value = Vector::<u128, 2>::try_from(Vec::<u128>::from_iter([0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_2_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_2_zero() {
    let mut value = Vector::<u32, 2>::try_from(Vec::<u32>::from_iter([0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_2_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_16_max() {
    let mut value = Vector::<u64, 16>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_16_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("375d6c7b280a1e30f968db1d948da0f977bf9139b0d5516761ac874700208aba");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_1_random() {
    let mut value = Vector::<u128, 1>::try_from(Vec::<u128>::from_iter([
        209794508200186098054846448654859096491,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_1_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("abd1d3e35caaf8d7c91f1b63daf3d49d00000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_16_random() {
    let mut value = Vector::<u32, 16>::try_from(Vec::<u32>::from_iter([
        1381494992, 3456058494, 3316673465, 2895863808, 3039979229, 2658482247, 324065072,
        1118337861, 3690875953, 98201721, 1227056475, 2365715743, 1634445540, 616917765,
        1742195761, 2632010539,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_16_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("83aab501333050d1fbd420a889c52af0f2c274a1e4529a5c287b805ed477ccf6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_2_random() {
    let mut value = Vector::<u64, 2>::try_from(Vec::<u64>::from_iter([
        16527226978582771838,
        7558561043290308816,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_2_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("7eb8ad3c5f815ce5d0c06cce3867e56800000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_2_zero() {
    let mut value = Vector::<u16, 2>::try_from(Vec::<u16>::from_iter([0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_2_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_5_zero() {
    let mut value = Vector::<U256, 5>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_5_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_5_zero() {
    let mut value = Vector::<u128, 5>::try_from(Vec::<u128>::from_iter([0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_5_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_31_zero() {
    let mut value = Vector::<U256, 31>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_31_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_16_max() {
    let mut value = Vector::<u8, 16>::try_from(Vec::<u8>::from_iter([
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_16_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffff00000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_5_max() {
    let mut value = Vector::<U256, 5>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_5_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("8a70016e9e63b5927d8575c08b19132107772e149f3d1ba4e1b4306dce9b7aa5");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_31_zero() {
    let mut value = Vector::<u32, 31>::try_from(Vec::<u32>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_31_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_31_zero() {
    let mut value = Vector::<bool, 31>::try_from(Vec::<bool>::from_iter([
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_31_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_513_zero() {
    let mut value = Vector::<u64, 513>::try_from(Vec::<u64>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_513_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_3_random() {
    let mut value =
        Vector::<u32, 3>::try_from(Vec::<u32>::from_iter([414721764, 1396444802, 4099449558]))
            .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_3_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("e426b818820e3c53d6a258f40000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_5_random() {
    let mut value =
        Vector::<u16, 5>::try_from(Vec::<u16>::from_iter([35919, 34593, 14706, 39574, 53868]))
            .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_5_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("4f8c21877239969a6cd200000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_16_random() {
    let mut value = Vector::<u64, 16>::try_from(Vec::<u64>::from_iter([
        14973315493487554254,
        14609512114016110986,
        10032323568597029119,
        15153216164748753291,
        10355457468023345721,
        2367705310487571285,
        16938628278728286031,
        549797285436435601,
        13256773041589582886,
        5207050997383557932,
        8672288948259042494,
        17841422853058231140,
        14461294523448768516,
        15336235419586149355,
        16699880407387000672,
        10919772420411846664,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_16_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("18efd70dfb660ebe73c72c6f8d0258f97495b3bf86a98741e3c9bfb2aeab5d28");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_16_zero() {
    let mut value = Vector::<u64, 16>::try_from(Vec::<u64>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_16_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_4_max() {
    let mut value = Vector::<U256, 4>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_4_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("375d6c7b280a1e30f968db1d948da0f977bf9139b0d5516761ac874700208aba");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_16_zero() {
    let mut value = Vector::<u16, 16>::try_from(Vec::<u16>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_16_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_512_random() {
    let mut value = Vector::<u16, 512>::try_from(Vec::<u16>::from_iter([
        39340, 21094, 12815, 18079, 3546, 9133, 45047, 41320, 3878, 13753, 38525, 64568, 43355,
        62649, 55650, 30889, 7989, 16810, 53928, 52810, 54272, 34111, 43130, 14634, 55804, 24247,
        2549, 37573, 53039, 1273, 63106, 10081, 35901, 22063, 65529, 36398, 22557, 6548, 49942,
        51535, 8125, 6097, 44735, 41844, 6924, 38812, 46284, 28742, 15255, 52107, 18447, 53412,
        25887, 55412, 63792, 34766, 5505, 60081, 60102, 22907, 4472, 52200, 9287, 57769, 19130,
        9576, 33612, 29442, 51950, 31312, 57224, 42421, 3948, 27456, 17061, 26184, 43827, 38666,
        45497, 49012, 31663, 20589, 33660, 6416, 42817, 12859, 36023, 18361, 13106, 3948, 6069,
        45466, 29677, 18064, 3643, 3116, 53510, 64358, 43166, 45247, 20328, 64702, 19889, 60714,
        32942, 45721, 46172, 65267, 36597, 16011, 60612, 34941, 2235, 28718, 60810, 57652, 34739,
        8085, 40064, 34439, 30836, 63285, 49357, 36164, 40730, 6028, 20536, 7821, 11758, 13935,
        41594, 5480, 50109, 45486, 34524, 65518, 33646, 26927, 51166, 8137, 65325, 47159, 15817,
        21430, 55199, 43094, 18188, 10207, 9270, 12316, 59028, 45281, 65293, 18359, 26572, 1483,
        37642, 33838, 30229, 20598, 17948, 17913, 8381, 2294, 65136, 56785, 32374, 21420, 32944,
        55524, 54245, 9455, 19743, 46340, 44594, 34585, 20335, 47339, 56153, 6446, 38290, 11996,
        3640, 19236, 56251, 26006, 39485, 49775, 18442, 14177, 58677, 29326, 65175, 15895, 55082,
        13796, 36474, 17814, 15645, 18234, 33170, 51110, 44025, 25628, 50098, 4543, 11961, 5240,
        12269, 60922, 50694, 57333, 36294, 54967, 34897, 38937, 23327, 21211, 38130, 40763, 28268,
        32512, 44967, 13536, 14845, 33262, 60590, 42683, 51728, 39972, 55685, 7063, 44366, 38396,
        34545, 19207, 23781, 5187, 6760, 4664, 2548, 34910, 45079, 63988, 24389, 33740, 46265,
        48490, 13086, 13997, 4472, 58789, 42140, 38861, 56799, 27990, 2090, 17510, 18149, 56801,
        36116, 29, 27248, 14112, 43872, 56950, 31835, 54234, 60391, 61682, 6150, 8409, 14113,
        14813, 43837, 34413, 35895, 60346, 9764, 39419, 8802, 34406, 19505, 46628, 3351, 48702,
        8558, 5754, 2593, 60784, 39575, 1647, 5760, 16362, 63845, 48749, 27443, 24090, 40960,
        19478, 5559, 7717, 62950, 12398, 29842, 16378, 36410, 37918, 22070, 37187, 2388, 2471,
        59879, 9256, 16878, 28021, 9280, 63982, 3237, 64103, 60696, 53445, 43639, 26328, 22322,
        25785, 42833, 11185, 19944, 39503, 46656, 62113, 54641, 39184, 38083, 52218, 10422, 19936,
        38976, 37156, 53804, 24969, 32577, 54761, 27676, 35737, 44695, 48600, 31136, 19500, 44205,
        36060, 25786, 26618, 37361, 8899, 64311, 2514, 9554, 32401, 56118, 2234, 41629, 45679,
        18067, 55083, 13659, 38338, 11145, 48099, 7097, 19777, 40789, 42260, 16593, 28212, 32284,
        48885, 60017, 41548, 48980, 52748, 29436, 6519, 51390, 13850, 16050, 57484, 19504, 2382,
        57695, 21309, 36053, 58478, 36350, 38811, 1214, 25105, 48123, 49033, 13665, 51370, 49698,
        6760, 32128, 58193, 128, 1545, 26614, 50542, 30613, 54988, 14353, 10738, 7815, 13360,
        40678, 7110, 25066, 60556, 54461, 22528, 17659, 13689, 48277, 30774, 43061, 20261, 15691,
        35630, 19815, 30383, 49861, 2839, 31450, 13493, 28681, 541, 61617, 22342, 59591, 40410,
        38843, 30711, 35254, 41534, 728, 11071, 55064, 35225, 56657, 37227, 9777, 34110, 65339,
        21575, 59226, 17161, 38436, 43428, 43115, 38104, 42399, 18787, 25758, 38789, 26768, 57600,
        7547, 87, 63710, 50131, 47366, 52622, 62452, 41355, 23911, 59936, 32112, 53056, 25947,
        1377, 20244, 46065, 60988, 10318, 54100, 17850, 50438, 11595, 21746, 25610, 55196, 23824,
        6586, 41973, 6026, 57980, 57254, 40365, 21772, 63353, 32160, 11991, 18726, 48970, 29746,
        49440, 17081, 41097, 13465, 63697,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_512_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("01f2508b1eb51699811c789fd266764f6c2831cbbfd862c91b860066149970e9");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_31_max() {
    let mut value = Vector::<U256, 31>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_31_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("7399c0e47ac1d2d1e38e8ee039ef6242bd17bc41816dd9c49d0c7720687950df");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_512_random() {
    let mut value = Vector::<U256, 512>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            139, 35, 218, 181, 245, 36, 123, 0, 134, 153, 41, 134, 218, 150, 141, 38, 149, 194,
            111, 25, 214, 237, 163, 176, 43, 132, 142, 30, 4, 87, 68, 59,
        ]),
        U256::from_bytes_le([
            13, 228, 36, 173, 95, 216, 228, 2, 93, 162, 64, 49, 195, 169, 78, 240, 209, 245, 67,
            79, 90, 144, 117, 81, 193, 138, 62, 16, 169, 45, 30, 177,
        ]),
        U256::from_bytes_le([
            180, 204, 172, 142, 34, 1, 159, 175, 179, 94, 83, 40, 205, 60, 57, 196, 75, 24, 180,
            227, 59, 56, 249, 197, 39, 21, 41, 65, 136, 188, 16, 203,
        ]),
        U256::from_bytes_le([
            136, 9, 197, 139, 21, 181, 120, 109, 230, 74, 246, 145, 67, 123, 83, 200, 110, 228, 32,
            242, 26, 164, 212, 175, 18, 49, 249, 59, 196, 183, 242, 43,
        ]),
        U256::from_bytes_le([
            27, 176, 216, 168, 133, 115, 169, 120, 164, 168, 201, 216, 70, 161, 67, 8, 76, 124,
            203, 241, 234, 248, 3, 19, 255, 44, 253, 145, 25, 41, 102, 207,
        ]),
        U256::from_bytes_le([
            172, 203, 158, 0, 251, 114, 212, 144, 254, 38, 6, 193, 194, 187, 179, 141, 93, 176,
            132, 31, 141, 231, 66, 172, 112, 185, 215, 170, 154, 150, 207, 121,
        ]),
        U256::from_bytes_le([
            152, 69, 141, 217, 228, 133, 209, 200, 234, 254, 219, 43, 217, 63, 187, 15, 201, 18, 0,
            53, 152, 1, 90, 242, 193, 188, 56, 114, 206, 0, 103, 154,
        ]),
        U256::from_bytes_le([
            212, 168, 133, 184, 109, 68, 248, 3, 109, 145, 65, 0, 26, 66, 119, 87, 14, 39, 67, 180,
            235, 56, 70, 141, 186, 176, 68, 25, 109, 209, 83, 106,
        ]),
        U256::from_bytes_le([
            4, 88, 85, 239, 234, 89, 114, 183, 63, 107, 128, 212, 17, 33, 42, 120, 210, 211, 197,
            121, 161, 81, 241, 224, 14, 41, 228, 160, 169, 110, 187, 163,
        ]),
        U256::from_bytes_le([
            103, 162, 118, 17, 88, 206, 51, 236, 189, 131, 225, 6, 163, 204, 250, 91, 189, 169,
            167, 193, 84, 88, 28, 17, 64, 175, 149, 32, 96, 4, 251, 10,
        ]),
        U256::from_bytes_le([
            176, 165, 38, 249, 246, 52, 83, 69, 151, 166, 168, 64, 78, 216, 131, 81, 255, 88, 109,
            66, 83, 96, 56, 188, 255, 205, 212, 219, 95, 212, 57, 201,
        ]),
        U256::from_bytes_le([
            217, 202, 132, 234, 62, 104, 254, 50, 96, 161, 153, 189, 118, 219, 233, 166, 68, 193,
            103, 75, 241, 74, 47, 75, 28, 159, 218, 102, 67, 173, 95, 15,
        ]),
        U256::from_bytes_le([
            239, 92, 129, 150, 134, 71, 200, 239, 221, 43, 114, 217, 205, 104, 21, 93, 33, 3, 15,
            155, 216, 97, 44, 69, 43, 163, 52, 176, 112, 14, 10, 47,
        ]),
        U256::from_bytes_le([
            125, 94, 124, 115, 181, 59, 245, 220, 67, 60, 195, 247, 0, 160, 110, 29, 70, 121, 68,
            249, 137, 213, 208, 191, 54, 23, 49, 239, 217, 225, 234, 125,
        ]),
        U256::from_bytes_le([
            46, 99, 123, 45, 218, 247, 208, 220, 122, 180, 253, 32, 172, 59, 158, 201, 70, 181,
            241, 237, 32, 156, 81, 185, 54, 211, 188, 240, 47, 248, 108, 121,
        ]),
        U256::from_bytes_le([
            243, 129, 8, 23, 7, 71, 83, 203, 56, 151, 2, 39, 5, 252, 70, 24, 188, 63, 143, 28, 181,
            162, 52, 185, 42, 195, 51, 196, 179, 184, 137, 253,
        ]),
        U256::from_bytes_le([
            141, 95, 119, 33, 18, 20, 176, 150, 93, 167, 41, 126, 206, 69, 185, 196, 229, 80, 1,
            178, 170, 137, 201, 105, 120, 80, 192, 77, 76, 18, 98, 35,
        ]),
        U256::from_bytes_le([
            6, 18, 109, 74, 58, 67, 93, 133, 220, 177, 132, 48, 221, 216, 185, 194, 169, 73, 199,
            156, 38, 132, 32, 58, 150, 155, 94, 24, 8, 79, 245, 124,
        ]),
        U256::from_bytes_le([
            188, 223, 10, 146, 133, 252, 252, 24, 205, 204, 113, 254, 212, 145, 74, 92, 126, 184,
            195, 144, 236, 120, 59, 248, 224, 119, 163, 142, 44, 196, 168, 247,
        ]),
        U256::from_bytes_le([
            211, 110, 74, 239, 75, 148, 107, 87, 114, 242, 135, 132, 90, 97, 11, 141, 175, 132,
            241, 62, 168, 140, 94, 254, 151, 160, 149, 224, 149, 59, 129, 122,
        ]),
        U256::from_bytes_le([
            236, 169, 163, 181, 232, 83, 233, 196, 30, 132, 144, 2, 50, 40, 155, 174, 175, 74, 70,
            97, 225, 49, 16, 129, 159, 24, 7, 65, 144, 72, 183, 216,
        ]),
        U256::from_bytes_le([
            247, 231, 203, 65, 42, 166, 142, 4, 52, 109, 53, 75, 61, 132, 102, 75, 29, 88, 95, 217,
            240, 159, 185, 188, 80, 38, 202, 79, 55, 108, 72, 227,
        ]),
        U256::from_bytes_le([
            96, 144, 15, 104, 232, 89, 235, 245, 164, 7, 123, 109, 8, 54, 255, 151, 103, 219, 146,
            13, 98, 250, 24, 163, 219, 145, 23, 219, 185, 74, 4, 149,
        ]),
        U256::from_bytes_le([
            254, 87, 21, 64, 65, 73, 50, 66, 7, 76, 139, 18, 42, 221, 101, 230, 88, 79, 23, 42,
            240, 190, 225, 243, 211, 103, 157, 49, 201, 172, 196, 170,
        ]),
        U256::from_bytes_le([
            94, 123, 150, 101, 66, 84, 252, 57, 241, 241, 57, 126, 197, 230, 207, 167, 160, 226,
            189, 58, 103, 29, 165, 143, 150, 182, 254, 54, 192, 43, 157, 93,
        ]),
        U256::from_bytes_le([
            182, 122, 150, 78, 0, 245, 143, 213, 249, 84, 128, 193, 6, 202, 186, 203, 204, 52, 118,
            42, 244, 118, 167, 200, 188, 37, 215, 14, 25, 168, 11, 206,
        ]),
        U256::from_bytes_le([
            239, 129, 88, 175, 185, 140, 244, 130, 71, 5, 1, 151, 130, 193, 181, 135, 33, 55, 237,
            165, 155, 11, 59, 61, 250, 176, 71, 34, 209, 65, 230, 97,
        ]),
        U256::from_bytes_le([
            36, 124, 177, 150, 206, 40, 156, 215, 62, 73, 205, 154, 111, 62, 133, 3, 125, 155, 175,
            137, 134, 148, 210, 196, 63, 165, 34, 158, 201, 39, 82, 93,
        ]),
        U256::from_bytes_le([
            117, 255, 242, 22, 145, 192, 104, 34, 56, 108, 142, 203, 182, 46, 3, 6, 60, 153, 15,
            28, 176, 182, 88, 217, 57, 108, 182, 3, 225, 146, 77, 93,
        ]),
        U256::from_bytes_le([
            250, 219, 61, 245, 53, 35, 118, 45, 176, 37, 240, 35, 189, 179, 124, 42, 208, 86, 38,
            45, 101, 134, 123, 232, 6, 229, 8, 219, 52, 232, 59, 200,
        ]),
        U256::from_bytes_le([
            133, 67, 145, 91, 108, 105, 93, 20, 195, 231, 224, 236, 3, 35, 138, 236, 141, 226, 20,
            93, 74, 129, 250, 69, 168, 85, 97, 33, 112, 255, 6, 48,
        ]),
        U256::from_bytes_le([
            226, 90, 220, 61, 150, 194, 104, 186, 27, 251, 116, 197, 12, 138, 180, 119, 18, 100,
            54, 126, 1, 72, 19, 9, 120, 46, 145, 97, 107, 83, 231, 54,
        ]),
        U256::from_bytes_le([
            58, 102, 54, 157, 64, 7, 218, 71, 199, 202, 158, 109, 75, 106, 215, 193, 252, 94, 203,
            89, 132, 149, 244, 182, 110, 135, 75, 13, 222, 66, 21, 208,
        ]),
        U256::from_bytes_le([
            245, 140, 140, 27, 96, 42, 34, 146, 120, 179, 33, 100, 214, 197, 172, 246, 211, 213,
            50, 143, 107, 41, 113, 195, 90, 223, 227, 120, 190, 141, 136, 232,
        ]),
        U256::from_bytes_le([
            101, 25, 197, 121, 21, 221, 226, 199, 147, 84, 175, 134, 33, 41, 113, 61, 78, 76, 138,
            223, 255, 180, 135, 101, 28, 81, 211, 33, 32, 118, 47, 210,
        ]),
        U256::from_bytes_le([
            13, 19, 53, 68, 91, 245, 199, 141, 148, 202, 170, 12, 91, 224, 154, 115, 17, 198, 49,
            183, 189, 14, 145, 155, 57, 195, 169, 150, 14, 205, 83, 155,
        ]),
        U256::from_bytes_le([
            160, 168, 76, 46, 160, 45, 156, 155, 92, 183, 107, 206, 45, 135, 165, 23, 228, 109, 26,
            236, 108, 129, 216, 79, 47, 227, 148, 55, 88, 105, 63, 9,
        ]),
        U256::from_bytes_le([
            243, 84, 28, 252, 61, 233, 201, 123, 140, 135, 90, 247, 197, 137, 1, 14, 35, 164, 48,
            215, 23, 238, 106, 88, 203, 161, 160, 41, 188, 145, 61, 173,
        ]),
        U256::from_bytes_le([
            98, 173, 169, 74, 49, 56, 207, 218, 153, 69, 253, 64, 56, 81, 222, 143, 181, 99, 133,
            210, 122, 226, 195, 122, 43, 108, 37, 30, 233, 70, 14, 112,
        ]),
        U256::from_bytes_le([
            204, 228, 239, 123, 43, 185, 232, 152, 29, 188, 220, 50, 80, 197, 48, 33, 205, 61, 109,
            250, 21, 129, 46, 250, 35, 227, 100, 165, 171, 3, 150, 159,
        ]),
        U256::from_bytes_le([
            158, 135, 234, 46, 206, 251, 114, 83, 55, 126, 147, 196, 223, 188, 103, 21, 228, 191,
            215, 201, 47, 230, 22, 172, 220, 176, 113, 89, 209, 101, 174, 229,
        ]),
        U256::from_bytes_le([
            183, 194, 176, 184, 47, 191, 19, 18, 245, 29, 189, 145, 195, 66, 145, 125, 40, 52, 138,
            125, 59, 48, 147, 9, 98, 41, 137, 197, 213, 71, 94, 84,
        ]),
        U256::from_bytes_le([
            59, 242, 9, 40, 35, 50, 243, 211, 152, 164, 234, 224, 208, 62, 229, 15, 196, 203, 214,
            179, 229, 169, 175, 81, 196, 228, 79, 36, 147, 236, 29, 197,
        ]),
        U256::from_bytes_le([
            22, 40, 158, 101, 100, 125, 244, 37, 238, 132, 53, 60, 241, 185, 210, 123, 153, 35,
            100, 226, 90, 123, 71, 22, 237, 18, 200, 233, 174, 211, 60, 202,
        ]),
        U256::from_bytes_le([
            244, 35, 43, 30, 56, 158, 197, 228, 73, 79, 27, 212, 33, 239, 130, 198, 93, 23, 155,
            215, 129, 60, 172, 38, 74, 78, 1, 134, 143, 239, 156, 240,
        ]),
        U256::from_bytes_le([
            209, 50, 221, 166, 21, 101, 212, 43, 14, 178, 87, 135, 37, 152, 34, 241, 203, 52, 29,
            170, 28, 186, 35, 233, 237, 251, 43, 207, 126, 165, 182, 94,
        ]),
        U256::from_bytes_le([
            218, 241, 213, 91, 75, 62, 48, 73, 67, 118, 149, 7, 219, 191, 52, 199, 25, 113, 57,
            231, 196, 196, 13, 219, 97, 215, 48, 116, 149, 137, 12, 15,
        ]),
        U256::from_bytes_le([
            2, 251, 224, 107, 22, 168, 68, 241, 182, 178, 130, 201, 235, 88, 89, 202, 157, 107,
            138, 40, 205, 59, 120, 67, 29, 226, 55, 47, 215, 6, 224, 193,
        ]),
        U256::from_bytes_le([
            207, 105, 189, 240, 55, 220, 126, 87, 68, 1, 197, 217, 92, 219, 184, 60, 12, 47, 140,
            77, 242, 213, 251, 81, 237, 201, 232, 34, 50, 173, 146, 105,
        ]),
        U256::from_bytes_le([
            185, 13, 98, 86, 217, 146, 57, 2, 48, 156, 36, 187, 139, 94, 85, 38, 246, 252, 210,
            161, 26, 175, 252, 220, 96, 170, 71, 229, 78, 189, 125, 210,
        ]),
        U256::from_bytes_le([
            242, 205, 215, 234, 74, 74, 212, 214, 244, 227, 199, 153, 180, 139, 182, 62, 44, 97,
            185, 88, 131, 145, 249, 146, 123, 122, 160, 63, 37, 186, 179, 205,
        ]),
        U256::from_bytes_le([
            157, 57, 126, 95, 16, 35, 72, 80, 77, 139, 69, 122, 197, 64, 91, 68, 17, 14, 170, 1,
            196, 194, 128, 213, 23, 174, 147, 188, 22, 206, 202, 166,
        ]),
        U256::from_bytes_le([
            201, 3, 213, 102, 50, 192, 224, 240, 231, 39, 194, 68, 187, 16, 179, 68, 73, 94, 208,
            170, 43, 87, 87, 165, 148, 191, 229, 174, 52, 195, 78, 78,
        ]),
        U256::from_bytes_le([
            10, 219, 205, 129, 249, 154, 98, 194, 133, 85, 192, 120, 45, 92, 165, 118, 178, 87, 32,
            108, 89, 134, 168, 170, 39, 170, 230, 188, 194, 24, 58, 85,
        ]),
        U256::from_bytes_le([
            182, 28, 150, 165, 75, 149, 53, 66, 104, 173, 142, 206, 83, 133, 39, 117, 83, 32, 86,
            217, 225, 183, 79, 241, 3, 97, 250, 209, 161, 235, 92, 97,
        ]),
        U256::from_bytes_le([
            233, 79, 97, 206, 161, 233, 234, 39, 170, 131, 174, 143, 220, 106, 72, 219, 51, 166,
            38, 118, 190, 43, 74, 91, 154, 245, 72, 132, 8, 19, 155, 111,
        ]),
        U256::from_bytes_le([
            243, 39, 52, 136, 39, 154, 129, 51, 249, 117, 88, 251, 195, 123, 108, 102, 253, 174,
            171, 44, 134, 213, 125, 214, 36, 197, 39, 149, 139, 54, 197, 7,
        ]),
        U256::from_bytes_le([
            173, 242, 253, 254, 25, 38, 98, 252, 58, 201, 190, 167, 206, 43, 199, 109, 105, 141,
            139, 76, 23, 55, 189, 236, 73, 5, 210, 221, 154, 230, 76, 206,
        ]),
        U256::from_bytes_le([
            202, 135, 236, 206, 107, 156, 25, 3, 197, 205, 111, 150, 67, 56, 162, 241, 134, 252,
            204, 159, 166, 58, 175, 110, 29, 75, 190, 131, 144, 243, 85, 249,
        ]),
        U256::from_bytes_le([
            232, 82, 1, 209, 131, 202, 35, 218, 132, 139, 62, 6, 183, 180, 241, 36, 142, 140, 51,
            87, 159, 148, 109, 87, 58, 161, 201, 44, 10, 148, 248, 127,
        ]),
        U256::from_bytes_le([
            178, 4, 246, 130, 93, 3, 167, 99, 86, 83, 89, 49, 101, 145, 142, 57, 159, 16, 89, 150,
            113, 25, 96, 131, 118, 149, 84, 198, 183, 190, 34, 144,
        ]),
        U256::from_bytes_le([
            192, 226, 93, 89, 174, 206, 220, 26, 110, 198, 183, 128, 93, 250, 187, 198, 2, 250,
            164, 33, 204, 65, 134, 63, 183, 169, 151, 94, 173, 137, 183, 203,
        ]),
        U256::from_bytes_le([
            40, 194, 216, 144, 150, 34, 141, 73, 115, 244, 84, 210, 182, 197, 0, 35, 11, 65, 234,
            121, 38, 44, 228, 190, 78, 41, 50, 186, 169, 165, 8, 221,
        ]),
        U256::from_bytes_le([
            47, 176, 101, 198, 32, 139, 140, 223, 240, 192, 136, 55, 186, 118, 54, 83, 230, 157,
            255, 201, 28, 205, 183, 106, 5, 56, 147, 30, 134, 188, 63, 136,
        ]),
        U256::from_bytes_le([
            110, 55, 208, 214, 231, 195, 192, 200, 158, 83, 6, 41, 151, 115, 66, 55, 102, 250, 101,
            13, 133, 93, 140, 119, 177, 150, 49, 110, 242, 141, 83, 85,
        ]),
        U256::from_bytes_le([
            111, 245, 27, 208, 83, 199, 223, 91, 88, 64, 219, 24, 220, 113, 56, 10, 197, 200, 179,
            98, 20, 73, 164, 60, 210, 65, 66, 103, 3, 215, 107, 171,
        ]),
        U256::from_bytes_le([
            219, 127, 44, 139, 50, 187, 16, 20, 28, 153, 32, 158, 144, 6, 8, 28, 106, 227, 4, 157,
            174, 189, 115, 175, 8, 216, 234, 17, 191, 49, 208, 200,
        ]),
        U256::from_bytes_le([
            203, 25, 92, 228, 61, 116, 66, 34, 164, 87, 185, 148, 98, 133, 115, 111, 163, 161, 230,
            159, 132, 148, 152, 8, 214, 70, 131, 200, 224, 2, 82, 49,
        ]),
        U256::from_bytes_le([
            111, 211, 102, 53, 95, 246, 59, 92, 68, 98, 183, 125, 173, 247, 23, 52, 149, 238, 205,
            231, 191, 99, 28, 63, 210, 36, 143, 143, 110, 24, 78, 111,
        ]),
        U256::from_bytes_le([
            171, 142, 163, 106, 88, 232, 96, 34, 176, 34, 111, 173, 40, 19, 95, 45, 205, 58, 195,
            175, 139, 187, 214, 57, 239, 91, 237, 143, 186, 167, 75, 147,
        ]),
        U256::from_bytes_le([
            26, 180, 40, 179, 118, 199, 216, 158, 70, 140, 114, 153, 239, 236, 131, 34, 109, 163,
            71, 172, 79, 157, 229, 11, 96, 103, 244, 176, 101, 202, 65, 199,
        ]),
        U256::from_bytes_le([
            135, 14, 32, 176, 109, 111, 113, 152, 117, 45, 160, 207, 20, 20, 206, 197, 255, 141,
            188, 0, 40, 200, 204, 11, 55, 189, 187, 146, 179, 223, 125, 19,
        ]),
        U256::from_bytes_le([
            144, 174, 97, 238, 24, 12, 123, 241, 186, 201, 94, 99, 151, 127, 125, 213, 53, 80, 129,
            26, 24, 161, 8, 68, 44, 94, 19, 84, 150, 173, 65, 27,
        ]),
        U256::from_bytes_le([
            27, 139, 201, 8, 7, 44, 99, 149, 33, 15, 144, 36, 16, 221, 15, 247, 254, 220, 197, 254,
            3, 75, 104, 224, 141, 48, 178, 12, 85, 55, 238, 96,
        ]),
        U256::from_bytes_le([
            189, 173, 112, 60, 135, 226, 137, 237, 17, 135, 96, 134, 123, 123, 81, 173, 173, 169,
            127, 100, 34, 115, 188, 207, 56, 72, 0, 73, 60, 39, 251, 232,
        ]),
        U256::from_bytes_le([
            169, 171, 169, 216, 98, 212, 83, 230, 109, 200, 96, 166, 184, 78, 179, 207, 2, 222, 91,
            174, 174, 253, 235, 79, 91, 226, 225, 56, 42, 195, 12, 145,
        ]),
        U256::from_bytes_le([
            83, 176, 126, 111, 14, 255, 212, 252, 246, 111, 4, 87, 185, 191, 81, 218, 167, 153,
            223, 182, 162, 169, 93, 84, 78, 32, 113, 54, 201, 164, 77, 142,
        ]),
        U256::from_bytes_le([
            24, 160, 14, 44, 251, 229, 166, 211, 134, 91, 240, 84, 144, 186, 217, 71, 202, 121,
            197, 45, 86, 25, 4, 82, 141, 14, 59, 188, 76, 157, 144, 111,
        ]),
        U256::from_bytes_le([
            74, 42, 166, 57, 150, 70, 181, 40, 130, 17, 221, 230, 38, 182, 98, 129, 136, 42, 238,
            153, 148, 32, 122, 182, 12, 137, 77, 76, 23, 240, 33, 100,
        ]),
        U256::from_bytes_le([
            238, 89, 127, 60, 142, 220, 219, 221, 250, 51, 72, 140, 208, 237, 124, 150, 94, 151,
            143, 124, 12, 97, 73, 11, 232, 184, 173, 26, 18, 22, 147, 235,
        ]),
        U256::from_bytes_le([
            162, 220, 134, 176, 173, 39, 243, 183, 170, 232, 171, 87, 203, 30, 129, 234, 167, 214,
            105, 105, 193, 98, 115, 0, 168, 252, 138, 126, 198, 152, 97, 79,
        ]),
        U256::from_bytes_le([
            118, 129, 196, 186, 6, 199, 234, 237, 61, 233, 85, 230, 243, 73, 47, 248, 68, 174, 233,
            154, 237, 243, 194, 151, 122, 14, 5, 205, 66, 218, 39, 76,
        ]),
        U256::from_bytes_le([
            189, 7, 250, 236, 144, 109, 167, 161, 242, 84, 145, 114, 127, 180, 193, 174, 142, 215,
            43, 32, 109, 184, 61, 249, 218, 12, 245, 248, 176, 122, 102, 124,
        ]),
        U256::from_bytes_le([
            186, 237, 137, 167, 158, 108, 0, 48, 77, 239, 204, 234, 214, 122, 214, 105, 68, 250,
            48, 100, 116, 148, 112, 103, 194, 123, 92, 112, 59, 17, 129, 18,
        ]),
        U256::from_bytes_le([
            230, 189, 254, 240, 214, 176, 215, 36, 172, 98, 52, 18, 205, 205, 179, 151, 109, 155,
            217, 67, 131, 248, 73, 129, 147, 98, 109, 64, 110, 246, 223, 197,
        ]),
        U256::from_bytes_le([
            206, 73, 223, 59, 193, 40, 138, 139, 28, 36, 32, 169, 235, 212, 163, 15, 167, 33, 91,
            189, 48, 147, 53, 114, 48, 127, 191, 43, 157, 149, 166, 183,
        ]),
        U256::from_bytes_le([
            7, 31, 53, 102, 75, 234, 244, 247, 27, 116, 62, 182, 2, 101, 111, 3, 218, 153, 94, 13,
            122, 188, 167, 139, 178, 203, 119, 31, 85, 111, 191, 79,
        ]),
        U256::from_bytes_le([
            172, 61, 123, 132, 19, 177, 38, 185, 191, 7, 13, 48, 93, 37, 78, 170, 46, 3, 29, 171,
            103, 4, 230, 93, 129, 139, 40, 234, 105, 228, 86, 132,
        ]),
        U256::from_bytes_le([
            7, 136, 233, 32, 26, 0, 59, 76, 86, 210, 169, 251, 112, 53, 251, 223, 104, 254, 32,
            132, 40, 159, 76, 154, 60, 98, 36, 50, 27, 108, 114, 225,
        ]),
        U256::from_bytes_le([
            147, 254, 20, 214, 49, 130, 245, 226, 254, 35, 0, 156, 185, 159, 124, 252, 111, 4, 73,
            241, 23, 215, 243, 79, 53, 126, 16, 238, 109, 124, 175, 107,
        ]),
        U256::from_bytes_le([
            192, 246, 149, 178, 158, 82, 187, 21, 153, 154, 172, 25, 91, 221, 35, 97, 23, 175, 208,
            184, 84, 48, 114, 85, 10, 121, 196, 21, 245, 135, 183, 143,
        ]),
        U256::from_bytes_le([
            40, 128, 165, 68, 109, 15, 118, 132, 170, 11, 173, 131, 229, 112, 180, 121, 201, 29,
            250, 36, 44, 156, 177, 79, 93, 252, 209, 67, 253, 63, 220, 186,
        ]),
        U256::from_bytes_le([
            82, 197, 160, 117, 31, 247, 80, 142, 12, 199, 180, 130, 207, 184, 207, 77, 179, 160,
            244, 156, 54, 3, 45, 82, 137, 120, 135, 218, 216, 213, 24, 166,
        ]),
        U256::from_bytes_le([
            226, 80, 102, 129, 227, 52, 229, 76, 156, 1, 224, 34, 248, 202, 121, 120, 224, 80, 197,
            237, 224, 117, 153, 243, 116, 87, 183, 67, 91, 236, 53, 156,
        ]),
        U256::from_bytes_le([
            145, 211, 246, 235, 78, 157, 60, 181, 15, 212, 66, 3, 91, 79, 121, 12, 180, 15, 184,
            223, 141, 76, 190, 73, 194, 6, 6, 177, 8, 98, 58, 80,
        ]),
        U256::from_bytes_le([
            173, 169, 146, 245, 212, 127, 234, 185, 241, 4, 90, 247, 87, 205, 232, 101, 240, 119,
            115, 160, 245, 165, 123, 163, 234, 40, 9, 88, 190, 147, 147, 124,
        ]),
        U256::from_bytes_le([
            4, 168, 65, 81, 43, 203, 14, 108, 43, 18, 159, 0, 20, 105, 141, 237, 105, 106, 227,
            223, 15, 26, 147, 183, 230, 13, 57, 157, 238, 49, 166, 186,
        ]),
        U256::from_bytes_le([
            198, 214, 48, 144, 167, 91, 232, 111, 209, 58, 114, 15, 240, 182, 204, 45, 116, 251,
            222, 240, 228, 63, 27, 211, 5, 53, 253, 190, 73, 83, 134, 218,
        ]),
        U256::from_bytes_le([
            233, 214, 227, 234, 221, 115, 81, 154, 157, 140, 184, 240, 230, 22, 195, 118, 181, 90,
            121, 160, 33, 254, 146, 16, 102, 65, 174, 75, 115, 86, 69, 13,
        ]),
        U256::from_bytes_le([
            52, 126, 127, 9, 14, 226, 232, 58, 40, 238, 142, 68, 238, 102, 33, 24, 127, 248, 7,
            160, 51, 217, 218, 174, 17, 38, 88, 151, 236, 156, 241, 61,
        ]),
        U256::from_bytes_le([
            4, 96, 62, 236, 98, 148, 190, 58, 183, 173, 98, 111, 4, 45, 53, 150, 139, 84, 211, 4,
            49, 164, 215, 140, 236, 187, 5, 63, 90, 63, 6, 239,
        ]),
        U256::from_bytes_le([
            97, 20, 127, 198, 95, 98, 80, 201, 209, 184, 149, 13, 179, 61, 90, 42, 253, 32, 82,
            211, 51, 142, 193, 102, 193, 164, 57, 170, 242, 238, 43, 118,
        ]),
        U256::from_bytes_le([
            204, 151, 89, 132, 95, 150, 176, 17, 179, 5, 101, 97, 176, 19, 75, 105, 17, 251, 159,
            232, 48, 10, 164, 82, 127, 29, 13, 26, 119, 73, 221, 199,
        ]),
        U256::from_bytes_le([
            217, 89, 103, 45, 84, 75, 185, 42, 67, 213, 155, 152, 47, 198, 192, 144, 26, 222, 50,
            183, 24, 147, 3, 101, 224, 149, 240, 53, 222, 26, 25, 224,
        ]),
        U256::from_bytes_le([
            13, 167, 13, 36, 254, 104, 193, 124, 34, 84, 170, 144, 164, 60, 176, 124, 149, 38, 90,
            164, 45, 180, 83, 59, 83, 74, 191, 188, 79, 212, 140, 132,
        ]),
        U256::from_bytes_le([
            171, 107, 157, 80, 114, 113, 44, 200, 250, 22, 2, 237, 130, 76, 242, 98, 108, 160, 66,
            77, 92, 20, 255, 162, 153, 208, 242, 95, 70, 127, 18, 210,
        ]),
        U256::from_bytes_le([
            203, 95, 219, 158, 132, 205, 42, 96, 206, 190, 250, 63, 229, 120, 188, 12, 42, 19, 106,
            220, 234, 207, 53, 240, 140, 99, 212, 165, 69, 112, 14, 79,
        ]),
        U256::from_bytes_le([
            210, 173, 137, 167, 154, 9, 75, 1, 145, 6, 73, 112, 185, 148, 94, 121, 141, 148, 236,
            116, 198, 19, 134, 171, 79, 108, 111, 63, 227, 12, 112, 207,
        ]),
        U256::from_bytes_le([
            173, 107, 209, 159, 4, 106, 110, 133, 7, 235, 27, 146, 250, 15, 155, 1, 108, 202, 224,
            46, 130, 216, 49, 201, 80, 226, 219, 137, 79, 95, 57, 193,
        ]),
        U256::from_bytes_le([
            235, 113, 209, 111, 10, 91, 60, 39, 65, 22, 227, 22, 47, 29, 33, 83, 191, 126, 206,
            106, 227, 122, 137, 252, 225, 105, 83, 112, 18, 212, 186, 90,
        ]),
        U256::from_bytes_le([
            6, 171, 228, 189, 230, 222, 88, 163, 117, 200, 201, 47, 165, 112, 199, 115, 103, 228,
            251, 15, 96, 62, 67, 63, 32, 183, 223, 66, 250, 178, 233, 254,
        ]),
        U256::from_bytes_le([
            197, 203, 193, 64, 21, 202, 212, 187, 20, 19, 119, 67, 229, 6, 226, 177, 119, 212, 94,
            35, 96, 157, 0, 87, 136, 80, 104, 226, 89, 131, 101, 253,
        ]),
        U256::from_bytes_le([
            33, 228, 50, 129, 145, 43, 74, 225, 52, 45, 112, 149, 228, 46, 31, 135, 150, 197, 32,
            154, 142, 193, 167, 114, 108, 245, 72, 190, 198, 180, 199, 234,
        ]),
        U256::from_bytes_le([
            54, 249, 147, 136, 230, 232, 227, 61, 31, 50, 249, 179, 216, 84, 144, 172, 63, 102,
            157, 184, 37, 188, 133, 211, 129, 22, 166, 183, 102, 122, 184, 65,
        ]),
        U256::from_bytes_le([
            59, 85, 236, 240, 128, 160, 133, 80, 200, 119, 58, 59, 139, 187, 167, 17, 144, 250,
            101, 128, 81, 79, 237, 98, 105, 117, 156, 189, 69, 73, 46, 32,
        ]),
        U256::from_bytes_le([
            254, 197, 54, 164, 89, 57, 91, 33, 182, 112, 81, 235, 81, 106, 247, 25, 132, 193, 32,
            113, 71, 183, 101, 124, 183, 148, 67, 121, 99, 242, 187, 143,
        ]),
        U256::from_bytes_le([
            221, 41, 244, 39, 200, 156, 131, 235, 187, 21, 215, 117, 99, 149, 195, 245, 54, 197,
            171, 118, 67, 9, 114, 15, 157, 55, 80, 218, 216, 128, 160, 138,
        ]),
        U256::from_bytes_le([
            51, 130, 32, 179, 22, 147, 120, 186, 104, 96, 107, 68, 170, 16, 181, 193, 95, 215, 171,
            157, 179, 193, 57, 202, 17, 246, 192, 110, 151, 60, 48, 169,
        ]),
        U256::from_bytes_le([
            244, 249, 92, 18, 237, 232, 207, 169, 41, 52, 39, 23, 1, 215, 220, 180, 227, 118, 158,
            51, 171, 188, 99, 201, 237, 172, 81, 204, 135, 252, 181, 200,
        ]),
        U256::from_bytes_le([
            241, 0, 236, 121, 39, 17, 129, 40, 120, 119, 192, 59, 245, 221, 29, 5, 135, 225, 156,
            12, 178, 134, 14, 163, 23, 223, 196, 250, 59, 236, 164, 25,
        ]),
        U256::from_bytes_le([
            78, 129, 251, 100, 127, 252, 243, 170, 98, 39, 81, 62, 44, 175, 36, 185, 54, 157, 189,
            118, 182, 49, 220, 6, 34, 110, 172, 74, 159, 115, 65, 71,
        ]),
        U256::from_bytes_le([
            18, 218, 127, 104, 236, 1, 123, 16, 70, 255, 100, 82, 232, 21, 12, 101, 227, 91, 175,
            141, 215, 240, 222, 97, 225, 212, 124, 213, 21, 159, 125, 82,
        ]),
        U256::from_bytes_le([
            146, 8, 112, 24, 150, 14, 55, 69, 112, 91, 92, 80, 34, 97, 201, 20, 207, 226, 191, 19,
            172, 139, 5, 207, 42, 190, 2, 254, 133, 204, 27, 146,
        ]),
        U256::from_bytes_le([
            188, 54, 219, 217, 102, 183, 60, 124, 231, 12, 158, 155, 86, 0, 250, 83, 253, 74, 96,
            222, 4, 69, 93, 151, 170, 176, 70, 8, 81, 58, 62, 101,
        ]),
        U256::from_bytes_le([
            83, 81, 24, 140, 121, 55, 244, 41, 219, 173, 60, 148, 236, 103, 131, 208, 196, 50, 65,
            25, 229, 97, 210, 55, 47, 24, 185, 204, 25, 82, 229, 214,
        ]),
        U256::from_bytes_le([
            153, 46, 212, 42, 247, 228, 0, 7, 53, 112, 177, 202, 243, 67, 35, 67, 235, 119, 152,
            12, 183, 47, 182, 4, 119, 189, 197, 250, 101, 223, 201, 178,
        ]),
        U256::from_bytes_le([
            104, 151, 108, 62, 201, 166, 215, 36, 186, 22, 88, 1, 15, 246, 22, 13, 7, 79, 140, 80,
            201, 6, 79, 169, 170, 181, 109, 214, 12, 93, 246, 84,
        ]),
        U256::from_bytes_le([
            230, 183, 242, 80, 238, 207, 63, 147, 206, 105, 196, 177, 39, 121, 116, 149, 167, 106,
            21, 10, 135, 237, 108, 216, 86, 42, 9, 99, 182, 37, 223, 49,
        ]),
        U256::from_bytes_le([
            144, 69, 55, 103, 35, 201, 8, 131, 193, 71, 95, 194, 118, 74, 239, 185, 245, 29, 248,
            152, 112, 74, 26, 184, 250, 124, 228, 9, 82, 62, 19, 86,
        ]),
        U256::from_bytes_le([
            17, 5, 91, 47, 55, 177, 16, 69, 113, 35, 226, 241, 152, 108, 55, 252, 30, 205, 31, 79,
            24, 43, 231, 86, 108, 70, 15, 144, 32, 217, 30, 120,
        ]),
        U256::from_bytes_le([
            235, 59, 211, 254, 31, 243, 94, 150, 156, 203, 22, 190, 42, 122, 64, 21, 48, 208, 217,
            94, 194, 44, 32, 78, 196, 95, 115, 15, 31, 69, 45, 33,
        ]),
        U256::from_bytes_le([
            147, 3, 137, 237, 125, 89, 131, 198, 18, 12, 184, 219, 7, 158, 72, 145, 54, 245, 232,
            219, 1, 24, 118, 122, 41, 17, 228, 162, 82, 148, 154, 194,
        ]),
        U256::from_bytes_le([
            245, 78, 255, 93, 128, 86, 149, 200, 120, 223, 0, 85, 61, 155, 9, 131, 90, 202, 171,
            164, 218, 171, 193, 117, 2, 195, 231, 24, 194, 162, 155, 74,
        ]),
        U256::from_bytes_le([
            83, 195, 210, 45, 82, 219, 30, 94, 254, 254, 46, 60, 24, 16, 105, 15, 151, 249, 21,
            195, 200, 164, 161, 42, 221, 252, 165, 240, 21, 226, 177, 72,
        ]),
        U256::from_bytes_le([
            47, 91, 5, 83, 170, 34, 13, 209, 74, 245, 122, 175, 107, 178, 99, 92, 100, 65, 17, 123,
            245, 98, 223, 187, 218, 37, 192, 176, 229, 104, 80, 220,
        ]),
        U256::from_bytes_le([
            5, 171, 4, 216, 110, 8, 110, 86, 72, 14, 128, 26, 6, 215, 207, 36, 179, 17, 8, 170,
            239, 134, 127, 10, 22, 226, 214, 254, 178, 133, 23, 66,
        ]),
        U256::from_bytes_le([
            216, 148, 72, 215, 241, 213, 245, 195, 64, 42, 246, 53, 9, 103, 72, 75, 110, 78, 183,
            191, 39, 191, 72, 170, 137, 123, 84, 162, 238, 216, 110, 187,
        ]),
        U256::from_bytes_le([
            187, 45, 74, 127, 205, 246, 95, 184, 156, 94, 230, 237, 0, 58, 147, 122, 9, 20, 193,
            155, 123, 72, 145, 143, 124, 235, 7, 22, 70, 50, 8, 70,
        ]),
        U256::from_bytes_le([
            124, 192, 234, 15, 72, 110, 218, 19, 13, 241, 15, 249, 91, 168, 26, 16, 119, 165, 254,
            120, 217, 239, 55, 200, 101, 86, 239, 105, 247, 195, 195, 103,
        ]),
        U256::from_bytes_le([
            175, 218, 20, 224, 175, 5, 222, 10, 165, 118, 37, 194, 44, 146, 181, 198, 164, 34, 101,
            223, 106, 102, 253, 102, 81, 116, 218, 149, 134, 83, 221, 67,
        ]),
        U256::from_bytes_le([
            247, 186, 63, 2, 0, 13, 48, 57, 145, 124, 169, 29, 237, 237, 166, 205, 99, 163, 205,
            20, 165, 92, 75, 56, 121, 218, 32, 147, 201, 251, 5, 8,
        ]),
        U256::from_bytes_le([
            147, 143, 10, 173, 216, 63, 46, 113, 102, 32, 68, 50, 207, 40, 250, 244, 195, 63, 137,
            6, 112, 72, 169, 138, 149, 149, 134, 139, 3, 175, 179, 5,
        ]),
        U256::from_bytes_le([
            170, 194, 123, 101, 94, 186, 101, 112, 244, 148, 254, 114, 183, 0, 105, 136, 28, 37,
            52, 108, 156, 139, 30, 135, 67, 105, 90, 230, 119, 90, 236, 194,
        ]),
        U256::from_bytes_le([
            190, 79, 223, 55, 125, 171, 145, 245, 18, 137, 78, 255, 84, 82, 214, 27, 76, 253, 6,
            54, 155, 5, 157, 168, 83, 182, 72, 191, 126, 10, 195, 202,
        ]),
        U256::from_bytes_le([
            221, 41, 35, 131, 162, 106, 80, 190, 102, 88, 123, 205, 166, 202, 232, 192, 120, 134,
            15, 22, 161, 91, 164, 193, 203, 107, 7, 188, 149, 211, 231, 182,
        ]),
        U256::from_bytes_le([
            18, 176, 26, 33, 51, 193, 146, 74, 6, 59, 120, 27, 125, 146, 30, 26, 97, 48, 246, 138,
            126, 164, 164, 254, 45, 25, 130, 184, 146, 167, 47, 136,
        ]),
        U256::from_bytes_le([
            148, 52, 81, 62, 248, 134, 161, 31, 182, 214, 6, 10, 10, 247, 55, 124, 220, 197, 169,
            36, 146, 11, 252, 91, 60, 136, 236, 11, 94, 46, 48, 235,
        ]),
        U256::from_bytes_le([
            163, 100, 249, 230, 81, 42, 94, 52, 38, 94, 244, 190, 175, 9, 127, 3, 60, 227, 189, 6,
            167, 201, 167, 178, 175, 10, 84, 159, 116, 139, 72, 230,
        ]),
        U256::from_bytes_le([
            248, 174, 149, 211, 182, 89, 31, 89, 123, 106, 132, 113, 81, 222, 16, 228, 249, 104,
            173, 62, 34, 64, 79, 16, 7, 192, 187, 35, 117, 52, 200, 232,
        ]),
        U256::from_bytes_le([
            11, 8, 28, 218, 106, 172, 70, 138, 105, 42, 212, 192, 131, 32, 26, 51, 221, 105, 209,
            131, 123, 58, 5, 201, 87, 136, 35, 36, 90, 145, 31, 60,
        ]),
        U256::from_bytes_le([
            193, 150, 182, 144, 56, 144, 94, 44, 36, 123, 182, 19, 220, 183, 70, 45, 48, 83, 50,
            86, 61, 69, 160, 184, 142, 132, 137, 109, 22, 13, 29, 19,
        ]),
        U256::from_bytes_le([
            11, 49, 110, 158, 143, 157, 78, 237, 16, 209, 210, 11, 13, 194, 177, 212, 190, 196,
            110, 28, 226, 91, 122, 235, 9, 22, 159, 58, 113, 143, 56, 103,
        ]),
        U256::from_bytes_le([
            77, 70, 85, 3, 46, 75, 80, 222, 162, 247, 206, 157, 150, 244, 193, 18, 10, 202, 195,
            109, 191, 89, 250, 137, 50, 33, 38, 71, 28, 15, 204, 117,
        ]),
        U256::from_bytes_le([
            96, 125, 255, 240, 73, 51, 134, 108, 189, 58, 179, 32, 130, 249, 6, 75, 242, 79, 90,
            184, 1, 229, 55, 82, 213, 54, 165, 71, 9, 199, 24, 239,
        ]),
        U256::from_bytes_le([
            103, 157, 135, 118, 113, 6, 22, 65, 89, 13, 236, 24, 85, 85, 104, 205, 215, 232, 134,
            70, 225, 104, 39, 13, 45, 34, 34, 43, 55, 126, 63, 73,
        ]),
        U256::from_bytes_le([
            122, 86, 39, 197, 211, 151, 16, 179, 70, 76, 115, 64, 222, 243, 237, 206, 118, 123,
            108, 19, 33, 13, 68, 242, 33, 112, 47, 137, 32, 239, 145, 223,
        ]),
        U256::from_bytes_le([
            2, 93, 220, 89, 220, 60, 194, 197, 116, 226, 145, 16, 68, 22, 24, 192, 27, 84, 197, 86,
            132, 211, 234, 140, 99, 102, 192, 34, 106, 130, 239, 194,
        ]),
        U256::from_bytes_le([
            86, 187, 48, 184, 152, 188, 165, 14, 228, 230, 255, 113, 188, 77, 186, 27, 226, 237,
            129, 55, 222, 167, 15, 248, 115, 89, 96, 134, 121, 166, 29, 163,
        ]),
        U256::from_bytes_le([
            224, 250, 203, 190, 223, 197, 168, 186, 171, 233, 247, 154, 176, 47, 13, 172, 12, 165,
            78, 129, 143, 227, 109, 249, 254, 64, 65, 209, 116, 141, 231, 210,
        ]),
        U256::from_bytes_le([
            21, 154, 185, 148, 116, 178, 9, 161, 182, 103, 97, 112, 103, 162, 209, 77, 245, 218,
            230, 23, 59, 102, 205, 127, 4, 252, 113, 141, 160, 85, 241, 106,
        ]),
        U256::from_bytes_le([
            53, 193, 5, 119, 156, 152, 146, 153, 246, 169, 152, 209, 33, 73, 160, 241, 74, 66, 219,
            210, 95, 128, 173, 25, 145, 52, 250, 62, 184, 34, 150, 144,
        ]),
        U256::from_bytes_le([
            128, 212, 182, 27, 139, 81, 191, 10, 141, 219, 138, 240, 86, 233, 191, 224, 129, 127,
            221, 82, 115, 3, 101, 138, 176, 215, 76, 135, 196, 247, 253, 227,
        ]),
        U256::from_bytes_le([
            214, 25, 187, 210, 124, 214, 75, 113, 89, 254, 19, 190, 57, 163, 30, 20, 26, 157, 134,
            5, 163, 118, 245, 98, 168, 117, 223, 167, 29, 226, 148, 104,
        ]),
        U256::from_bytes_le([
            206, 148, 167, 163, 100, 187, 244, 23, 70, 58, 12, 16, 215, 112, 56, 155, 192, 113,
            125, 210, 0, 110, 76, 81, 39, 90, 139, 108, 209, 88, 121, 82,
        ]),
        U256::from_bytes_le([
            81, 109, 41, 159, 167, 129, 85, 212, 184, 230, 184, 119, 80, 105, 47, 215, 116, 200,
            98, 189, 140, 74, 204, 74, 223, 196, 179, 56, 165, 224, 248, 108,
        ]),
        U256::from_bytes_le([
            222, 161, 45, 135, 168, 149, 171, 163, 185, 27, 158, 120, 212, 188, 210, 23, 160, 233,
            168, 6, 158, 178, 163, 237, 225, 245, 183, 146, 125, 233, 49, 198,
        ]),
        U256::from_bytes_le([
            233, 23, 125, 56, 223, 81, 92, 167, 19, 117, 68, 163, 133, 40, 116, 14, 131, 239, 39,
            170, 219, 175, 31, 215, 142, 9, 89, 161, 92, 57, 214, 213,
        ]),
        U256::from_bytes_le([
            34, 49, 129, 2, 79, 13, 143, 8, 132, 143, 73, 164, 65, 73, 58, 152, 64, 14, 47, 125,
            217, 90, 192, 196, 205, 192, 62, 0, 55, 7, 80, 231,
        ]),
        U256::from_bytes_le([
            96, 223, 142, 126, 99, 192, 77, 185, 143, 149, 101, 216, 149, 95, 10, 220, 249, 145,
            206, 126, 99, 7, 59, 92, 9, 232, 66, 47, 68, 181, 160, 185,
        ]),
        U256::from_bytes_le([
            241, 39, 170, 234, 26, 144, 18, 135, 255, 47, 227, 168, 246, 51, 88, 95, 139, 60, 101,
            135, 225, 173, 73, 233, 196, 255, 147, 218, 167, 15, 175, 106,
        ]),
        U256::from_bytes_le([
            24, 116, 237, 83, 15, 98, 205, 217, 53, 204, 83, 142, 113, 249, 235, 81, 119, 110, 97,
            96, 251, 35, 241, 157, 176, 57, 129, 208, 132, 90, 229, 251,
        ]),
        U256::from_bytes_le([
            95, 225, 38, 72, 194, 7, 60, 158, 119, 113, 249, 135, 77, 51, 206, 29, 197, 51, 253,
            122, 89, 209, 177, 171, 30, 255, 29, 78, 90, 12, 150, 13,
        ]),
        U256::from_bytes_le([
            33, 35, 103, 31, 179, 187, 28, 23, 80, 27, 210, 135, 246, 128, 26, 85, 199, 17, 224,
            181, 114, 161, 36, 223, 240, 244, 2, 53, 184, 99, 131, 49,
        ]),
        U256::from_bytes_le([
            76, 103, 143, 138, 15, 20, 58, 132, 139, 196, 205, 15, 165, 225, 117, 41, 57, 110, 180,
            142, 221, 60, 189, 216, 173, 95, 76, 243, 92, 222, 156, 73,
        ]),
        U256::from_bytes_le([
            113, 63, 23, 9, 61, 166, 59, 137, 139, 223, 144, 119, 10, 216, 251, 127, 76, 251, 4,
            180, 181, 12, 31, 40, 188, 84, 253, 97, 238, 243, 141, 69,
        ]),
        U256::from_bytes_le([
            77, 154, 0, 131, 143, 255, 118, 60, 153, 162, 17, 185, 119, 117, 220, 42, 121, 165,
            135, 141, 66, 9, 174, 21, 125, 60, 162, 115, 23, 187, 84, 142,
        ]),
        U256::from_bytes_le([
            194, 99, 62, 77, 157, 226, 100, 237, 139, 5, 140, 42, 22, 105, 30, 253, 18, 96, 162,
            235, 239, 56, 173, 164, 191, 221, 110, 7, 255, 58, 181, 12,
        ]),
        U256::from_bytes_le([
            184, 18, 50, 224, 67, 200, 93, 98, 143, 156, 131, 115, 27, 128, 39, 106, 118, 56, 87,
            1, 153, 54, 135, 225, 110, 37, 62, 49, 51, 96, 159, 249,
        ]),
        U256::from_bytes_le([
            67, 143, 17, 157, 34, 133, 230, 147, 11, 82, 33, 75, 195, 142, 69, 76, 83, 217, 21,
            228, 247, 200, 175, 254, 89, 158, 192, 93, 127, 101, 200, 42,
        ]),
        U256::from_bytes_le([
            245, 188, 249, 24, 97, 78, 217, 101, 162, 222, 123, 154, 245, 235, 190, 166, 133, 191,
            111, 111, 185, 164, 152, 10, 206, 127, 228, 159, 65, 250, 231, 150,
        ]),
        U256::from_bytes_le([
            63, 214, 9, 65, 255, 27, 204, 115, 168, 196, 171, 162, 186, 178, 123, 229, 10, 38, 56,
            72, 60, 132, 194, 250, 253, 211, 52, 100, 120, 227, 186, 168,
        ]),
        U256::from_bytes_le([
            176, 2, 195, 108, 65, 169, 13, 66, 85, 206, 18, 120, 241, 71, 205, 254, 18, 180, 34,
            236, 120, 29, 35, 104, 3, 20, 245, 168, 165, 39, 25, 89,
        ]),
        U256::from_bytes_le([
            72, 46, 242, 27, 98, 53, 221, 118, 219, 215, 208, 169, 249, 31, 46, 50, 143, 213, 124,
            135, 31, 222, 152, 98, 84, 98, 208, 163, 207, 35, 158, 130,
        ]),
        U256::from_bytes_le([
            83, 126, 157, 42, 179, 245, 120, 233, 13, 226, 243, 36, 206, 228, 23, 222, 249, 61,
            237, 60, 152, 88, 117, 139, 57, 252, 16, 100, 99, 241, 243, 62,
        ]),
        U256::from_bytes_le([
            188, 38, 78, 101, 124, 226, 32, 246, 36, 146, 6, 159, 105, 14, 207, 177, 236, 189, 244,
            252, 169, 141, 88, 148, 174, 240, 217, 71, 48, 203, 123, 60,
        ]),
        U256::from_bytes_le([
            154, 30, 35, 94, 32, 1, 234, 174, 110, 225, 64, 113, 177, 87, 169, 211, 62, 212, 248,
            240, 38, 66, 90, 95, 5, 158, 168, 50, 222, 123, 21, 255,
        ]),
        U256::from_bytes_le([
            86, 45, 97, 35, 205, 139, 197, 23, 135, 159, 133, 237, 224, 246, 189, 72, 231, 31, 90,
            121, 48, 124, 42, 104, 232, 110, 223, 232, 27, 198, 143, 179,
        ]),
        U256::from_bytes_le([
            56, 235, 65, 113, 202, 46, 171, 94, 200, 179, 45, 119, 86, 91, 251, 25, 105, 34, 52,
            37, 251, 94, 123, 24, 189, 28, 161, 76, 94, 217, 77, 69,
        ]),
        U256::from_bytes_le([
            132, 76, 255, 192, 194, 30, 222, 12, 159, 157, 141, 217, 113, 92, 164, 43, 152, 3, 225,
            61, 135, 184, 234, 200, 211, 114, 23, 207, 80, 25, 67, 129,
        ]),
        U256::from_bytes_le([
            176, 66, 30, 181, 244, 91, 237, 207, 174, 118, 62, 96, 21, 50, 187, 141, 125, 208, 227,
            220, 213, 51, 130, 24, 27, 6, 215, 189, 173, 22, 148, 143,
        ]),
        U256::from_bytes_le([
            226, 220, 14, 67, 21, 8, 247, 192, 88, 250, 119, 189, 114, 21, 111, 108, 118, 157, 151,
            171, 145, 21, 243, 218, 60, 240, 203, 83, 131, 239, 135, 108,
        ]),
        U256::from_bytes_le([
            133, 241, 5, 2, 164, 141, 65, 247, 188, 101, 29, 193, 77, 217, 235, 7, 12, 8, 61, 40,
            8, 202, 122, 97, 111, 244, 118, 129, 154, 124, 255, 134,
        ]),
        U256::from_bytes_le([
            8, 153, 255, 193, 243, 109, 61, 216, 153, 239, 158, 252, 155, 75, 98, 93, 155, 114,
            209, 18, 125, 82, 229, 43, 1, 203, 122, 97, 20, 114, 240, 171,
        ]),
        U256::from_bytes_le([
            189, 179, 86, 105, 1, 72, 246, 221, 58, 41, 117, 118, 207, 108, 87, 81, 211, 215, 119,
            109, 122, 186, 113, 203, 206, 31, 190, 190, 23, 23, 233, 128,
        ]),
        U256::from_bytes_le([
            244, 118, 139, 143, 120, 2, 112, 149, 26, 66, 198, 255, 82, 138, 75, 118, 215, 208,
            249, 58, 2, 17, 93, 153, 209, 51, 157, 80, 61, 110, 27, 240,
        ]),
        U256::from_bytes_le([
            228, 30, 22, 150, 134, 113, 201, 3, 69, 39, 28, 112, 194, 37, 72, 20, 104, 104, 63,
            217, 217, 83, 246, 238, 116, 144, 93, 190, 116, 235, 80, 24,
        ]),
        U256::from_bytes_le([
            103, 197, 119, 36, 19, 237, 214, 10, 199, 198, 73, 8, 164, 126, 12, 174, 102, 141, 87,
            85, 20, 95, 146, 43, 119, 107, 187, 218, 68, 149, 151, 158,
        ]),
        U256::from_bytes_le([
            4, 194, 165, 57, 51, 102, 11, 193, 200, 23, 224, 95, 55, 58, 14, 12, 224, 35, 207, 214,
            181, 143, 233, 140, 195, 192, 122, 119, 163, 171, 195, 21,
        ]),
        U256::from_bytes_le([
            110, 38, 218, 49, 44, 145, 5, 190, 59, 16, 152, 47, 213, 248, 148, 108, 89, 44, 81, 74,
            234, 113, 243, 9, 145, 54, 23, 89, 67, 132, 239, 198,
        ]),
        U256::from_bytes_le([
            214, 16, 149, 191, 27, 18, 222, 180, 60, 141, 82, 232, 162, 35, 246, 106, 55, 250, 249,
            226, 100, 76, 232, 52, 203, 128, 196, 121, 187, 235, 151, 45,
        ]),
        U256::from_bytes_le([
            109, 140, 51, 114, 70, 74, 165, 91, 122, 73, 190, 102, 198, 21, 78, 136, 111, 129, 149,
            218, 167, 13, 2, 50, 109, 29, 152, 180, 240, 76, 8, 231,
        ]),
        U256::from_bytes_le([
            211, 145, 174, 168, 239, 176, 252, 177, 84, 93, 47, 86, 75, 114, 169, 41, 151, 133, 29,
            101, 156, 115, 212, 26, 0, 49, 181, 217, 4, 130, 135, 38,
        ]),
        U256::from_bytes_le([
            71, 117, 215, 82, 185, 59, 110, 160, 14, 35, 109, 97, 87, 181, 57, 34, 67, 62, 18, 214,
            192, 185, 95, 17, 188, 1, 15, 184, 197, 202, 149, 30,
        ]),
        U256::from_bytes_le([
            196, 138, 89, 162, 150, 233, 21, 198, 134, 166, 249, 164, 153, 82, 206, 104, 163, 244,
            84, 142, 69, 1, 197, 237, 7, 99, 24, 107, 166, 187, 255, 25,
        ]),
        U256::from_bytes_le([
            230, 106, 17, 171, 240, 208, 43, 8, 77, 221, 139, 48, 251, 220, 174, 216, 120, 164, 89,
            229, 112, 191, 126, 39, 183, 3, 132, 99, 172, 79, 45, 202,
        ]),
        U256::from_bytes_le([
            134, 231, 164, 151, 97, 245, 51, 234, 47, 191, 194, 143, 61, 153, 89, 68, 115, 140,
            152, 148, 130, 181, 207, 9, 96, 186, 17, 176, 6, 52, 62, 131,
        ]),
        U256::from_bytes_le([
            234, 25, 211, 11, 226, 122, 55, 236, 17, 208, 121, 32, 4, 220, 137, 101, 188, 111, 84,
            7, 228, 250, 14, 8, 124, 223, 78, 21, 179, 98, 197, 50,
        ]),
        U256::from_bytes_le([
            244, 50, 232, 22, 56, 15, 95, 114, 101, 146, 142, 189, 50, 21, 47, 238, 17, 77, 40, 52,
            232, 214, 37, 7, 149, 185, 59, 75, 113, 33, 15, 122,
        ]),
        U256::from_bytes_le([
            228, 195, 194, 163, 12, 31, 206, 17, 229, 67, 232, 68, 140, 210, 228, 9, 28, 103, 56,
            229, 178, 7, 116, 142, 68, 172, 2, 140, 11, 30, 81, 189,
        ]),
        U256::from_bytes_le([
            12, 164, 196, 24, 23, 250, 166, 55, 238, 191, 2, 55, 176, 13, 54, 128, 38, 30, 12, 140,
            157, 136, 147, 203, 125, 174, 88, 221, 94, 111, 187, 165,
        ]),
        U256::from_bytes_le([
            7, 92, 191, 35, 231, 193, 213, 33, 47, 54, 12, 210, 204, 38, 95, 1, 179, 35, 48, 222,
            60, 52, 245, 9, 224, 24, 90, 153, 255, 167, 193, 205,
        ]),
        U256::from_bytes_le([
            92, 209, 155, 181, 86, 67, 201, 3, 211, 17, 85, 102, 182, 100, 30, 71, 2, 7, 108, 102,
            2, 120, 189, 240, 131, 75, 132, 196, 97, 173, 75, 110,
        ]),
        U256::from_bytes_le([
            182, 90, 249, 38, 116, 81, 169, 39, 139, 224, 131, 87, 17, 162, 45, 243, 161, 174, 51,
            209, 243, 215, 154, 147, 208, 60, 248, 237, 96, 167, 17, 157,
        ]),
        U256::from_bytes_le([
            108, 209, 133, 136, 252, 187, 202, 65, 19, 110, 253, 7, 90, 81, 87, 251, 81, 202, 115,
            7, 92, 245, 34, 184, 43, 175, 119, 121, 106, 181, 65, 110,
        ]),
        U256::from_bytes_le([
            93, 140, 53, 116, 233, 91, 4, 39, 127, 171, 74, 69, 43, 161, 108, 30, 252, 45, 182,
            169, 79, 117, 165, 102, 88, 165, 52, 34, 9, 176, 59, 76,
        ]),
        U256::from_bytes_le([
            130, 150, 225, 185, 170, 122, 74, 212, 250, 46, 68, 76, 199, 11, 235, 145, 225, 196,
            212, 3, 177, 27, 61, 206, 20, 50, 127, 164, 187, 212, 206, 46,
        ]),
        U256::from_bytes_le([
            155, 12, 43, 183, 64, 173, 85, 139, 217, 158, 76, 153, 124, 39, 160, 181, 85, 137, 123,
            105, 22, 103, 91, 34, 59, 110, 149, 8, 79, 94, 28, 243,
        ]),
        U256::from_bytes_le([
            49, 228, 230, 220, 195, 177, 179, 162, 115, 53, 33, 87, 253, 191, 173, 105, 216, 200,
            173, 247, 190, 186, 68, 73, 151, 240, 250, 9, 124, 141, 3, 76,
        ]),
        U256::from_bytes_le([
            26, 107, 37, 139, 117, 252, 247, 76, 99, 105, 136, 156, 110, 103, 92, 249, 191, 154,
            66, 136, 150, 27, 21, 24, 71, 112, 65, 112, 205, 98, 149, 223,
        ]),
        U256::from_bytes_le([
            97, 249, 48, 116, 164, 112, 9, 147, 30, 66, 220, 232, 124, 19, 243, 137, 124, 97, 171,
            60, 196, 63, 26, 34, 87, 165, 73, 233, 35, 1, 248, 151,
        ]),
        U256::from_bytes_le([
            228, 147, 237, 54, 255, 65, 8, 31, 181, 109, 205, 157, 128, 47, 110, 165, 174, 76, 114,
            162, 143, 27, 248, 112, 154, 98, 113, 30, 46, 130, 107, 163,
        ]),
        U256::from_bytes_le([
            6, 87, 233, 122, 93, 61, 74, 230, 113, 10, 187, 86, 100, 213, 152, 229, 200, 205, 200,
            87, 243, 182, 81, 251, 171, 11, 35, 246, 40, 228, 5, 52,
        ]),
        U256::from_bytes_le([
            145, 51, 3, 121, 38, 57, 255, 184, 151, 157, 252, 122, 129, 139, 9, 7, 138, 208, 117,
            59, 46, 71, 161, 224, 113, 143, 40, 24, 191, 255, 85, 34,
        ]),
        U256::from_bytes_le([
            34, 149, 180, 60, 214, 82, 235, 58, 70, 117, 165, 213, 192, 238, 58, 94, 132, 111, 105,
            238, 154, 111, 74, 196, 243, 136, 58, 132, 157, 44, 146, 45,
        ]),
        U256::from_bytes_le([
            212, 89, 232, 132, 183, 44, 200, 48, 98, 172, 211, 236, 17, 8, 11, 153, 252, 52, 62,
            76, 69, 155, 29, 166, 29, 168, 237, 182, 20, 186, 87, 182,
        ]),
        U256::from_bytes_le([
            121, 201, 104, 127, 127, 25, 130, 7, 115, 252, 187, 250, 31, 55, 158, 221, 206, 73, 35,
            5, 38, 199, 251, 82, 209, 150, 136, 169, 186, 153, 116, 148,
        ]),
        U256::from_bytes_le([
            48, 209, 64, 10, 62, 158, 221, 106, 53, 120, 124, 223, 70, 215, 183, 209, 253, 122,
            123, 165, 149, 22, 94, 22, 226, 81, 245, 194, 175, 51, 88, 23,
        ]),
        U256::from_bytes_le([
            41, 17, 20, 33, 38, 211, 132, 230, 32, 112, 220, 149, 61, 50, 99, 4, 230, 21, 170, 238,
            6, 65, 108, 115, 144, 217, 65, 209, 99, 71, 1, 45,
        ]),
        U256::from_bytes_le([
            232, 202, 224, 211, 62, 52, 65, 65, 231, 79, 204, 212, 123, 13, 28, 197, 46, 143, 79,
            242, 34, 132, 136, 233, 78, 217, 0, 91, 27, 80, 44, 171,
        ]),
        U256::from_bytes_le([
            57, 230, 15, 39, 10, 72, 52, 136, 128, 126, 6, 70, 42, 7, 172, 114, 93, 58, 86, 36, 13,
            120, 146, 96, 93, 61, 124, 197, 120, 187, 187, 176,
        ]),
        U256::from_bytes_le([
            63, 168, 96, 147, 2, 173, 94, 79, 15, 60, 186, 39, 199, 13, 198, 201, 240, 201, 157,
            92, 157, 69, 23, 136, 98, 56, 107, 72, 204, 125, 83, 225,
        ]),
        U256::from_bytes_le([
            35, 190, 216, 168, 222, 71, 63, 130, 183, 10, 158, 93, 65, 49, 101, 30, 247, 23, 16,
            164, 14, 92, 41, 130, 139, 100, 76, 97, 65, 32, 102, 190,
        ]),
        U256::from_bytes_le([
            58, 232, 5, 180, 81, 110, 108, 166, 89, 96, 176, 67, 150, 248, 12, 77, 251, 49, 195,
            47, 231, 127, 237, 232, 246, 186, 169, 233, 16, 16, 144, 253,
        ]),
        U256::from_bytes_le([
            227, 207, 68, 141, 112, 10, 49, 125, 85, 14, 60, 186, 177, 185, 145, 217, 247, 24, 101,
            225, 244, 143, 156, 78, 129, 160, 38, 46, 55, 52, 252, 1,
        ]),
        U256::from_bytes_le([
            102, 82, 44, 24, 194, 205, 208, 233, 142, 153, 16, 61, 201, 79, 220, 36, 120, 210, 216,
            83, 178, 117, 143, 117, 13, 78, 123, 167, 121, 115, 102, 179,
        ]),
        U256::from_bytes_le([
            200, 36, 34, 57, 170, 13, 174, 212, 51, 180, 47, 58, 6, 208, 166, 121, 155, 21, 31, 76,
            5, 190, 31, 22, 121, 151, 151, 116, 35, 91, 121, 150,
        ]),
        U256::from_bytes_le([
            83, 54, 5, 200, 113, 94, 191, 196, 201, 0, 158, 40, 19, 2, 34, 4, 243, 65, 156, 31,
            237, 135, 51, 3, 156, 167, 217, 163, 88, 7, 182, 47,
        ]),
        U256::from_bytes_le([
            22, 128, 198, 28, 187, 228, 154, 203, 47, 0, 241, 26, 46, 111, 188, 21, 97, 254, 89, 6,
            187, 186, 131, 132, 129, 30, 174, 160, 111, 122, 180, 87,
        ]),
        U256::from_bytes_le([
            87, 253, 164, 223, 185, 71, 60, 95, 230, 62, 17, 75, 1, 232, 158, 69, 74, 235, 134, 39,
            191, 221, 39, 99, 93, 152, 100, 41, 113, 145, 184, 104,
        ]),
        U256::from_bytes_le([
            83, 32, 201, 116, 137, 131, 89, 22, 19, 166, 146, 103, 6, 118, 246, 83, 173, 210, 28,
            144, 173, 209, 144, 82, 99, 62, 56, 172, 168, 222, 56, 5,
        ]),
        U256::from_bytes_le([
            233, 180, 208, 208, 2, 167, 90, 33, 167, 8, 221, 192, 58, 100, 243, 198, 217, 18, 163,
            141, 152, 165, 181, 11, 168, 213, 50, 6, 138, 27, 14, 82,
        ]),
        U256::from_bytes_le([
            157, 220, 110, 12, 32, 143, 121, 85, 213, 169, 246, 40, 193, 183, 224, 233, 190, 6,
            164, 236, 2, 48, 21, 115, 90, 64, 78, 138, 16, 64, 26, 64,
        ]),
        U256::from_bytes_le([
            133, 99, 48, 212, 37, 105, 222, 157, 159, 125, 196, 56, 132, 119, 84, 224, 131, 6, 226,
            159, 215, 23, 221, 73, 26, 149, 52, 29, 44, 241, 116, 118,
        ]),
        U256::from_bytes_le([
            83, 138, 161, 70, 183, 137, 46, 241, 234, 74, 130, 5, 228, 217, 156, 120, 192, 37, 152,
            111, 12, 124, 165, 70, 23, 6, 66, 171, 3, 36, 127, 78,
        ]),
        U256::from_bytes_le([
            227, 200, 146, 82, 182, 0, 53, 22, 212, 246, 170, 50, 138, 142, 226, 234, 89, 155, 102,
            238, 168, 206, 135, 39, 135, 29, 20, 106, 126, 15, 170, 119,
        ]),
        U256::from_bytes_le([
            110, 242, 106, 64, 244, 134, 108, 222, 69, 181, 119, 204, 241, 142, 223, 132, 154, 113,
            186, 27, 112, 18, 43, 233, 162, 92, 81, 244, 3, 174, 106, 68,
        ]),
        U256::from_bytes_le([
            57, 243, 120, 34, 156, 175, 100, 8, 60, 161, 142, 22, 3, 193, 144, 13, 180, 242, 8, 26,
            110, 136, 21, 123, 194, 237, 69, 247, 131, 80, 66, 95,
        ]),
        U256::from_bytes_le([
            211, 246, 147, 81, 89, 140, 156, 73, 154, 206, 128, 60, 149, 77, 31, 70, 103, 8, 68, 6,
            251, 239, 94, 21, 89, 80, 1, 199, 169, 132, 27, 147,
        ]),
        U256::from_bytes_le([
            17, 57, 174, 34, 14, 10, 220, 188, 30, 198, 224, 53, 211, 223, 244, 8, 44, 129, 85,
            209, 37, 48, 5, 177, 253, 30, 125, 213, 89, 229, 84, 156,
        ]),
        U256::from_bytes_le([
            65, 136, 207, 123, 199, 75, 245, 43, 82, 139, 61, 184, 66, 24, 178, 65, 21, 229, 129,
            84, 6, 87, 143, 141, 33, 17, 88, 167, 216, 46, 253, 0,
        ]),
        U256::from_bytes_le([
            247, 238, 60, 69, 147, 59, 0, 226, 11, 193, 103, 176, 220, 116, 40, 15, 164, 248, 14,
            119, 94, 71, 2, 170, 7, 216, 198, 117, 169, 13, 221, 45,
        ]),
        U256::from_bytes_le([
            125, 166, 173, 87, 4, 53, 11, 177, 48, 101, 154, 204, 75, 86, 166, 156, 91, 175, 152,
            137, 81, 150, 188, 65, 31, 180, 241, 68, 2, 111, 30, 150,
        ]),
        U256::from_bytes_le([
            20, 95, 64, 247, 171, 206, 101, 57, 27, 14, 162, 47, 252, 189, 200, 35, 42, 119, 221,
            93, 44, 246, 128, 247, 183, 49, 174, 33, 182, 182, 223, 190,
        ]),
        U256::from_bytes_le([
            19, 171, 217, 45, 99, 165, 148, 17, 161, 237, 29, 93, 116, 41, 184, 82, 230, 138, 184,
            249, 155, 27, 223, 14, 17, 80, 70, 224, 252, 63, 238, 49,
        ]),
        U256::from_bytes_le([
            112, 181, 200, 31, 200, 241, 101, 182, 59, 121, 108, 58, 233, 39, 222, 79, 225, 146,
            131, 144, 33, 217, 102, 24, 94, 14, 53, 136, 220, 72, 69, 71,
        ]),
        U256::from_bytes_le([
            18, 109, 27, 225, 171, 206, 196, 225, 134, 83, 166, 170, 183, 187, 200, 187, 177, 38,
            214, 82, 83, 157, 152, 64, 143, 245, 144, 252, 55, 148, 26, 45,
        ]),
        U256::from_bytes_le([
            48, 198, 201, 94, 245, 43, 223, 34, 242, 203, 199, 174, 55, 162, 63, 200, 255, 113, 77,
            96, 95, 140, 138, 121, 140, 136, 17, 88, 239, 127, 9, 77,
        ]),
        U256::from_bytes_le([
            236, 253, 198, 121, 206, 184, 51, 72, 34, 255, 19, 174, 163, 176, 172, 152, 248, 61,
            37, 38, 250, 111, 252, 203, 194, 128, 173, 137, 17, 244, 232, 169,
        ]),
        U256::from_bytes_le([
            46, 22, 135, 220, 108, 3, 224, 205, 94, 189, 186, 204, 148, 46, 114, 30, 135, 131, 140,
            122, 167, 173, 110, 39, 30, 113, 186, 8, 242, 22, 78, 153,
        ]),
        U256::from_bytes_le([
            86, 179, 37, 154, 15, 213, 2, 81, 201, 199, 134, 105, 221, 185, 68, 62, 225, 227, 151,
            225, 140, 106, 196, 108, 174, 64, 174, 168, 248, 250, 82, 244,
        ]),
        U256::from_bytes_le([
            10, 31, 69, 90, 14, 169, 53, 11, 75, 49, 106, 245, 115, 230, 54, 84, 8, 148, 46, 11,
            164, 35, 16, 163, 152, 148, 65, 148, 234, 171, 0, 113,
        ]),
        U256::from_bytes_le([
            79, 47, 70, 100, 185, 110, 186, 168, 197, 210, 129, 251, 199, 6, 8, 227, 88, 132, 32,
            183, 104, 31, 167, 94, 157, 217, 242, 92, 81, 247, 224, 172,
        ]),
        U256::from_bytes_le([
            23, 204, 195, 181, 74, 251, 72, 137, 105, 142, 185, 153, 86, 142, 158, 117, 185, 56,
            129, 152, 186, 125, 88, 125, 112, 219, 159, 97, 119, 52, 158, 55,
        ]),
        U256::from_bytes_le([
            240, 192, 18, 57, 51, 248, 168, 195, 213, 175, 238, 133, 115, 52, 63, 79, 54, 18, 73,
            71, 149, 118, 61, 53, 38, 85, 106, 179, 240, 32, 177, 163,
        ]),
        U256::from_bytes_le([
            0, 232, 163, 0, 143, 222, 193, 7, 101, 244, 223, 137, 189, 37, 194, 7, 137, 121, 65,
            40, 81, 206, 2, 144, 165, 3, 6, 8, 237, 152, 133, 125,
        ]),
        U256::from_bytes_le([
            193, 74, 203, 169, 65, 71, 85, 55, 219, 41, 92, 246, 2, 118, 25, 253, 51, 83, 49, 89,
            162, 248, 172, 101, 161, 187, 253, 68, 212, 133, 93, 96,
        ]),
        U256::from_bytes_le([
            201, 165, 28, 33, 136, 153, 139, 83, 30, 212, 34, 175, 3, 247, 188, 112, 76, 134, 104,
            248, 70, 146, 59, 34, 167, 147, 54, 35, 16, 44, 231, 218,
        ]),
        U256::from_bytes_le([
            253, 236, 87, 77, 116, 41, 106, 163, 179, 116, 174, 253, 219, 104, 97, 72, 120, 92,
            210, 118, 82, 190, 144, 217, 234, 46, 94, 89, 4, 237, 148, 29,
        ]),
        U256::from_bytes_le([
            101, 247, 194, 244, 74, 40, 55, 249, 229, 194, 122, 140, 83, 247, 40, 54, 157, 76, 96,
            223, 177, 207, 108, 96, 105, 227, 159, 76, 197, 32, 92, 134,
        ]),
        U256::from_bytes_le([
            182, 82, 184, 76, 86, 22, 118, 231, 156, 36, 65, 185, 120, 7, 153, 34, 66, 44, 111, 0,
            15, 126, 195, 61, 106, 40, 178, 186, 104, 52, 121, 106,
        ]),
        U256::from_bytes_le([
            157, 9, 138, 25, 222, 255, 57, 126, 86, 187, 193, 51, 77, 62, 255, 228, 198, 147, 6,
            133, 70, 152, 40, 5, 57, 131, 95, 224, 83, 196, 216, 122,
        ]),
        U256::from_bytes_le([
            217, 246, 173, 96, 147, 88, 172, 205, 73, 58, 140, 102, 211, 177, 145, 48, 136, 223,
            220, 35, 60, 184, 50, 188, 105, 160, 147, 229, 220, 133, 22, 121,
        ]),
        U256::from_bytes_le([
            187, 249, 179, 208, 25, 241, 22, 198, 44, 184, 143, 103, 16, 75, 236, 89, 30, 217, 166,
            188, 71, 114, 148, 15, 23, 204, 255, 224, 15, 52, 62, 144,
        ]),
        U256::from_bytes_le([
            26, 223, 226, 254, 255, 228, 134, 29, 12, 171, 169, 196, 22, 192, 164, 75, 183, 196,
            86, 68, 243, 207, 177, 205, 167, 129, 83, 115, 191, 181, 167, 160,
        ]),
        U256::from_bytes_le([
            84, 247, 40, 36, 238, 0, 83, 91, 208, 213, 178, 114, 157, 28, 37, 123, 14, 201, 166,
            166, 93, 31, 150, 122, 149, 207, 145, 235, 197, 16, 146, 247,
        ]),
        U256::from_bytes_le([
            77, 50, 225, 17, 84, 142, 119, 108, 74, 77, 89, 168, 58, 144, 100, 135, 94, 96, 78, 23,
            192, 105, 53, 150, 10, 133, 49, 89, 101, 79, 123, 136,
        ]),
        U256::from_bytes_le([
            233, 179, 33, 73, 224, 40, 209, 247, 26, 186, 106, 43, 245, 219, 39, 174, 170, 183, 3,
            95, 113, 31, 135, 26, 201, 221, 46, 211, 170, 104, 113, 59,
        ]),
        U256::from_bytes_le([
            39, 238, 225, 255, 128, 38, 96, 88, 70, 168, 62, 189, 102, 96, 176, 50, 239, 222, 48,
            176, 122, 121, 200, 165, 153, 83, 233, 168, 183, 42, 70, 68,
        ]),
        U256::from_bytes_le([
            187, 50, 63, 188, 151, 223, 231, 123, 150, 181, 42, 103, 159, 48, 92, 117, 170, 152,
            244, 47, 91, 35, 220, 208, 215, 187, 81, 46, 119, 249, 244, 231,
        ]),
        U256::from_bytes_le([
            67, 117, 7, 48, 4, 243, 217, 53, 136, 25, 97, 155, 33, 89, 132, 162, 226, 144, 97, 197,
            146, 241, 27, 236, 249, 62, 154, 111, 114, 187, 88, 112,
        ]),
        U256::from_bytes_le([
            16, 234, 243, 120, 43, 30, 214, 198, 121, 214, 132, 92, 51, 189, 27, 171, 195, 153, 19,
            78, 223, 117, 87, 218, 8, 69, 108, 255, 161, 82, 26, 41,
        ]),
        U256::from_bytes_le([
            2, 205, 119, 111, 20, 196, 42, 0, 46, 132, 168, 75, 244, 142, 227, 25, 96, 70, 53, 241,
            128, 155, 102, 115, 199, 27, 25, 13, 230, 133, 242, 72,
        ]),
        U256::from_bytes_le([
            95, 116, 171, 147, 162, 15, 11, 233, 109, 215, 132, 223, 150, 80, 4, 7, 207, 37, 194,
            76, 173, 228, 55, 165, 27, 173, 249, 158, 243, 7, 221, 211,
        ]),
        U256::from_bytes_le([
            123, 185, 211, 69, 107, 180, 165, 141, 86, 65, 218, 146, 176, 87, 98, 210, 157, 125,
            221, 102, 106, 145, 29, 125, 101, 43, 179, 217, 30, 113, 110, 238,
        ]),
        U256::from_bytes_le([
            24, 116, 75, 96, 69, 237, 163, 100, 31, 159, 190, 110, 176, 25, 224, 79, 61, 51, 10,
            27, 27, 233, 128, 113, 134, 45, 150, 176, 198, 40, 124, 11,
        ]),
        U256::from_bytes_le([
            178, 19, 138, 159, 160, 57, 52, 37, 110, 51, 2, 24, 254, 188, 37, 45, 131, 32, 91, 1,
            119, 175, 69, 22, 151, 191, 145, 6, 199, 227, 152, 8,
        ]),
        U256::from_bytes_le([
            18, 188, 108, 173, 226, 201, 142, 24, 125, 191, 88, 66, 36, 132, 234, 192, 129, 242,
            40, 4, 213, 162, 66, 216, 102, 139, 32, 219, 60, 37, 84, 182,
        ]),
        U256::from_bytes_le([
            47, 42, 137, 87, 152, 58, 179, 142, 40, 198, 32, 154, 173, 1, 8, 38, 183, 30, 2, 91,
            60, 106, 158, 220, 106, 146, 74, 45, 173, 228, 113, 189,
        ]),
        U256::from_bytes_le([
            16, 163, 1, 134, 113, 199, 105, 120, 170, 218, 49, 68, 136, 115, 248, 40, 145, 17, 169,
            174, 26, 128, 9, 200, 172, 6, 236, 30, 101, 122, 20, 145,
        ]),
        U256::from_bytes_le([
            98, 180, 11, 201, 78, 212, 78, 66, 249, 112, 44, 122, 210, 5, 87, 40, 62, 150, 158,
            203, 188, 157, 116, 214, 5, 63, 150, 187, 216, 150, 227, 12,
        ]),
        U256::from_bytes_le([
            60, 185, 202, 148, 173, 205, 205, 238, 199, 235, 157, 206, 161, 12, 82, 90, 79, 224,
            124, 13, 222, 49, 146, 45, 58, 123, 194, 65, 12, 54, 2, 49,
        ]),
        U256::from_bytes_le([
            170, 94, 79, 129, 56, 248, 190, 28, 11, 51, 249, 117, 70, 81, 206, 184, 55, 199, 166,
            85, 241, 98, 101, 215, 185, 16, 69, 188, 94, 81, 179, 234,
        ]),
        U256::from_bytes_le([
            39, 83, 221, 104, 214, 244, 40, 129, 70, 237, 214, 68, 4, 6, 44, 138, 89, 153, 125,
            142, 38, 150, 141, 23, 63, 192, 101, 129, 10, 183, 182, 235,
        ]),
        U256::from_bytes_le([
            239, 222, 199, 18, 201, 252, 72, 112, 67, 86, 250, 226, 133, 247, 141, 180, 225, 169,
            145, 63, 68, 76, 103, 111, 53, 198, 100, 202, 169, 154, 163, 20,
        ]),
        U256::from_bytes_le([
            50, 73, 248, 249, 235, 147, 53, 127, 25, 76, 104, 183, 145, 211, 110, 40, 254, 154, 23,
            240, 203, 196, 79, 92, 253, 25, 110, 252, 206, 53, 29, 51,
        ]),
        U256::from_bytes_le([
            238, 42, 195, 135, 150, 161, 67, 214, 81, 8, 49, 237, 128, 126, 149, 142, 203, 163, 39,
            186, 5, 208, 231, 75, 102, 86, 199, 89, 92, 160, 162, 252,
        ]),
        U256::from_bytes_le([
            241, 190, 179, 145, 250, 145, 176, 110, 95, 129, 210, 227, 124, 189, 13, 122, 18, 19,
            151, 104, 51, 25, 177, 61, 110, 148, 127, 18, 109, 171, 223, 56,
        ]),
        U256::from_bytes_le([
            108, 51, 107, 204, 141, 199, 100, 232, 66, 116, 16, 83, 96, 42, 151, 72, 82, 159, 153,
            198, 210, 198, 233, 218, 162, 169, 195, 22, 78, 189, 59, 198,
        ]),
        U256::from_bytes_le([
            115, 69, 165, 31, 91, 103, 131, 136, 67, 218, 234, 120, 130, 11, 118, 199, 201, 235,
            174, 3, 168, 103, 28, 79, 90, 120, 83, 153, 202, 247, 43, 25,
        ]),
        U256::from_bytes_le([
            41, 89, 63, 254, 74, 215, 238, 249, 144, 83, 95, 170, 244, 79, 13, 106, 91, 45, 197,
            85, 208, 75, 89, 103, 123, 214, 195, 206, 87, 29, 77, 134,
        ]),
        U256::from_bytes_le([
            160, 139, 90, 35, 203, 141, 148, 11, 204, 223, 253, 148, 131, 147, 5, 118, 79, 241, 56,
            172, 88, 226, 86, 180, 92, 110, 177, 161, 152, 104, 118, 162,
        ]),
        U256::from_bytes_le([
            94, 56, 235, 244, 7, 143, 9, 108, 33, 86, 125, 67, 11, 93, 84, 6, 26, 175, 251, 203,
            226, 28, 166, 249, 42, 17, 197, 17, 10, 134, 137, 124,
        ]),
        U256::from_bytes_le([
            205, 233, 171, 161, 85, 138, 141, 205, 118, 161, 222, 123, 68, 146, 69, 55, 51, 193,
            232, 195, 36, 217, 121, 231, 251, 190, 39, 159, 128, 191, 242, 77,
        ]),
        U256::from_bytes_le([
            217, 217, 26, 156, 45, 165, 186, 168, 134, 14, 250, 18, 177, 119, 62, 216, 51, 201, 12,
            163, 41, 105, 130, 197, 251, 155, 145, 45, 33, 101, 104, 193,
        ]),
        U256::from_bytes_le([
            128, 4, 14, 112, 1, 92, 55, 21, 98, 58, 245, 222, 108, 198, 148, 226, 220, 15, 164, 6,
            55, 217, 41, 149, 1, 167, 241, 136, 221, 81, 29, 40,
        ]),
        U256::from_bytes_le([
            60, 149, 215, 65, 191, 229, 220, 46, 254, 13, 87, 110, 98, 121, 58, 159, 145, 76, 87,
            40, 122, 12, 251, 97, 133, 211, 227, 205, 36, 63, 156, 82,
        ]),
        U256::from_bytes_le([
            20, 11, 91, 182, 91, 115, 216, 119, 118, 177, 44, 240, 175, 25, 242, 179, 160, 125,
            143, 106, 250, 183, 103, 155, 111, 241, 138, 250, 96, 53, 117, 181,
        ]),
        U256::from_bytes_le([
            43, 123, 76, 195, 157, 0, 53, 85, 154, 0, 78, 97, 57, 57, 199, 216, 104, 225, 88, 81,
            45, 144, 197, 6, 152, 154, 3, 246, 90, 21, 143, 106,
        ]),
        U256::from_bytes_le([
            213, 150, 56, 79, 139, 174, 47, 156, 53, 221, 26, 58, 82, 236, 146, 51, 142, 33, 55,
            185, 134, 157, 201, 195, 100, 144, 154, 251, 203, 250, 207, 148,
        ]),
        U256::from_bytes_le([
            99, 58, 42, 2, 124, 68, 20, 65, 173, 225, 216, 21, 72, 31, 44, 221, 211, 196, 20, 238,
            67, 203, 55, 199, 8, 34, 168, 119, 71, 240, 177, 110,
        ]),
        U256::from_bytes_le([
            46, 192, 96, 107, 160, 42, 212, 128, 253, 133, 180, 127, 91, 59, 15, 29, 55, 48, 238,
            58, 5, 202, 218, 144, 10, 94, 241, 203, 222, 74, 103, 235,
        ]),
        U256::from_bytes_le([
            36, 50, 28, 43, 163, 169, 12, 160, 183, 167, 126, 143, 116, 127, 107, 61, 110, 150,
            128, 92, 59, 88, 185, 61, 24, 252, 101, 167, 192, 14, 207, 83,
        ]),
        U256::from_bytes_le([
            243, 205, 213, 154, 124, 210, 96, 117, 97, 49, 163, 251, 232, 93, 108, 41, 71, 95, 55,
            90, 253, 247, 119, 29, 39, 110, 97, 121, 90, 55, 34, 151,
        ]),
        U256::from_bytes_le([
            8, 144, 72, 245, 58, 243, 215, 185, 209, 114, 218, 169, 45, 48, 253, 50, 112, 99, 176,
            72, 60, 85, 24, 103, 249, 136, 114, 145, 18, 221, 241, 14,
        ]),
        U256::from_bytes_le([
            38, 63, 183, 98, 252, 13, 123, 17, 10, 161, 158, 114, 144, 93, 18, 190, 233, 219, 91,
            210, 148, 98, 183, 134, 204, 229, 144, 83, 238, 35, 199, 243,
        ]),
        U256::from_bytes_le([
            251, 251, 42, 142, 188, 159, 144, 230, 12, 12, 23, 174, 142, 158, 39, 168, 61, 163,
            156, 47, 191, 154, 79, 233, 163, 239, 234, 245, 122, 15, 161, 180,
        ]),
        U256::from_bytes_le([
            251, 209, 100, 128, 250, 106, 179, 165, 42, 197, 89, 225, 177, 52, 121, 140, 106, 40,
            147, 3, 13, 130, 225, 177, 122, 180, 44, 155, 199, 225, 116, 240,
        ]),
        U256::from_bytes_le([
            125, 243, 11, 162, 126, 247, 17, 241, 209, 242, 108, 18, 67, 248, 253, 174, 197, 188,
            166, 150, 163, 252, 167, 185, 252, 235, 142, 58, 14, 207, 215, 25,
        ]),
        U256::from_bytes_le([
            167, 103, 107, 149, 184, 80, 154, 190, 22, 118, 29, 61, 85, 163, 36, 178, 133, 20, 40,
            175, 230, 155, 66, 9, 31, 7, 52, 10, 15, 150, 172, 112,
        ]),
        U256::from_bytes_le([
            38, 229, 243, 31, 174, 176, 33, 231, 243, 165, 216, 53, 237, 198, 69, 255, 1, 160, 110,
            99, 167, 238, 98, 183, 132, 149, 134, 213, 206, 136, 88, 82,
        ]),
        U256::from_bytes_le([
            163, 207, 233, 19, 170, 124, 1, 249, 232, 144, 108, 29, 75, 8, 3, 214, 110, 44, 94,
            170, 145, 128, 107, 27, 67, 29, 8, 218, 89, 100, 58, 240,
        ]),
        U256::from_bytes_le([
            65, 152, 171, 101, 172, 139, 230, 60, 191, 33, 11, 15, 78, 237, 24, 224, 120, 5, 123,
            178, 41, 40, 70, 16, 251, 230, 103, 173, 229, 116, 129, 79,
        ]),
        U256::from_bytes_le([
            76, 9, 68, 165, 202, 166, 24, 99, 182, 160, 128, 14, 59, 110, 215, 156, 79, 60, 33,
            122, 154, 245, 50, 246, 204, 131, 173, 198, 205, 6, 151, 218,
        ]),
        U256::from_bytes_le([
            164, 246, 117, 247, 34, 44, 51, 197, 84, 214, 176, 255, 235, 11, 7, 137, 29, 241, 128,
            128, 175, 32, 107, 210, 179, 124, 20, 184, 137, 201, 84, 177,
        ]),
        U256::from_bytes_le([
            52, 206, 79, 225, 5, 187, 137, 42, 140, 20, 162, 103, 174, 33, 48, 162, 139, 15, 118,
            183, 31, 20, 15, 69, 144, 209, 22, 139, 215, 176, 96, 88,
        ]),
        U256::from_bytes_le([
            102, 9, 216, 184, 154, 46, 223, 93, 127, 180, 137, 233, 62, 47, 2, 149, 129, 178, 99,
            246, 50, 140, 119, 76, 241, 122, 185, 166, 237, 173, 64, 51,
        ]),
        U256::from_bytes_le([
            158, 221, 183, 62, 32, 95, 95, 0, 115, 144, 90, 172, 49, 0, 222, 96, 207, 122, 72, 150,
            106, 197, 198, 181, 201, 233, 196, 74, 247, 10, 9, 13,
        ]),
        U256::from_bytes_le([
            189, 71, 227, 78, 175, 61, 116, 8, 40, 33, 198, 27, 175, 22, 83, 63, 81, 162, 161, 3,
            106, 169, 149, 192, 65, 216, 99, 72, 2, 54, 172, 134,
        ]),
        U256::from_bytes_le([
            210, 203, 21, 245, 64, 250, 68, 2, 161, 180, 81, 151, 36, 191, 244, 169, 178, 189, 106,
            73, 85, 155, 126, 92, 255, 94, 67, 216, 73, 52, 192, 180,
        ]),
        U256::from_bytes_le([
            129, 168, 216, 77, 77, 90, 88, 142, 57, 132, 31, 183, 173, 240, 79, 18, 94, 154, 176,
            76, 155, 2, 58, 38, 77, 56, 137, 143, 76, 97, 132, 28,
        ]),
        U256::from_bytes_le([
            248, 24, 207, 47, 5, 226, 204, 151, 74, 233, 82, 171, 253, 140, 217, 248, 116, 159,
            144, 215, 140, 166, 112, 255, 211, 162, 202, 207, 146, 198, 206, 176,
        ]),
        U256::from_bytes_le([
            29, 27, 123, 210, 134, 46, 192, 57, 65, 52, 66, 90, 33, 20, 129, 233, 250, 201, 30, 61,
            29, 224, 244, 89, 135, 116, 65, 162, 110, 94, 54, 31,
        ]),
        U256::from_bytes_le([
            128, 14, 126, 119, 7, 12, 65, 206, 40, 201, 131, 1, 147, 36, 88, 100, 174, 203, 131,
            168, 155, 183, 85, 114, 191, 5, 193, 56, 187, 97, 77, 19,
        ]),
        U256::from_bytes_le([
            60, 5, 106, 84, 33, 254, 121, 112, 236, 123, 208, 44, 115, 3, 97, 179, 252, 42, 239,
            48, 0, 184, 239, 233, 57, 141, 185, 69, 76, 161, 21, 212,
        ]),
        U256::from_bytes_le([
            102, 225, 77, 2, 150, 120, 143, 21, 214, 68, 90, 18, 158, 174, 15, 231, 221, 18, 74,
            230, 231, 187, 6, 39, 212, 241, 92, 131, 51, 185, 31, 237,
        ]),
        U256::from_bytes_le([
            248, 24, 222, 23, 72, 201, 225, 85, 58, 6, 79, 21, 60, 17, 244, 215, 233, 135, 144,
            237, 129, 125, 82, 25, 140, 254, 77, 195, 140, 154, 197, 75,
        ]),
        U256::from_bytes_le([
            152, 68, 231, 70, 218, 149, 247, 81, 179, 87, 20, 53, 64, 34, 63, 19, 29, 155, 112,
            172, 6, 109, 185, 95, 188, 32, 216, 83, 138, 179, 243, 212,
        ]),
        U256::from_bytes_le([
            252, 131, 14, 186, 196, 141, 243, 245, 244, 129, 124, 80, 187, 37, 236, 196, 27, 105,
            106, 131, 188, 244, 8, 24, 127, 46, 214, 126, 192, 106, 209, 169,
        ]),
        U256::from_bytes_le([
            1, 216, 191, 89, 223, 46, 243, 217, 246, 95, 102, 183, 243, 178, 39, 19, 158, 240, 42,
            84, 169, 205, 143, 66, 198, 168, 179, 84, 249, 124, 195, 127,
        ]),
        U256::from_bytes_le([
            170, 184, 82, 27, 24, 36, 219, 194, 127, 142, 54, 70, 201, 188, 126, 96, 10, 17, 211,
            29, 237, 160, 189, 195, 193, 249, 238, 82, 92, 92, 153, 38,
        ]),
        U256::from_bytes_le([
            44, 59, 154, 53, 225, 222, 175, 196, 145, 44, 25, 90, 210, 155, 119, 159, 32, 166, 162,
            240, 211, 161, 73, 158, 253, 95, 255, 230, 208, 220, 101, 161,
        ]),
        U256::from_bytes_le([
            12, 218, 84, 161, 44, 100, 117, 248, 110, 170, 65, 90, 15, 195, 3, 77, 192, 227, 46,
            29, 206, 18, 85, 6, 3, 168, 21, 87, 45, 116, 17, 167,
        ]),
        U256::from_bytes_le([
            51, 196, 95, 7, 202, 242, 9, 38, 240, 228, 139, 121, 219, 63, 88, 249, 14, 77, 229, 19,
            71, 80, 129, 234, 97, 94, 65, 51, 146, 13, 153, 79,
        ]),
        U256::from_bytes_le([
            43, 124, 46, 152, 24, 160, 238, 98, 102, 14, 74, 220, 152, 131, 254, 249, 50, 151, 57,
            245, 52, 180, 84, 160, 233, 180, 36, 1, 132, 47, 126, 139,
        ]),
        U256::from_bytes_le([
            120, 29, 180, 143, 185, 24, 178, 94, 140, 63, 6, 47, 181, 182, 195, 162, 45, 164, 58,
            196, 129, 236, 33, 18, 242, 232, 209, 105, 48, 173, 140, 227,
        ]),
        U256::from_bytes_le([
            187, 143, 10, 227, 140, 243, 110, 226, 253, 197, 16, 126, 86, 47, 250, 207, 123, 15,
            114, 181, 74, 174, 38, 57, 219, 193, 174, 216, 100, 118, 111, 178,
        ]),
        U256::from_bytes_le([
            252, 226, 124, 36, 127, 208, 71, 144, 200, 191, 100, 171, 110, 78, 32, 144, 17, 74, 52,
            84, 68, 212, 160, 33, 170, 55, 251, 144, 203, 156, 206, 123,
        ]),
        U256::from_bytes_le([
            200, 83, 43, 62, 138, 27, 55, 184, 66, 70, 180, 61, 119, 162, 58, 114, 36, 244, 96, 74,
            235, 59, 238, 63, 100, 184, 86, 125, 2, 119, 183, 61,
        ]),
        U256::from_bytes_le([
            69, 9, 236, 140, 105, 237, 201, 31, 115, 71, 27, 133, 43, 64, 243, 52, 244, 17, 134,
            79, 198, 202, 64, 171, 78, 52, 162, 79, 219, 153, 200, 122,
        ]),
        U256::from_bytes_le([
            134, 110, 127, 214, 45, 79, 36, 237, 10, 172, 133, 15, 89, 169, 181, 9, 49, 159, 180,
            190, 37, 5, 202, 158, 203, 37, 18, 108, 112, 36, 185, 7,
        ]),
        U256::from_bytes_le([
            168, 17, 118, 102, 16, 49, 145, 172, 182, 220, 154, 105, 218, 229, 83, 188, 48, 204,
            145, 43, 48, 36, 211, 229, 163, 105, 65, 67, 246, 253, 106, 105,
        ]),
        U256::from_bytes_le([
            40, 14, 167, 32, 123, 50, 40, 135, 52, 35, 159, 244, 206, 238, 226, 149, 91, 229, 65,
            146, 3, 158, 227, 115, 134, 16, 192, 41, 120, 58, 215, 238,
        ]),
        U256::from_bytes_le([
            96, 15, 86, 80, 163, 191, 70, 200, 2, 9, 58, 203, 129, 20, 150, 0, 102, 19, 85, 67,
            105, 220, 232, 223, 147, 208, 136, 183, 56, 0, 169, 122,
        ]),
        U256::from_bytes_le([
            3, 251, 235, 220, 126, 3, 51, 164, 136, 24, 112, 23, 113, 90, 117, 209, 253, 140, 219,
            35, 31, 77, 151, 169, 120, 199, 131, 89, 217, 220, 8, 228,
        ]),
        U256::from_bytes_le([
            164, 147, 49, 157, 173, 248, 27, 105, 100, 71, 169, 232, 58, 161, 240, 230, 105, 172,
            89, 45, 243, 55, 172, 80, 43, 224, 37, 177, 210, 250, 240, 132,
        ]),
        U256::from_bytes_le([
            220, 189, 38, 244, 54, 245, 249, 62, 101, 88, 180, 71, 10, 80, 223, 66, 185, 176, 61,
            73, 1, 137, 40, 26, 164, 156, 94, 221, 113, 61, 201, 120,
        ]),
        U256::from_bytes_le([
            19, 177, 113, 119, 171, 250, 245, 182, 190, 17, 102, 37, 105, 101, 72, 113, 75, 129,
            209, 104, 198, 177, 78, 81, 22, 55, 124, 111, 157, 236, 163, 173,
        ]),
        U256::from_bytes_le([
            31, 67, 73, 40, 103, 245, 3, 20, 180, 190, 125, 111, 96, 229, 78, 66, 217, 142, 251,
            78, 137, 71, 13, 65, 54, 45, 172, 175, 17, 217, 85, 158,
        ]),
        U256::from_bytes_le([
            54, 191, 114, 106, 168, 189, 143, 189, 29, 70, 117, 10, 95, 62, 84, 152, 157, 241, 68,
            190, 81, 39, 42, 71, 219, 14, 99, 98, 2, 156, 115, 152,
        ]),
        U256::from_bytes_le([
            102, 53, 227, 161, 173, 13, 86, 107, 154, 202, 249, 253, 4, 81, 97, 54, 15, 197, 254,
            127, 0, 52, 184, 21, 90, 237, 101, 250, 108, 63, 117, 55,
        ]),
        U256::from_bytes_le([
            193, 138, 135, 180, 100, 200, 215, 216, 63, 104, 19, 189, 90, 160, 224, 176, 27, 142,
            168, 6, 191, 72, 157, 14, 214, 118, 7, 191, 182, 210, 174, 34,
        ]),
        U256::from_bytes_le([
            189, 112, 179, 235, 128, 85, 95, 71, 91, 216, 37, 68, 129, 107, 91, 15, 147, 153, 52,
            131, 28, 34, 55, 3, 98, 76, 184, 232, 153, 109, 108, 249,
        ]),
        U256::from_bytes_le([
            97, 38, 211, 20, 243, 74, 116, 4, 97, 9, 230, 67, 171, 93, 222, 0, 250, 105, 198, 195,
            98, 49, 175, 14, 32, 127, 246, 172, 130, 203, 30, 82,
        ]),
        U256::from_bytes_le([
            136, 195, 0, 32, 182, 197, 74, 16, 149, 223, 111, 253, 1, 48, 122, 36, 122, 106, 34,
            206, 208, 160, 238, 137, 113, 164, 68, 199, 217, 187, 186, 111,
        ]),
        U256::from_bytes_le([
            197, 35, 54, 206, 239, 115, 226, 219, 144, 106, 215, 243, 132, 120, 141, 197, 126, 101,
            95, 247, 240, 177, 246, 135, 46, 94, 13, 159, 212, 28, 203, 246,
        ]),
        U256::from_bytes_le([
            230, 59, 240, 62, 204, 247, 75, 107, 52, 117, 33, 229, 123, 242, 80, 216, 237, 125, 13,
            131, 61, 142, 246, 91, 82, 235, 19, 77, 30, 183, 179, 198,
        ]),
        U256::from_bytes_le([
            7, 67, 45, 12, 56, 65, 18, 243, 168, 103, 37, 15, 113, 144, 41, 100, 176, 35, 85, 170,
            80, 160, 151, 105, 33, 218, 217, 100, 129, 83, 187, 250,
        ]),
        U256::from_bytes_le([
            0, 205, 153, 34, 127, 105, 239, 41, 120, 224, 185, 49, 8, 42, 178, 12, 173, 221, 107,
            232, 177, 89, 155, 252, 126, 177, 180, 125, 106, 208, 157, 219,
        ]),
        U256::from_bytes_le([
            11, 215, 156, 88, 38, 119, 189, 107, 39, 196, 234, 74, 247, 235, 117, 154, 109, 120,
            120, 128, 99, 118, 62, 136, 128, 189, 147, 191, 218, 11, 104, 69,
        ]),
        U256::from_bytes_le([
            40, 138, 12, 178, 123, 101, 50, 68, 84, 86, 206, 199, 85, 89, 54, 194, 129, 151, 43,
            59, 195, 221, 117, 238, 6, 41, 58, 190, 249, 85, 90, 16,
        ]),
        U256::from_bytes_le([
            49, 72, 211, 231, 87, 198, 171, 225, 123, 238, 49, 181, 213, 17, 240, 135, 33, 141,
            240, 155, 203, 38, 91, 39, 203, 156, 235, 208, 66, 57, 172, 108,
        ]),
        U256::from_bytes_le([
            223, 47, 253, 178, 187, 228, 77, 162, 153, 255, 33, 72, 20, 111, 32, 157, 96, 128, 57,
            84, 218, 119, 101, 95, 41, 146, 195, 188, 124, 232, 242, 57,
        ]),
        U256::from_bytes_le([
            10, 119, 223, 219, 49, 68, 26, 86, 110, 9, 100, 16, 18, 209, 107, 63, 202, 118, 118,
            36, 125, 75, 42, 94, 68, 5, 54, 187, 165, 233, 99, 33,
        ]),
        U256::from_bytes_le([
            218, 176, 27, 94, 22, 198, 227, 107, 93, 165, 211, 210, 70, 38, 33, 209, 153, 61, 15,
            116, 185, 15, 53, 247, 41, 106, 92, 189, 158, 138, 92, 141,
        ]),
        U256::from_bytes_le([
            95, 7, 145, 168, 15, 30, 167, 183, 228, 188, 64, 218, 19, 101, 87, 58, 135, 18, 71,
            143, 191, 228, 198, 102, 223, 99, 134, 118, 53, 176, 64, 190,
        ]),
        U256::from_bytes_le([
            50, 105, 227, 74, 138, 0, 208, 176, 184, 82, 159, 142, 155, 179, 206, 236, 176, 206,
            170, 5, 252, 68, 218, 121, 99, 153, 166, 189, 76, 102, 83, 11,
        ]),
        U256::from_bytes_le([
            50, 248, 204, 139, 224, 237, 240, 93, 189, 6, 240, 67, 165, 70, 129, 220, 252, 225,
            114, 33, 54, 0, 171, 103, 4, 73, 248, 123, 159, 42, 26, 160,
        ]),
        U256::from_bytes_le([
            189, 40, 204, 241, 180, 81, 72, 222, 29, 113, 39, 193, 250, 145, 32, 229, 150, 92, 125,
            136, 129, 152, 181, 100, 239, 129, 62, 90, 218, 164, 148, 56,
        ]),
        U256::from_bytes_le([
            15, 199, 84, 192, 242, 88, 123, 66, 241, 210, 154, 207, 184, 4, 157, 145, 179, 72, 249,
            83, 242, 136, 245, 12, 141, 45, 232, 107, 191, 213, 64, 107,
        ]),
        U256::from_bytes_le([
            141, 219, 201, 82, 203, 112, 180, 15, 171, 49, 120, 246, 8, 211, 132, 200, 234, 140,
            34, 151, 79, 130, 226, 171, 224, 157, 62, 214, 138, 121, 94, 32,
        ]),
        U256::from_bytes_le([
            14, 217, 56, 21, 246, 67, 30, 139, 186, 82, 130, 145, 130, 231, 208, 2, 138, 27, 183,
            10, 82, 207, 91, 190, 135, 42, 130, 0, 77, 173, 186, 28,
        ]),
        U256::from_bytes_le([
            232, 6, 222, 109, 9, 152, 29, 178, 227, 84, 215, 212, 98, 150, 197, 105, 251, 16, 103,
            60, 166, 129, 208, 83, 169, 208, 153, 11, 89, 99, 52, 180,
        ]),
        U256::from_bytes_le([
            58, 122, 60, 91, 52, 36, 243, 183, 207, 24, 20, 2, 95, 98, 181, 172, 19, 187, 46, 144,
            75, 102, 0, 234, 132, 190, 196, 39, 132, 86, 94, 105,
        ]),
        U256::from_bytes_le([
            2, 199, 210, 50, 254, 71, 223, 254, 165, 205, 208, 76, 35, 114, 70, 14, 49, 114, 157,
            86, 2, 156, 14, 82, 69, 60, 244, 158, 48, 142, 42, 255,
        ]),
        U256::from_bytes_le([
            3, 218, 67, 172, 10, 136, 55, 243, 146, 90, 99, 239, 240, 251, 220, 69, 253, 69, 255,
            178, 60, 249, 148, 233, 157, 214, 233, 125, 123, 53, 42, 81,
        ]),
        U256::from_bytes_le([
            164, 56, 26, 71, 203, 121, 128, 232, 216, 158, 63, 99, 78, 77, 158, 196, 118, 196, 115,
            44, 214, 34, 26, 108, 52, 91, 13, 11, 164, 230, 188, 211,
        ]),
        U256::from_bytes_le([
            97, 243, 176, 107, 144, 126, 30, 114, 163, 71, 158, 192, 96, 87, 101, 147, 199, 217,
            160, 10, 112, 76, 1, 244, 11, 6, 138, 191, 70, 162, 175, 182,
        ]),
        U256::from_bytes_le([
            202, 72, 154, 200, 150, 214, 190, 49, 48, 50, 20, 44, 159, 28, 74, 36, 223, 120, 59,
            92, 107, 102, 72, 202, 98, 217, 40, 136, 73, 86, 28, 167,
        ]),
        U256::from_bytes_le([
            198, 53, 36, 45, 231, 3, 22, 47, 46, 36, 30, 73, 250, 216, 172, 203, 61, 25, 190, 95,
            231, 228, 220, 190, 202, 180, 162, 13, 230, 29, 24, 56,
        ]),
        U256::from_bytes_le([
            50, 50, 2, 189, 164, 58, 58, 153, 199, 184, 204, 220, 46, 149, 239, 209, 149, 144, 43,
            105, 12, 8, 164, 42, 63, 118, 209, 9, 55, 61, 217, 0,
        ]),
        U256::from_bytes_le([
            183, 142, 138, 136, 226, 139, 63, 113, 207, 115, 155, 225, 147, 113, 146, 115, 99, 75,
            11, 225, 56, 13, 124, 160, 0, 11, 24, 251, 145, 128, 148, 113,
        ]),
        U256::from_bytes_le([
            115, 188, 56, 97, 102, 124, 223, 247, 39, 205, 226, 1, 84, 39, 144, 0, 7, 232, 18, 222,
            4, 163, 158, 207, 214, 207, 67, 26, 130, 184, 122, 163,
        ]),
        U256::from_bytes_le([
            58, 137, 110, 93, 173, 108, 75, 47, 17, 155, 219, 50, 135, 5, 143, 229, 62, 156, 115,
            211, 164, 115, 28, 131, 248, 21, 239, 47, 47, 70, 125, 37,
        ]),
        U256::from_bytes_le([
            168, 216, 165, 136, 165, 193, 249, 172, 212, 188, 15, 182, 34, 126, 224, 147, 155, 66,
            104, 186, 37, 143, 105, 65, 254, 172, 234, 109, 17, 178, 242, 148,
        ]),
        U256::from_bytes_le([
            7, 21, 158, 21, 36, 194, 44, 113, 44, 31, 220, 29, 240, 143, 177, 202, 25, 143, 161,
            188, 251, 30, 184, 251, 191, 66, 144, 52, 210, 2, 112, 45,
        ]),
        U256::from_bytes_le([
            212, 13, 43, 73, 55, 213, 88, 202, 144, 215, 174, 198, 219, 37, 20, 135, 152, 215, 15,
            170, 27, 150, 192, 85, 6, 120, 161, 230, 81, 103, 194, 93,
        ]),
        U256::from_bytes_le([
            13, 45, 109, 157, 234, 22, 165, 205, 46, 149, 168, 149, 42, 103, 205, 199, 13, 77, 196,
            250, 230, 199, 138, 38, 248, 206, 62, 52, 192, 66, 178, 223,
        ]),
        U256::from_bytes_le([
            203, 13, 64, 95, 44, 143, 248, 175, 175, 5, 27, 223, 201, 218, 68, 47, 208, 13, 142,
            80, 69, 4, 44, 176, 137, 233, 226, 2, 38, 211, 255, 45,
        ]),
        U256::from_bytes_le([
            144, 154, 181, 191, 5, 81, 212, 103, 27, 178, 59, 189, 63, 2, 244, 123, 150, 226, 80,
            26, 117, 58, 246, 124, 14, 74, 47, 200, 198, 255, 207, 221,
        ]),
        U256::from_bytes_le([
            141, 170, 189, 72, 35, 189, 225, 181, 234, 124, 107, 188, 126, 175, 182, 74, 157, 79,
            237, 94, 81, 15, 118, 197, 178, 217, 131, 97, 31, 177, 100, 57,
        ]),
        U256::from_bytes_le([
            35, 116, 144, 37, 83, 229, 157, 99, 3, 1, 98, 24, 145, 150, 232, 203, 170, 86, 203, 74,
            50, 70, 122, 215, 129, 169, 116, 233, 219, 190, 248, 161,
        ]),
        U256::from_bytes_le([
            157, 5, 239, 218, 175, 61, 99, 7, 239, 108, 35, 228, 73, 45, 44, 207, 98, 39, 32, 80,
            234, 231, 49, 6, 96, 42, 128, 3, 230, 139, 213, 222,
        ]),
        U256::from_bytes_le([
            34, 30, 182, 176, 47, 202, 131, 122, 7, 137, 18, 137, 79, 1, 110, 39, 64, 21, 80, 158,
            28, 11, 83, 24, 45, 16, 219, 246, 57, 220, 149, 28,
        ]),
        U256::from_bytes_le([
            113, 190, 8, 144, 185, 41, 31, 198, 176, 244, 236, 23, 74, 48, 136, 60, 144, 111, 116,
            52, 61, 213, 233, 96, 96, 52, 134, 172, 179, 134, 56, 158,
        ]),
        U256::from_bytes_le([
            32, 231, 44, 46, 9, 154, 163, 241, 186, 217, 247, 194, 177, 160, 199, 171, 163, 201,
            245, 105, 181, 47, 219, 249, 70, 132, 87, 16, 251, 123, 255, 132,
        ]),
        U256::from_bytes_le([
            217, 221, 169, 161, 197, 135, 59, 79, 201, 209, 186, 168, 165, 238, 243, 111, 111, 207,
            59, 16, 253, 87, 250, 233, 9, 8, 179, 117, 252, 151, 5, 118,
        ]),
        U256::from_bytes_le([
            29, 151, 213, 129, 52, 95, 230, 145, 158, 147, 1, 80, 255, 165, 29, 151, 16, 208, 123,
            244, 50, 215, 119, 77, 19, 159, 139, 211, 28, 50, 207, 81,
        ]),
        U256::from_bytes_le([
            72, 81, 121, 111, 149, 188, 80, 204, 181, 72, 86, 118, 205, 101, 172, 83, 102, 86, 243,
            238, 222, 214, 71, 117, 217, 12, 168, 13, 238, 4, 1, 58,
        ]),
        U256::from_bytes_le([
            75, 159, 172, 229, 12, 43, 89, 243, 54, 15, 150, 197, 247, 39, 197, 111, 76, 194, 36,
            77, 203, 220, 120, 4, 124, 215, 178, 225, 250, 58, 58, 103,
        ]),
        U256::from_bytes_le([
            233, 207, 83, 76, 70, 53, 79, 135, 232, 76, 163, 79, 16, 96, 105, 119, 34, 231, 52,
            137, 226, 20, 171, 36, 200, 249, 161, 22, 86, 18, 102, 32,
        ]),
        U256::from_bytes_le([
            220, 199, 236, 39, 32, 213, 30, 49, 50, 65, 169, 19, 87, 119, 182, 9, 121, 91, 19, 76,
            82, 51, 63, 220, 174, 155, 18, 53, 113, 177, 246, 117,
        ]),
        U256::from_bytes_le([
            160, 119, 246, 147, 210, 2, 198, 232, 208, 224, 73, 149, 60, 50, 129, 189, 114, 88,
            139, 195, 224, 102, 199, 138, 111, 131, 65, 75, 231, 196, 20, 12,
        ]),
        U256::from_bytes_le([
            123, 149, 197, 188, 163, 22, 178, 141, 225, 83, 7, 85, 243, 13, 119, 126, 104, 242,
            100, 3, 185, 244, 46, 160, 237, 223, 199, 147, 24, 37, 174, 169,
        ]),
        U256::from_bytes_le([
            86, 127, 130, 239, 74, 85, 160, 97, 243, 141, 85, 111, 3, 141, 235, 77, 41, 112, 34,
            56, 123, 154, 246, 67, 41, 106, 37, 63, 167, 222, 149, 228,
        ]),
        U256::from_bytes_le([
            167, 91, 231, 213, 188, 184, 169, 20, 190, 47, 29, 120, 56, 243, 209, 49, 109, 143,
            137, 53, 219, 234, 8, 211, 140, 213, 65, 21, 184, 159, 201, 124,
        ]),
        U256::from_bytes_le([
            250, 182, 41, 116, 149, 2, 38, 250, 234, 169, 24, 165, 167, 31, 54, 78, 78, 41, 167,
            194, 202, 97, 227, 101, 238, 169, 27, 50, 165, 101, 32, 160,
        ]),
        U256::from_bytes_le([
            154, 24, 44, 121, 102, 184, 152, 117, 69, 80, 18, 193, 176, 207, 59, 151, 19, 127, 82,
            217, 181, 79, 205, 158, 232, 56, 45, 35, 58, 69, 57, 255,
        ]),
        U256::from_bytes_le([
            159, 137, 98, 109, 45, 197, 179, 46, 214, 104, 190, 195, 66, 71, 54, 112, 216, 160, 1,
            112, 239, 142, 90, 238, 126, 146, 1, 187, 190, 144, 76, 12,
        ]),
        U256::from_bytes_le([
            57, 91, 172, 162, 85, 31, 84, 230, 8, 112, 187, 50, 25, 172, 48, 58, 129, 83, 137, 136,
            201, 203, 229, 106, 51, 222, 82, 3, 78, 218, 39, 190,
        ]),
        U256::from_bytes_le([
            212, 251, 28, 25, 94, 18, 112, 77, 211, 164, 248, 23, 16, 34, 178, 80, 115, 19, 230,
            91, 164, 40, 207, 140, 221, 28, 117, 172, 90, 219, 152, 12,
        ]),
        U256::from_bytes_le([
            178, 19, 74, 236, 69, 14, 167, 124, 229, 121, 254, 109, 71, 37, 95, 69, 240, 16, 176,
            58, 34, 243, 41, 47, 158, 179, 57, 242, 104, 215, 207, 34,
        ]),
        U256::from_bytes_le([
            18, 2, 56, 201, 102, 112, 142, 221, 99, 134, 108, 124, 189, 137, 91, 133, 171, 180, 41,
            203, 151, 171, 248, 69, 90, 172, 85, 228, 198, 243, 84, 101,
        ]),
        U256::from_bytes_le([
            24, 51, 74, 225, 102, 219, 172, 151, 52, 249, 171, 176, 195, 163, 216, 102, 183, 194,
            161, 255, 70, 106, 135, 241, 205, 64, 17, 179, 232, 7, 168, 227,
        ]),
        U256::from_bytes_le([
            117, 229, 46, 108, 137, 251, 200, 249, 147, 164, 92, 23, 53, 48, 138, 25, 82, 0, 5,
            231, 139, 251, 106, 130, 137, 218, 29, 229, 162, 232, 37, 176,
        ]),
        U256::from_bytes_le([
            111, 170, 85, 3, 240, 24, 148, 56, 130, 73, 62, 159, 157, 35, 166, 23, 123, 9, 44, 17,
            167, 241, 219, 71, 28, 84, 64, 54, 53, 134, 51, 108,
        ]),
        U256::from_bytes_le([
            135, 153, 191, 210, 125, 221, 21, 72, 35, 17, 43, 129, 52, 107, 16, 157, 157, 242, 100,
            162, 116, 41, 112, 232, 168, 115, 147, 71, 249, 102, 66, 197,
        ]),
        U256::from_bytes_le([
            188, 149, 30, 83, 71, 98, 111, 48, 116, 232, 47, 84, 185, 31, 242, 226, 139, 118, 186,
            170, 194, 209, 143, 124, 223, 114, 58, 76, 193, 150, 249, 204,
        ]),
        U256::from_bytes_le([
            113, 49, 236, 13, 26, 33, 161, 131, 156, 49, 118, 82, 29, 43, 88, 121, 221, 205, 213,
            31, 198, 159, 82, 7, 81, 98, 170, 79, 46, 244, 200, 90,
        ]),
        U256::from_bytes_le([
            16, 39, 197, 77, 22, 8, 124, 216, 238, 80, 74, 1, 236, 153, 146, 12, 231, 67, 142, 251,
            4, 71, 102, 192, 70, 210, 23, 26, 117, 113, 174, 165,
        ]),
        U256::from_bytes_le([
            8, 146, 130, 245, 214, 121, 7, 147, 188, 164, 99, 23, 157, 193, 247, 207, 75, 59, 17,
            109, 244, 169, 220, 167, 142, 230, 66, 23, 110, 136, 196, 25,
        ]),
        U256::from_bytes_le([
            189, 137, 82, 251, 39, 179, 131, 242, 180, 14, 114, 192, 166, 210, 137, 99, 10, 16,
            140, 215, 138, 162, 70, 151, 249, 149, 8, 37, 81, 122, 95, 168,
        ]),
        U256::from_bytes_le([
            186, 102, 52, 112, 113, 70, 117, 218, 13, 181, 213, 85, 128, 2, 88, 2, 202, 153, 99,
            179, 154, 29, 188, 198, 115, 255, 76, 55, 12, 234, 242, 132,
        ]),
        U256::from_bytes_le([
            194, 121, 79, 233, 11, 92, 245, 137, 227, 253, 5, 14, 87, 182, 76, 204, 128, 113, 155,
            32, 144, 201, 219, 232, 68, 52, 119, 213, 50, 182, 146, 206,
        ]),
        U256::from_bytes_le([
            67, 35, 109, 102, 187, 71, 20, 91, 224, 28, 107, 196, 75, 67, 86, 146, 110, 189, 30,
            179, 125, 6, 179, 118, 147, 66, 232, 119, 201, 60, 72, 186,
        ]),
        U256::from_bytes_le([
            168, 200, 76, 163, 217, 114, 9, 180, 57, 170, 155, 112, 25, 87, 173, 145, 76, 99, 250,
            168, 28, 246, 9, 112, 36, 156, 247, 206, 63, 192, 185, 75,
        ]),
        U256::from_bytes_le([
            101, 133, 12, 126, 47, 142, 134, 91, 145, 244, 87, 73, 71, 46, 52, 237, 11, 228, 208,
            81, 167, 77, 71, 15, 24, 253, 180, 176, 234, 162, 36, 201,
        ]),
        U256::from_bytes_le([
            253, 185, 68, 42, 7, 96, 235, 84, 252, 136, 220, 183, 102, 59, 168, 95, 61, 180, 212,
            43, 248, 42, 194, 46, 253, 164, 201, 101, 218, 92, 138, 96,
        ]),
        U256::from_bytes_le([
            50, 142, 162, 235, 65, 133, 21, 209, 194, 238, 185, 198, 9, 72, 215, 20, 12, 252, 75,
            184, 232, 195, 89, 148, 52, 126, 188, 162, 205, 94, 91, 74,
        ]),
        U256::from_bytes_le([
            209, 247, 22, 92, 173, 68, 137, 78, 75, 163, 5, 75, 182, 173, 197, 162, 175, 219, 131,
            63, 218, 85, 24, 10, 58, 104, 1, 153, 61, 171, 109, 41,
        ]),
        U256::from_bytes_le([
            16, 105, 33, 47, 235, 208, 167, 214, 254, 51, 223, 150, 167, 155, 218, 12, 33, 121,
            109, 75, 131, 193, 92, 102, 22, 242, 122, 174, 199, 104, 137, 130,
        ]),
        U256::from_bytes_le([
            251, 138, 16, 116, 28, 168, 128, 80, 119, 90, 23, 57, 3, 227, 119, 218, 38, 154, 0,
            225, 133, 242, 64, 153, 10, 42, 147, 205, 215, 105, 103, 234,
        ]),
        U256::from_bytes_le([
            117, 164, 241, 204, 120, 230, 159, 245, 242, 72, 227, 169, 31, 61, 240, 83, 5, 27, 19,
            58, 179, 43, 197, 148, 59, 188, 191, 35, 242, 169, 68, 70,
        ]),
        U256::from_bytes_le([
            192, 228, 211, 153, 179, 122, 75, 22, 131, 69, 129, 145, 92, 46, 86, 95, 62, 254, 110,
            101, 94, 252, 21, 94, 1, 91, 134, 196, 223, 225, 22, 203,
        ]),
        U256::from_bytes_le([
            123, 108, 129, 2, 109, 66, 34, 222, 41, 70, 7, 96, 105, 190, 206, 165, 161, 180, 186,
            55, 190, 232, 160, 208, 244, 221, 11, 92, 27, 14, 152, 135,
        ]),
        U256::from_bytes_le([
            128, 142, 110, 160, 7, 117, 124, 54, 255, 156, 65, 96, 15, 52, 234, 95, 138, 219, 206,
            4, 54, 43, 169, 206, 81, 0, 240, 182, 242, 123, 198, 215,
        ]),
        U256::from_bytes_le([
            58, 67, 91, 26, 103, 240, 48, 81, 182, 207, 29, 2, 230, 88, 69, 112, 107, 41, 193, 165,
            18, 81, 130, 106, 4, 237, 224, 215, 40, 249, 23, 92,
        ]),
        U256::from_bytes_le([
            88, 166, 194, 86, 164, 164, 247, 160, 215, 59, 19, 133, 50, 122, 202, 128, 17, 248,
            168, 234, 199, 67, 154, 162, 5, 170, 239, 96, 6, 105, 59, 178,
        ]),
        U256::from_bytes_le([
            52, 100, 157, 137, 162, 115, 86, 230, 235, 106, 166, 235, 143, 5, 203, 178, 245, 59,
            129, 78, 20, 77, 126, 245, 243, 214, 37, 212, 34, 49, 120, 151,
        ]),
        U256::from_bytes_le([
            247, 12, 214, 36, 242, 96, 130, 152, 132, 22, 1, 163, 206, 30, 170, 173, 217, 194, 24,
            249, 186, 101, 170, 190, 98, 124, 218, 32, 55, 31, 28, 74,
        ]),
        U256::from_bytes_le([
            186, 188, 221, 30, 3, 150, 23, 100, 77, 109, 144, 72, 153, 229, 83, 153, 83, 74, 4,
            152, 188, 125, 242, 12, 81, 200, 206, 40, 252, 133, 65, 201,
        ]),
        U256::from_bytes_le([
            60, 108, 250, 154, 33, 79, 96, 200, 168, 194, 35, 38, 44, 45, 164, 24, 163, 129, 213,
            175, 232, 71, 148, 18, 144, 96, 66, 44, 243, 129, 220, 113,
        ]),
        U256::from_bytes_le([
            53, 224, 61, 74, 79, 234, 31, 231, 150, 68, 163, 146, 30, 25, 2, 97, 98, 203, 213, 231,
            204, 134, 18, 244, 217, 138, 19, 130, 210, 52, 97, 150,
        ]),
        U256::from_bytes_le([
            127, 185, 19, 65, 197, 183, 194, 104, 82, 83, 7, 144, 70, 163, 78, 241, 68, 179, 128,
            214, 192, 134, 207, 29, 102, 184, 136, 105, 31, 139, 249, 237,
        ]),
        U256::from_bytes_le([
            139, 106, 159, 226, 125, 151, 108, 64, 82, 187, 52, 52, 11, 122, 208, 139, 47, 228, 10,
            22, 180, 96, 55, 189, 235, 219, 91, 92, 27, 10, 80, 160,
        ]),
        U256::from_bytes_le([
            171, 159, 186, 174, 31, 242, 198, 76, 225, 26, 147, 156, 39, 1, 29, 194, 27, 106, 13,
            94, 213, 213, 134, 36, 68, 28, 215, 103, 142, 227, 252, 14,
        ]),
        U256::from_bytes_le([
            9, 11, 237, 220, 198, 121, 139, 157, 182, 63, 253, 197, 187, 100, 116, 221, 217, 64,
            165, 3, 108, 250, 229, 192, 145, 235, 175, 197, 32, 151, 10, 112,
        ]),
        U256::from_bytes_le([
            230, 66, 96, 85, 177, 13, 230, 251, 111, 95, 42, 156, 95, 83, 210, 129, 234, 72, 2, 67,
            50, 15, 117, 12, 102, 22, 58, 200, 41, 79, 232, 209,
        ]),
        U256::from_bytes_le([
            194, 204, 232, 199, 246, 153, 220, 24, 10, 210, 91, 80, 65, 65, 29, 55, 164, 69, 42,
            55, 92, 214, 197, 24, 197, 66, 222, 47, 155, 130, 100, 174,
        ]),
        U256::from_bytes_le([
            47, 255, 146, 57, 253, 188, 128, 56, 118, 196, 239, 29, 205, 231, 105, 205, 159, 49,
            60, 25, 98, 4, 88, 217, 255, 200, 61, 89, 250, 181, 245, 17,
        ]),
        U256::from_bytes_le([
            76, 238, 163, 45, 196, 8, 103, 133, 231, 129, 189, 214, 57, 7, 23, 35, 210, 111, 77,
            69, 119, 52, 171, 133, 21, 127, 170, 252, 12, 165, 110, 95,
        ]),
        U256::from_bytes_le([
            95, 140, 73, 76, 43, 39, 138, 250, 217, 41, 223, 49, 229, 24, 252, 200, 6, 229, 130,
            205, 39, 223, 181, 185, 229, 137, 59, 210, 47, 18, 142, 120,
        ]),
        U256::from_bytes_le([
            42, 88, 10, 106, 149, 123, 162, 220, 234, 163, 122, 114, 143, 153, 88, 199, 159, 246,
            10, 2, 76, 215, 66, 48, 34, 110, 124, 120, 90, 56, 115, 193,
        ]),
        U256::from_bytes_le([
            25, 87, 27, 25, 52, 115, 232, 104, 153, 46, 56, 241, 178, 91, 156, 197, 42, 49, 195,
            88, 79, 200, 119, 39, 79, 55, 182, 247, 64, 32, 214, 155,
        ]),
        U256::from_bytes_le([
            166, 246, 110, 133, 238, 103, 51, 226, 126, 142, 6, 120, 57, 155, 44, 181, 178, 143,
            164, 97, 98, 63, 120, 128, 124, 245, 147, 238, 12, 22, 2, 214,
        ]),
        U256::from_bytes_le([
            224, 97, 0, 113, 183, 234, 55, 81, 206, 49, 46, 251, 18, 203, 121, 11, 86, 86, 153,
            240, 241, 173, 66, 45, 106, 142, 65, 62, 97, 204, 62, 35,
        ]),
        U256::from_bytes_le([
            228, 198, 101, 62, 126, 116, 8, 47, 111, 156, 6, 80, 129, 171, 119, 128, 72, 165, 35,
            151, 192, 18, 251, 28, 194, 69, 43, 150, 223, 89, 26, 222,
        ]),
        U256::from_bytes_le([
            220, 4, 78, 135, 132, 122, 109, 190, 151, 231, 235, 254, 84, 21, 167, 23, 135, 131,
            208, 14, 35, 16, 39, 104, 86, 203, 242, 156, 92, 234, 105, 131,
        ]),
        U256::from_bytes_le([
            253, 134, 43, 112, 23, 70, 62, 213, 218, 46, 116, 24, 212, 126, 44, 219, 40, 249, 197,
            53, 124, 91, 242, 130, 144, 197, 77, 223, 172, 116, 179, 196,
        ]),
        U256::from_bytes_le([
            243, 105, 18, 47, 203, 235, 57, 134, 45, 66, 8, 35, 149, 4, 43, 191, 119, 175, 23, 62,
            174, 54, 157, 38, 8, 48, 123, 248, 199, 204, 49, 192,
        ]),
        U256::from_bytes_le([
            68, 27, 229, 96, 218, 121, 40, 208, 242, 215, 106, 98, 160, 163, 33, 96, 64, 183, 40,
            166, 149, 112, 31, 73, 33, 226, 205, 161, 107, 170, 172, 200,
        ]),
        U256::from_bytes_le([
            105, 13, 6, 160, 215, 192, 247, 224, 79, 104, 197, 100, 85, 230, 19, 159, 232, 248, 6,
            43, 150, 59, 207, 223, 164, 75, 225, 146, 33, 9, 33, 192,
        ]),
        U256::from_bytes_le([
            16, 62, 178, 200, 29, 35, 164, 80, 194, 229, 81, 122, 191, 202, 230, 134, 80, 162, 48,
            248, 69, 225, 67, 56, 188, 69, 85, 28, 157, 126, 192, 100,
        ]),
        U256::from_bytes_le([
            93, 143, 237, 105, 74, 141, 79, 237, 93, 89, 198, 35, 23, 225, 222, 186, 172, 223, 89,
            31, 88, 16, 39, 105, 172, 233, 63, 238, 225, 88, 174, 181,
        ]),
        U256::from_bytes_le([
            249, 79, 8, 5, 124, 216, 154, 160, 157, 52, 14, 123, 77, 136, 172, 193, 231, 8, 20, 91,
            237, 153, 88, 109, 44, 224, 80, 254, 11, 10, 176, 173,
        ]),
        U256::from_bytes_le([
            132, 211, 241, 209, 181, 190, 32, 205, 244, 188, 231, 111, 24, 18, 57, 145, 236, 19,
            155, 195, 235, 136, 180, 153, 120, 220, 148, 62, 37, 121, 161, 33,
        ]),
        U256::from_bytes_le([
            37, 155, 247, 180, 231, 202, 57, 92, 135, 185, 58, 187, 180, 212, 114, 94, 64, 62, 130,
            39, 66, 52, 242, 240, 230, 229, 252, 164, 129, 225, 131, 33,
        ]),
        U256::from_bytes_le([
            33, 213, 127, 81, 47, 122, 50, 155, 110, 41, 169, 140, 239, 155, 159, 26, 82, 117, 40,
            32, 241, 55, 229, 145, 250, 84, 183, 79, 125, 253, 93, 64,
        ]),
        U256::from_bytes_le([
            184, 6, 135, 120, 86, 182, 228, 35, 198, 139, 52, 149, 98, 49, 148, 139, 69, 173, 92,
            247, 252, 34, 8, 174, 99, 195, 114, 17, 105, 111, 151, 164,
        ]),
        U256::from_bytes_le([
            153, 103, 119, 184, 21, 0, 40, 144, 49, 226, 136, 172, 238, 172, 192, 155, 215, 98,
            253, 145, 99, 236, 133, 43, 160, 99, 17, 167, 101, 165, 131, 246,
        ]),
        U256::from_bytes_le([
            35, 82, 69, 163, 219, 79, 149, 67, 57, 242, 50, 127, 6, 105, 32, 191, 255, 182, 228,
            55, 24, 244, 168, 209, 173, 175, 169, 152, 187, 76, 199, 239,
        ]),
        U256::from_bytes_le([
            46, 39, 73, 50, 86, 3, 202, 39, 43, 208, 202, 251, 65, 247, 10, 183, 135, 96, 203, 205,
            86, 89, 103, 140, 37, 54, 108, 75, 81, 76, 136, 60,
        ]),
        U256::from_bytes_le([
            135, 144, 32, 245, 208, 218, 117, 199, 101, 63, 255, 194, 37, 217, 95, 118, 3, 206,
            165, 202, 214, 244, 93, 71, 159, 207, 48, 253, 237, 225, 65, 83,
        ]),
        U256::from_bytes_le([
            36, 2, 105, 159, 57, 127, 58, 172, 95, 161, 70, 100, 0, 146, 232, 166, 85, 2, 218, 69,
            236, 88, 140, 41, 115, 235, 9, 114, 239, 136, 104, 174,
        ]),
        U256::from_bytes_le([
            42, 107, 187, 0, 175, 76, 203, 94, 119, 174, 26, 209, 115, 75, 72, 15, 233, 170, 123,
            210, 153, 105, 209, 24, 21, 17, 116, 88, 216, 122, 165, 222,
        ]),
        U256::from_bytes_le([
            88, 73, 237, 161, 154, 50, 157, 0, 154, 204, 54, 83, 219, 137, 69, 156, 217, 14, 127,
            58, 26, 69, 73, 134, 85, 65, 154, 81, 6, 124, 141, 60,
        ]),
        U256::from_bytes_le([
            122, 105, 198, 46, 45, 66, 114, 92, 43, 156, 4, 55, 34, 250, 209, 228, 248, 214, 195,
            255, 2, 152, 30, 31, 110, 27, 5, 173, 125, 15, 61, 22,
        ]),
        U256::from_bytes_le([
            114, 89, 135, 148, 91, 209, 122, 199, 43, 135, 121, 104, 20, 254, 17, 53, 185, 83, 157,
            227, 245, 5, 156, 239, 34, 85, 192, 32, 43, 119, 123, 136,
        ]),
        U256::from_bytes_le([
            96, 225, 229, 224, 88, 17, 85, 11, 159, 227, 128, 19, 54, 137, 3, 189, 68, 6, 43, 183,
            208, 121, 244, 207, 219, 87, 151, 104, 100, 72, 233, 166,
        ]),
        U256::from_bytes_le([
            184, 121, 169, 94, 128, 186, 146, 198, 56, 51, 39, 162, 162, 70, 28, 96, 233, 121, 252,
            231, 102, 36, 97, 19, 22, 21, 163, 99, 64, 237, 66, 180,
        ]),
        U256::from_bytes_le([
            141, 214, 184, 187, 137, 247, 236, 127, 26, 215, 222, 230, 244, 62, 82, 7, 7, 182, 254,
            159, 23, 190, 59, 222, 212, 9, 128, 185, 116, 149, 234, 228,
        ]),
        U256::from_bytes_le([
            166, 53, 46, 198, 125, 250, 248, 179, 168, 17, 37, 102, 46, 219, 114, 3, 65, 253, 43,
            27, 70, 168, 192, 148, 158, 31, 202, 142, 8, 124, 191, 140,
        ]),
        U256::from_bytes_le([
            151, 232, 52, 255, 184, 71, 50, 255, 140, 216, 71, 14, 30, 180, 78, 89, 98, 79, 84, 69,
            107, 216, 27, 8, 254, 251, 59, 69, 112, 236, 71, 63,
        ]),
        U256::from_bytes_le([
            227, 116, 251, 209, 37, 108, 67, 64, 3, 37, 194, 134, 216, 150, 26, 173, 26, 46, 192,
            180, 74, 61, 42, 111, 170, 201, 110, 255, 255, 224, 238, 216,
        ]),
        U256::from_bytes_le([
            210, 236, 226, 30, 225, 225, 174, 30, 66, 7, 139, 121, 239, 52, 174, 135, 173, 247,
            205, 168, 251, 71, 239, 106, 13, 134, 26, 244, 50, 169, 44, 8,
        ]),
        U256::from_bytes_le([
            180, 222, 177, 31, 116, 105, 255, 130, 110, 247, 111, 87, 38, 186, 34, 89, 60, 48, 221,
            181, 82, 112, 187, 104, 123, 208, 180, 139, 233, 76, 216, 48,
        ]),
        U256::from_bytes_le([
            5, 243, 223, 239, 123, 20, 171, 85, 215, 153, 96, 37, 117, 149, 163, 182, 30, 95, 60,
            74, 103, 127, 186, 7, 234, 102, 18, 72, 118, 176, 74, 133,
        ]),
        U256::from_bytes_le([
            32, 0, 186, 167, 165, 46, 61, 48, 128, 136, 214, 90, 199, 227, 141, 215, 41, 136, 186,
            44, 173, 150, 45, 200, 29, 38, 101, 130, 136, 174, 201, 181,
        ]),
        U256::from_bytes_le([
            72, 150, 117, 125, 74, 66, 72, 89, 182, 96, 207, 222, 11, 32, 200, 128, 96, 112, 140,
            12, 32, 146, 115, 127, 172, 181, 192, 116, 192, 179, 83, 184,
        ]),
        U256::from_bytes_le([
            75, 105, 228, 174, 155, 155, 206, 150, 83, 72, 103, 252, 176, 203, 188, 124, 84, 171,
            103, 14, 187, 76, 23, 168, 45, 229, 247, 194, 208, 181, 62, 93,
        ]),
        U256::from_bytes_le([
            71, 195, 178, 35, 158, 235, 9, 232, 212, 227, 30, 215, 143, 107, 56, 232, 65, 34, 52,
            173, 208, 105, 144, 52, 65, 159, 10, 45, 77, 69, 185, 231,
        ]),
        U256::from_bytes_le([
            63, 159, 234, 36, 48, 117, 80, 152, 47, 22, 43, 210, 182, 199, 49, 121, 153, 156, 88,
            63, 105, 21, 47, 249, 135, 116, 98, 6, 249, 234, 225, 244,
        ]),
        U256::from_bytes_le([
            204, 209, 193, 75, 116, 187, 252, 87, 86, 92, 100, 49, 157, 174, 41, 230, 250, 173,
            175, 175, 197, 51, 78, 194, 25, 168, 154, 127, 137, 244, 217, 109,
        ]),
        U256::from_bytes_le([
            92, 139, 171, 90, 217, 67, 165, 27, 246, 132, 123, 164, 145, 112, 168, 198, 16, 79,
            103, 172, 167, 163, 55, 117, 211, 123, 44, 8, 44, 58, 148, 55,
        ]),
        U256::from_bytes_le([
            2, 240, 211, 240, 144, 87, 33, 185, 213, 180, 4, 247, 59, 28, 87, 17, 188, 177, 17, 62,
            63, 49, 47, 197, 106, 33, 125, 77, 167, 176, 234, 32,
        ]),
        U256::from_bytes_le([
            78, 129, 67, 130, 202, 255, 241, 148, 92, 2, 242, 72, 232, 28, 33, 223, 1, 93, 183, 44,
            58, 165, 24, 186, 191, 82, 132, 41, 211, 156, 177, 109,
        ]),
        U256::from_bytes_le([
            6, 4, 251, 38, 36, 118, 145, 161, 13, 130, 70, 163, 193, 211, 80, 153, 32, 119, 28, 93,
            137, 41, 188, 88, 235, 37, 228, 29, 156, 219, 24, 202,
        ]),
        U256::from_bytes_le([
            144, 191, 94, 132, 78, 184, 61, 28, 121, 0, 182, 108, 76, 6, 254, 133, 43, 74, 230,
            124, 137, 144, 209, 110, 64, 189, 228, 242, 139, 53, 255, 158,
        ]),
        U256::from_bytes_le([
            42, 18, 234, 10, 238, 253, 70, 76, 144, 218, 225, 203, 8, 133, 35, 205, 26, 106, 206,
            5, 20, 20, 4, 99, 111, 211, 85, 17, 182, 213, 233, 92,
        ]),
        U256::from_bytes_le([
            151, 233, 155, 59, 158, 244, 71, 88, 126, 230, 120, 155, 105, 5, 143, 10, 85, 200, 140,
            97, 211, 221, 91, 216, 228, 211, 165, 45, 146, 246, 3, 209,
        ]),
        U256::from_bytes_le([
            47, 21, 80, 244, 36, 160, 216, 148, 241, 207, 167, 133, 77, 170, 173, 134, 247, 32,
            210, 241, 20, 42, 127, 251, 112, 30, 11, 54, 65, 237, 163, 162,
        ]),
        U256::from_bytes_le([
            162, 144, 74, 176, 13, 146, 192, 98, 98, 166, 11, 226, 187, 176, 251, 217, 7, 17, 23,
            196, 48, 62, 106, 126, 66, 225, 198, 121, 108, 154, 65, 205,
        ]),
        U256::from_bytes_le([
            90, 71, 50, 210, 136, 158, 160, 197, 173, 195, 183, 16, 68, 156, 60, 162, 242, 82, 230,
            160, 108, 50, 29, 169, 29, 178, 127, 185, 38, 234, 143, 220,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_512_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("88320d2bead34a47f2ef4e1e8e415b42bcb9955ad04e06ff309d49681c2628f2");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_8_zero() {
    let mut value = Vector::<U256, 8>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_8_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_512_max() {
    let mut value = Vector::<u64, 512>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_512_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("8f711e9197bcd96314b8d20425eac7dce4aee7c9a0579e901d636d3256db3672");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_8_random() {
    let mut value =
        Vector::<u8, 8>::try_from(Vec::<u8>::from_iter([76, 46, 93, 58, 7, 249, 127, 33])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_8_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("4c2e5d3a07f97f21000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_512_max() {
    let mut value = Vector::<u16, 512>::try_from(Vec::<u16>::from_iter([
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_512_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("d3313908d702519e871c34a2b5f7d84108966149289a16d7795ef15ebaa42b25");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_4_random() {
    let mut value = Vector::<u8, 4>::try_from(Vec::<u8>::from_iter([50, 181, 121, 8])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_4_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("32b5790800000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_512_zero() {
    let mut value = Vector::<u64, 512>::try_from(Vec::<u64>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_512_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 512> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("87eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_5_random() {
    let mut value = Vector::<U256, 5>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            179, 22, 196, 129, 77, 158, 184, 168, 7, 100, 123, 93, 196, 11, 104, 117, 250, 160,
            128, 244, 88, 117, 73, 178, 87, 111, 186, 153, 1, 54, 206, 160,
        ]),
        U256::from_bytes_le([
            153, 100, 207, 157, 51, 141, 54, 134, 26, 34, 226, 19, 133, 32, 118, 48, 113, 230, 32,
            79, 111, 236, 253, 237, 225, 220, 67, 124, 134, 148, 211, 239,
        ]),
        U256::from_bytes_le([
            108, 160, 164, 78, 114, 212, 79, 190, 253, 129, 70, 169, 115, 42, 5, 49, 75, 4, 111,
            19, 46, 85, 119, 82, 177, 187, 196, 49, 87, 80, 31, 189,
        ]),
        U256::from_bytes_le([
            131, 209, 237, 58, 84, 125, 195, 202, 209, 12, 173, 34, 238, 25, 1, 95, 203, 67, 9,
            235, 139, 149, 129, 43, 230, 200, 50, 241, 181, 61, 97, 136,
        ]),
        U256::from_bytes_le([
            60, 169, 38, 245, 186, 228, 193, 208, 131, 226, 128, 133, 125, 253, 167, 1, 52, 50, 64,
            86, 59, 104, 210, 200, 254, 145, 245, 192, 67, 234, 155, 68,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_5_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 5> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("2080573f384b29b3453b8cc44a967325a2e9ad22cb1b3f1d81554bb11479c2bc");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_1_max() {
    let mut value = Vector::<U256, 1>::try_from(Vec::<U256>::from_iter([U256::from_bytes_le([
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    ])]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_1_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_513_max() {
    let mut value = Vector::<u16, 513>::try_from(Vec::<u16>::from_iter([
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        65535, 65535, 65535, 65535, 65535, 65535,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_513_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("193411b011bc1acbf600803324bc5dc359acef14c1be285ef7565186c0ea9b10");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_513_max() {
    let mut value = Vector::<u64, 513>::try_from(Vec::<u64>::from_iter([
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_513_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("76e07c25312b02171801bc5bfa77a4c4f65ca1a93464d9812362009307ecfb55");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_1_random() {
    let mut value = Vector::<u32, 1>::try_from(Vec::<u32>::from_iter([1797257601])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_1_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 1> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("81f91f6b00000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_4_zero() {
    let mut value = Vector::<u128, 4>::try_from(Vec::<u128>::from_iter([0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_4_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_4_zero() {
    let mut value = Vector::<U256, 4>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
        U256::from_bytes_le([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_4_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 4> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_3_random() {
    let mut value = Vector::<u128, 3>::try_from(Vec::<u128>::from_iter([
        220301989141709271334326095341414922102,
        210235080945710533958926333282570767995,
        38717160196772117737433576948282568669,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_3_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("5376f444f73d42d4319e96d18c1d78ffab3f12464280dee8cf1df519ff50d628");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_3_max() {
    let mut value = Vector::<U256, 3>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_3_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("4a6ba660d16b4dde152d00ba82cdde34827411f341c56b102e7962410924ad36");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_31_zero() {
    let mut value = Vector::<u128, 31>::try_from(Vec::<u128>::from_iter([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_31_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint16_3_zero() {
    let mut value = Vector::<u16, 3>::try_from(Vec::<u16>::from_iter([0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint16_3_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u16, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint8_513_random() {
    let mut value = Vector::<u8, 513>::try_from(Vec::<u8>::from_iter([
        43, 14, 152, 176, 220, 9, 200, 233, 44, 111, 40, 178, 171, 180, 198, 181, 48, 15, 66, 68,
        230, 183, 64, 49, 31, 136, 81, 16, 173, 252, 42, 222, 184, 9, 215, 161, 98, 84, 117, 216,
        87, 221, 255, 71, 194, 243, 197, 156, 141, 132, 73, 183, 67, 133, 159, 127, 151, 85, 79,
        233, 29, 133, 214, 188, 25, 178, 4, 19, 101, 156, 97, 243, 198, 144, 161, 196, 212, 139,
        228, 28, 171, 131, 99, 161, 48, 206, 186, 186, 218, 151, 199, 209, 144, 131, 86, 232, 183,
        102, 93, 31, 193, 232, 67, 121, 192, 155, 190, 210, 130, 114, 167, 226, 160, 63, 84, 128,
        90, 207, 230, 133, 141, 230, 46, 84, 233, 251, 24, 29, 154, 108, 194, 67, 210, 36, 96, 78,
        148, 190, 149, 92, 223, 240, 26, 123, 244, 200, 49, 81, 27, 58, 49, 75, 66, 63, 241, 189,
        53, 10, 41, 105, 69, 160, 193, 131, 216, 150, 184, 229, 117, 32, 160, 24, 104, 153, 205,
        191, 252, 156, 131, 85, 94, 162, 10, 20, 175, 168, 184, 232, 62, 223, 41, 150, 213, 54,
        165, 69, 201, 137, 246, 21, 192, 3, 208, 14, 113, 32, 32, 190, 186, 250, 20, 30, 0, 9, 112,
        61, 197, 142, 118, 130, 152, 32, 38, 149, 170, 175, 217, 243, 19, 233, 213, 166, 108, 106,
        102, 139, 6, 210, 15, 239, 3, 139, 221, 7, 27, 208, 216, 85, 45, 228, 120, 19, 116, 48,
        134, 4, 107, 204, 196, 13, 96, 73, 49, 173, 52, 41, 47, 59, 231, 16, 103, 206, 203, 102,
        168, 172, 29, 31, 214, 209, 227, 114, 227, 231, 185, 167, 146, 249, 56, 137, 251, 184, 239,
        166, 53, 74, 94, 54, 140, 210, 149, 233, 137, 139, 45, 23, 244, 165, 227, 51, 28, 126, 16,
        106, 46, 49, 204, 203, 187, 169, 48, 139, 100, 71, 178, 186, 142, 247, 20, 238, 21, 217,
        13, 100, 56, 152, 92, 135, 219, 81, 149, 252, 35, 39, 100, 175, 233, 49, 236, 57, 250, 254,
        200, 144, 149, 37, 214, 114, 17, 157, 77, 254, 132, 255, 166, 123, 126, 228, 52, 204, 60,
        42, 103, 31, 198, 155, 125, 203, 94, 97, 99, 69, 126, 63, 7, 154, 141, 105, 66, 31, 151,
        199, 161, 230, 121, 86, 74, 222, 252, 68, 162, 86, 70, 252, 231, 169, 176, 89, 116, 107,
        57, 132, 184, 246, 145, 106, 200, 41, 185, 202, 203, 199, 115, 98, 183, 130, 84, 69, 70,
        222, 128, 233, 139, 223, 126, 201, 200, 40, 35, 160, 157, 27, 23, 48, 11, 34, 247, 132,
        117, 131, 95, 49, 39, 56, 174, 15, 187, 155, 71, 238, 228, 50, 217, 225, 56, 244, 84, 228,
        71, 179, 11, 105, 120, 12, 65, 177, 182, 83, 0, 120, 23, 76, 109, 41, 159, 173, 200, 184,
        33, 131, 140, 182, 199, 67, 42, 16, 125, 127, 18, 77, 49, 218, 239, 181, 171, 203, 25, 223,
        154, 160, 91, 41, 183,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint8_513_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u8, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("fd0fdfd0c2ccb9a01421e330f2054910070c6b53353a8ddefad470286f00c6f0");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_bool_16_max() {
    let mut value = Vector::<bool, 16>::try_from(Vec::<bool>::from_iter([
        true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
        true,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_bool_16_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<bool, 16> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0101010101010101010101010101010100000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint256_2_max() {
    let mut value = Vector::<U256, 2>::try_from(Vec::<U256>::from_iter([
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
        U256::from_bytes_le([
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        ]),
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint256_2_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<U256, 2> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("8667e718294e9e0df1d30600ba3eeb201f764aad2dad72748643e4a285e1d1f7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_31_max() {
    let mut value = Vector::<u128, 31>::try_from(Vec::<u128>::from_iter([
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
        340282366920938463463374607431768211455,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_31_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("661455692304dacd704fda4ac469deedd8783f5353c7120b35ceab4309536e81");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint64_513_random() {
    let mut value = Vector::<u64, 513>::try_from(Vec::<u64>::from_iter([
        977103724348450572,
        16638432304304789571,
        12981575418293692183,
        17859366747050231130,
        1662188454432232370,
        12352759710061780267,
        3234183931608500270,
        12266557138542509930,
        18199525626158707669,
        5038972670114315769,
        240056978730606423,
        2299934165864924530,
        12922065155132691865,
        18441095095944811941,
        10547737433159558699,
        3164040834623204831,
        8252904268285025382,
        11157110078015893423,
        14697827361463508405,
        2962665335592765897,
        1074194440157433128,
        10073361041261425891,
        7896847460035987796,
        1010194339988494562,
        10364684437029658170,
        15960287444316904761,
        1570304858216343206,
        12985069376921160054,
        10916134868048390423,
        17069946255720410243,
        4869242683969811141,
        2129015309923850593,
        10476304318490304096,
        13339042352261771329,
        5941049901647385193,
        9942080628048200013,
        6345441787934907564,
        8819300459248380270,
        1252881971507668822,
        15855629560153214387,
        14880830346892594844,
        1604107670465918491,
        5862926247889560120,
        8834826465942384487,
        15431618807287173213,
        4626830461960455797,
        17948599707814642865,
        6052719615078921178,
        14941482303404072695,
        8532564245082819179,
        3629561283757400391,
        8070439397851215541,
        2397438750926008647,
        4520474401805166454,
        9068468324028717470,
        12949472848189146366,
        7353773373764974969,
        115413469786052923,
        9272589064902772418,
        1596199742278885123,
        1657968880462860703,
        11305867595369271879,
        2026428676385444947,
        722155380768152563,
        17926384892494548427,
        17411947881045756476,
        18171495979452969890,
        10271912908915521427,
        18444072933594399825,
        16254972903105040221,
        16630667709769063357,
        2116026815894303745,
        4454480130719606956,
        6185770977174465258,
        6461058098288351768,
        2407546369850650362,
        1736253749300089891,
        8326379031142126451,
        15245139458704920030,
        7800865543378848579,
        13250382195738629619,
        14706068740585648306,
        3850128657021269084,
        12450415049153406078,
        15183617305060454899,
        6080880139738469099,
        17142733175562698278,
        14813917226429878668,
        6350636848342992140,
        1292272255182616335,
        2951801177775582325,
        14929861678113850638,
        15303809795567306110,
        13429354516284496764,
        10468402811529773529,
        16517481984463469354,
        2600473578641855538,
        1172476548310435807,
        17153780428535628975,
        10876715679105180607,
        16230772551522009395,
        8981785852487886878,
        5606395164467263395,
        6439970286716300739,
        9613025542977167084,
        16643379267038893448,
        10461597085246760395,
        361898406582954478,
        13656085897097645900,
        12142103879289021746,
        11902174243844765091,
        1076884863364074785,
        13395343138273787165,
        4685197415037034828,
        4624403585813928935,
        14688164166482407520,
        5009148445009422684,
        10426995946049637526,
        17067659258237820077,
        16151196628372992833,
        16020756694471742510,
        16740341963836231169,
        957815390429969771,
        307380283991785680,
        17932005890976886049,
        4028332519112066145,
        4249494472044475262,
        8332863645066922792,
        8936342202372523962,
        1242708572808694348,
        17098362380836494452,
        1543788437703937461,
        7628293118361326122,
        15951591927402662895,
        4769943789829437756,
        3784493926891439957,
        11578978942430627002,
        9820097252214369557,
        8497943326456914922,
        7128030052475419650,
        13640155228270433438,
        17294254210312748542,
        1832312825995144470,
        16757292153262371961,
        1345969373415803643,
        5613875569429700617,
        15991574966279976095,
        12416500008980030839,
        3474778905885400974,
        14867920376097183102,
        10746928886674173074,
        10823804150798926770,
        10046429162186511432,
        11646991899814770941,
        3514522824795561720,
        7404260138859596894,
        14087090359193136834,
        11596826265225316278,
        10247673722282781753,
        4583832196746093885,
        7959694153170389028,
        15795016839667219313,
        17981803593641625078,
        18070641334068719064,
        4311609789340170678,
        2416446175340911328,
        18294510219067021080,
        2563518867903100564,
        12116293250618016997,
        15001919653874834954,
        8670797458928043964,
        14658334131481750297,
        3032226661314458659,
        3575308331709676815,
        17194522325603676865,
        12812753547866815303,
        1464259543470389484,
        8538898544879404648,
        17741557292068894607,
        14100540531974802206,
        15162561447461089425,
        8408299487882720227,
        9757114783876767806,
        10822680141219423323,
        6210502447799521273,
        16873406633514314324,
        10492750123568636676,
        4996088035508255892,
        15733011781169482494,
        3153702619890365756,
        12214074507108402521,
        8191953044963906350,
        849479552785829818,
        7973602689523079172,
        18223031247497777078,
        14707408569419421818,
        7590245971377371921,
        8386046059632801067,
        16591942872509859227,
        8932989759840508647,
        17251041534594728489,
        12752242752429514898,
        18312462689682074020,
        14849438105100578428,
        16531378619225387711,
        1049785817727824518,
        3438403429400108241,
        13622440129624493177,
        7294142514636142063,
        1050694307207084724,
        17325982763132519005,
        11066261219747154337,
        424964219897196415,
        10358465959164754750,
        16191343281145831123,
        14706859925053900711,
        9478076136206631038,
        10082121966792968232,
        7176331980659839893,
        6038551199436888163,
        6371204431702843692,
        537491328086380327,
        16600166063353322009,
        12864254759985040499,
        3002736687134609946,
        5288999767166849061,
        2332742758978117360,
        6171323241928474,
        7733075660885415939,
        2715096982413586706,
        16450244688735888882,
        12766080316604434908,
        14044177173031951324,
        1234750501368857859,
        6550455764232392489,
        5733753751399645241,
        16130569834633669506,
        4828186682330495528,
        11603964233003828709,
        6713001560240990145,
        14153300493346514016,
        9757862045754467156,
        14740760692203577561,
        6449251713716628687,
        7608429398130067000,
        5779499436536925057,
        8715043935646495998,
        16743941371017494056,
        3682930293052520590,
        3386541564944628427,
        8186901106527813310,
        12735231512082683134,
        11837887129224817067,
        6076782378255021260,
        13849184223622479739,
        9513926526814577025,
        15078142390208687667,
        5670138880896722148,
        2193840338817769788,
        9888762987601666526,
        6332746795305001355,
        6744409690485399655,
        11828170087867954940,
        9134569966268024468,
        15631517117588702918,
        1010311973990396199,
        9062597867739511222,
        10320051759361653705,
        18323714258898391913,
        11079524985228536617,
        6368937473401999288,
        2879603048802106960,
        8939067638791907710,
        4229678228821803932,
        10629034884544094180,
        17507651088536253562,
        13296551257710456166,
        12803831624491391283,
        10270687523255168200,
        6253853071066629327,
        697752467825601686,
        2374050714609293898,
        1809288210864145063,
        2104073316659238077,
        2914216662232695089,
        5398331114487347354,
        1569386377584900982,
        7334483225068371110,
        4824659887469262759,
        3245634556868106884,
        1361264426983855281,
        17393225238243551898,
        1944614949879069374,
        6847888877919501984,
        16329253065361864824,
        1692705332873723200,
        12299901941561016988,
        5054879646520189683,
        14022166108677490513,
        14629113922582673047,
        13773351236750348147,
        4506033799782911264,
        10628113952037505275,
        12133574253433656820,
        18045568604286587962,
        13943129714931790827,
        5842093147356500465,
        1315246979481186379,
        374454881891939684,
        12241430376051190206,
        12729067699042087835,
        672556044508046680,
        4334232478421652829,
        13908528131000165365,
        5817499316291993042,
        14351326725043769812,
        2736455887209948757,
        10650629294131740542,
        5785008207263882914,
        12226476774917316421,
        4014347991071999874,
        7728289174859199950,
        15538338060773092868,
        11938966179942889829,
        10848679102949447944,
        6111923947390495248,
        15247664056630173200,
        15300856881812248354,
        6369652789083940966,
        5267369261604710236,
        16116013964712795961,
        3450064078342642600,
        11873895928188173827,
        5319706518863945301,
        5727522113200389041,
        12235018433862143859,
        14105021369386995746,
        6809721757885222124,
        219793605388017465,
        1737427988309027437,
        5348070613335793074,
        4402147530811830975,
        4946302330849414821,
        2931386982768685636,
        11491254244483457891,
        9623225613231124028,
        1332916429573567880,
        15018399817416344729,
        895553669500251501,
        3049833949269508848,
        17578277292605907349,
        3320299650964482870,
        15529564204577842217,
        10253503409753905547,
        17946160060674602599,
        2778391689585994379,
        966527544871518158,
        6452185034020868010,
        18331297442979147000,
        17861976450934949620,
        54699698327791804,
        11015745203556648688,
        15649759510379865866,
        14475322353305104147,
        6452670999954384386,
        9379803429761113190,
        4018971747352677006,
        6194252225890704721,
        17075544086244763299,
        12583732346440517628,
        4324424376762449703,
        18002399391480954229,
        8222793074863915373,
        18015083723550436228,
        8873468665691630237,
        17231868237387851994,
        9041041672007772543,
        14818629517089198288,
        15590173423697766104,
        6843740596887981317,
        13259987630375850076,
        7699755765774032302,
        13422256548837971492,
        8669873132979216565,
        3823007466124039052,
        14652563368254494460,
        18305490524504221085,
        10913443855133380803,
        5291226702304588380,
        12214992447837551799,
        15778609592348634039,
        7600972396487000732,
        698539533044532156,
        13120948962532282029,
        5699215972050925426,
        5075841750027968518,
        15262773747255503300,
        15566599214790639916,
        12371787164596265490,
        13282825495803648690,
        17354901350188778814,
        5393804799168207484,
        1658012233555177836,
        7008802881421935423,
        15146509193444214835,
        3831917034374232498,
        13492473966674058897,
        2021648133239835330,
        10253891712204393862,
        2568016909369634744,
        2746673888555437756,
        8489663429555171900,
        12352885808510789615,
        4628406709145564472,
        10616284371183379835,
        1792470448096092442,
        12969377839355295351,
        12649473032902760982,
        2880918724927640543,
        9344632906478757395,
        1358865706731397851,
        17899596571558459306,
        16620734700046590241,
        12193385508172480413,
        1250612460394093914,
        18190619839367729848,
        182750353813862475,
        10437850624401527963,
        3607259500979184922,
        6092379119613403121,
        7113427661520026968,
        9124330741577613322,
        16827474614344379080,
        6634522662935610896,
        16994161811317559262,
        6711559979544000908,
        8431679369065294341,
        11113214940512732966,
        18321766918334997737,
        18017973113951139343,
        17346984676911965647,
        15467477095917285803,
        7117902076001873222,
        3976174878934683116,
        248158050053846300,
        10396635844709392606,
        9494618202303821304,
        13348262414313478018,
        11144131154075977938,
        11137833590274629751,
        4000328585646465772,
        12992270891286918959,
        12787006879032673005,
        2114620623129741975,
        6567601661678006642,
        1894933664218880020,
        5468223335964910829,
        11344781676272244938,
        18110784953789556264,
        9560655331156861916,
        3391443475888987649,
        5653897762071313825,
        13376924772586631532,
        1416473301212112754,
        4289309093816947364,
        13118549440340121725,
        18081352111142950390,
        11875105283670334127,
        14794076995797171607,
        12768052566344648509,
        9261473835921339636,
        12996329951128155184,
        10275206396656299692,
        35687255015005293,
        6849475506285714222,
        4962513261041768844,
        832767074499705168,
        3373266155223823379,
        17232294947068512856,
        15720827646424143898,
        3339680257007613233,
        3999179047115322394,
        17532391346520134224,
        3941488948321551104,
        1032506466133652731,
        983172949831851205,
        4074965048585363814,
        13755543591888407947,
        3870779899516715030,
        9750580635403444034,
        12535323561517976624,
        12758885831344876897,
        5939426750581532694,
        2317731676631631068,
        7904436366116719169,
        18052442318159734840,
        15560263424525297839,
        17727671056821725508,
        17102954599136982273,
        16412839837776152599,
        13935598261994724923,
        16017613144876653411,
        18208311262234999095,
        13854945983761605132,
        5895148453236540642,
        2653976566142290933,
        4085465542295721804,
        7377022203015075797,
        5172591284434077144,
        5793742294252119682,
        10847189400170229879,
        15461835451771729183,
        5109845722067874472,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint64_513_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u64, 513> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("f6fe5bb836cca4115fcca592f3ca646c0d56b4ab316eb8f469c372846ec6d7f6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_31_random() {
    let mut value = Vector::<u128, 31>::try_from(Vec::<u128>::from_iter([
        322161099503949134246875383873042092581,
        48424120129033191202980611955490263589,
        83525771833522514138478832606095687392,
        174251362918903408377989570730386164359,
        327747722507188692603366405698089864121,
        324251219760392034443636083014245934168,
        160254778627258514227686166426224969984,
        53192731999358379862870660337238805470,
        166940110809962759607404717190565613527,
        287582397582068604130213094273086311503,
        219506566239800782574702895602883165791,
        49245529651081786813928168573143042666,
        301794544056749546798446275637383573640,
        155937435447398140651092870430499978315,
        127316426699795576538260461433889230642,
        128452975846864490943894793014215027614,
        317260113814669819552084270499724543086,
        16914731941051294314237570386865266560,
        144218158159492149549446492790394091793,
        282489757228217463406902370669044160920,
        311015163710547241879359459124322944322,
        274557519463898321910961455997120503679,
        190811083757632720512110498408594642752,
        92699632770453078379646724062876033016,
        88903809372731974263458073004247133983,
        68990849651486535201001743283432629392,
        124895642468721040054565964881513861598,
        134825508388621974592041493857531874555,
        78462050498312150224719961424376658389,
        153336548508268826136733686433451871611,
        41167450208159900235790428302057680448,
    ]))
    .unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_31_random/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 31> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("6f8bfa11523cb7f78e6dabe9796ad0cb5b4730f6647c77164474985034ce1eba");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint128_8_zero() {
    let mut value =
        Vector::<u128, 8>::try_from(Vec::<u128>::from_iter([0, 0, 0, 0, 0, 0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint128_8_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u128, 8> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71");
    assert_eq!(root, expected_root);
}

#[test]
fn test_basic_vector_vec_uint32_3_zero() {
    let mut value = Vector::<u32, 3>::try_from(Vec::<u32>::from_iter([0, 0, 0])).unwrap();
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/valid/vec_uint32_3_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: Vector<u32, 3> = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&mut value);
    let expected_root =
        root_from_hex("0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_max_one_byte_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_zero_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_max_one_byte_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_max_one_byte_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_max_one_byte_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_0() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_0/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 0>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_zero_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_0() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_0/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 0>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_max_one_byte_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_max_one_byte_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_0() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_0/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 0>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_zero_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_max_one_byte_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_max_one_byte_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_max_one_byte_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_zero_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_513_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_513_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_2_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_2_max_one_byte_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_0() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_0/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 0>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_0() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_0/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 0>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_zero_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_0() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_0/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 0>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_31_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_31_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_max_one_byte_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_zero_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_0() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_0/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 0>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_31_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_31_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_3_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_3_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_5_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_5_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_513_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_513_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_16_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_16_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_8_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_8_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_16_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_16_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_4_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_4_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_3_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_3_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_513_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_513_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_512_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_512_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_16_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_16_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_5_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_5_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_4_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_4_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_5_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_5_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_512_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_512_zero_one_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_8_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_8_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_5_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_5_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_16_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_16_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_3_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_3_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_31_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_31_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_5_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_5_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_1_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_1_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_3_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_3_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_31_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_31_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_16_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint128_16_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u128, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_4_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_4_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_513_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_513_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u32, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_16_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_16_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_31_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_31_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_8_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_bool_8_max_one_byte_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<bool, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_3_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_3_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<U256, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_4_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_4_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_4_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_4_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_8_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_8_random_one_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_513_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_513_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_2_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_2_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_513_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_513_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_1_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_1_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_bool_512_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_bool_512_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<bool, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_3_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_3_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 3>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_1_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_1_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_max_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_max_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_31_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_31_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u128, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_8_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_8_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_2_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_2_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_1_random_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_1_random_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_2_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_2_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u8, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_16_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_16_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 16>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_2_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_2_random_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint128_512_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint128_512_zero_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u128, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_8_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_8_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_5_max_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint8_5_max_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u8, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_2_random_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_2_random_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_5_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint256_5_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<U256, 5>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_4_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_4_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_513_random_one_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_513_random_one_less/serialized.ssz_snappy");

    deserialize::<Vector<u16, 513>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_31_zero_one_less() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_31_zero_one_less/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 31>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_512_zero_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_512_zero_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_512_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_512_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u64, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_512_random_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_512_random_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 512>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_1_zero_one_byte_more() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint16_1_zero_one_byte_more/serialized.ssz_snappy");

    deserialize::<Vector<u16, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint32_2_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint32_2_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u32, 2>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_8_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint64_8_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u64, 8>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint8_1_max_one_more() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint8_1_max_one_more/serialized.ssz_snappy",
    );

    deserialize::<Vector<u8, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint256_4_max_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint256_4_max_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<U256, 4>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint64_1_zero_one_byte_less() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/basic_vector/invalid/vec_uint64_1_zero_one_byte_less/serialized.ssz_snappy");

    deserialize::<Vector<u64, 1>>(&encoding);
}

#[test]
#[should_panic]
fn test_basic_vector_vec_uint16_3_nil() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/basic_vector/invalid/vec_uint16_3_nil/serialized.ssz_snappy",
    );

    deserialize::<Vector<u16, 3>>(&encoding);
}
